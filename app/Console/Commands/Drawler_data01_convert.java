<?php
// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//the import part of tJava_10

//the import part of tJava_1
//import java.util.List;

//the import part of tJava_11
//import java.util.List;

//the import part of tJava_9
//import java.util.List;

//the import part of tJavaRow_1
//import java.util.List;

//the import part of tJavaRow_3
//import java.util.List;

//the import part of tJava_2
//import java.util.List;

//the import part of tJava_3
//import java.util.List;

//the import part of tJava_4
//import java.util.List;

//the import part of tJava_7
//import java.util.List;

//the import part of tJava_12
//import java.util.List;

//the import part of tJava_5
//import java.util.List;

//the import part of tJava_6
//import java.util.List;

@SuppressWarnings("unused")
/**
 * Job: CRAWLER_DATA Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class CRAWLER_DATA implements TalendJob {
	
	// public final $obj = new stdClass();
	// // for transmiting parameters purpose
	// private $valueObject = null;
	// public function getValueObject() {
	// 	return $this->valueObject;
	// }
	// public function setValueObject($valueObject) {
	// 	$this->valueObject = $valueObject;
	// }
	// private const defaultCharset = mb_internal_encoding();
	// private const utf8Charset = "UTF-8";

	// private $defaultProps = new stdClass();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (apiLink != null) {

				this.setProperty("apiLink", apiLink.toString());

			}

			if (from != null) {

				String pattern_from = "yyyy-MM-dd HH:mm:ss";
				String value_from = "2016-07-01 00:00:00";
				String[] parts_from = value_from.split(";");
				if (parts_from.length > 1) {
					pattern_from = parts_from[0];
					this.setProperty("from", pattern_from + ";"
							+ FormatterUtils.format_Date(from, pattern_from));
				} else {
					this.setProperty("from",
							FormatterUtils.format_Date(from, pattern_from));
				}

			}

			if (lineCount != null) {

				this.setProperty("lineCount", lineCount.toString());

			}

			if (metadataPrefix != null) {

				this.setProperty("metadataPrefix", metadataPrefix.toString());

			}

			if (realUrl != null) {

				this.setProperty("realUrl", realUrl.toString());

			}

			if (resumptionToken != null) {

				this.setProperty("resumptionToken", resumptionToken.toString());

			}

			if (set != null) {

				this.setProperty("set", set.toString());

			}

			if (to != null) {

				String pattern_to = "yyyy-MM-dd HH:mm:ss";
				String value_to = "2016-07-01 00:00:00";
				String[] parts_to = value_to.split(";");
				if (parts_to.length > 1) {
					pattern_to = parts_to[0];
					this.setProperty(
							"to",
							pattern_to
									+ ";"
									+ FormatterUtils
											.format_Date(to, pattern_to));
				} else {
					this.setProperty("to",
							FormatterUtils.format_Date(to, pattern_to));
				}

			}

			if (tryCount != null) {

				this.setProperty("tryCount", tryCount.toString());

			}

			if (until != null) {

				String pattern_until = "yyyy-MM-dd HH:mm:ss";
				String value_until = "2016-07-01 00:00:00";
				String[] parts_until = value_until.split(";");
				if (parts_until.length > 1) {
					pattern_until = parts_until[0];
					this.setProperty("until", pattern_until + ";"
							+ FormatterUtils.format_Date(until, pattern_until));
				} else {
					this.setProperty("until",
							FormatterUtils.format_Date(until, pattern_until));
				}

			}

			if (loopTime != null) {

				this.setProperty("loopTime", loopTime.toString());

			}

			if (mailTo != null) {

				this.setProperty("mailTo", mailTo.toString());

			}

			if (mailPassword != null) {

				this.setProperty("mailPassword", mailPassword.toString());

			}

			if (mailFrom != null) {

				this.setProperty("mailFrom", mailFrom.toString());

			}

			if (dbHost != null) {

				this.setProperty("dbHost", dbHost.toString());

			}

			if (dbPort != null) {

				this.setProperty("dbPort", dbPort.toString());

			}

			if (dbSchema != null) {

				this.setProperty("dbSchema", dbSchema.toString());

			}

			if (dbUser != null) {

				this.setProperty("dbUser", dbUser.toString());

			}

			if (dbPassword != null) {

				this.setProperty("dbPassword", dbPassword.toString());

			}

			if (MSG_JOB_DONE != null) {

				this.setProperty("MSG_JOB_DONE", MSG_JOB_DONE.toString());

			}

			if (MSG_JOB_ERR != null) {

				this.setProperty("MSG_JOB_ERR", MSG_JOB_ERR.toString());

			}

			if (dbQueryParam != null) {

				this.setProperty("dbQueryParam", dbQueryParam.toString());

			}

			if (userName != null) {

				this.setProperty("userName", userName.toString());

			}

			if (MSG_LOG_SUCCESS != null) {

				this.setProperty("MSG_LOG_SUCCESS", MSG_LOG_SUCCESS.toString());

			}

			if (MSG_LOG_ERROR != null) {

				this.setProperty("MSG_LOG_ERROR", MSG_LOG_ERROR.toString());

			}

			if (tmpFile != null) {

				this.setProperty("tmpFile", tmpFile.toString());

			}

			if (xslFile != null) {

				this.setProperty("xslFile", xslFile.toString());

			}

			if (masterFrom != null) {

				String pattern_masterFrom = "yyyy-MM-dd HH:mm:ss";
				String value_masterFrom = "";
				String[] parts_masterFrom = value_masterFrom.split(";");
				if (parts_masterFrom.length > 1) {
					pattern_masterFrom = parts_masterFrom[0];
					this.setProperty(
							"masterFrom",
							pattern_masterFrom
									+ ";"
									+ FormatterUtils.format_Date(masterFrom,
											pattern_masterFrom));
				} else {
					this.setProperty("masterFrom", FormatterUtils.format_Date(
							masterFrom, pattern_masterFrom));
				}

			}

			if (masterTo != null) {

				String pattern_masterTo = "yyyy-MM-dd HH:mm:ss";
				String value_masterTo = "";
				String[] parts_masterTo = value_masterTo.split(";");
				if (parts_masterTo.length > 1) {
					pattern_masterTo = parts_masterTo[0];
					this.setProperty(
							"masterTo",
							pattern_masterTo
									+ ";"
									+ FormatterUtils.format_Date(masterTo,
											pattern_masterTo));
				} else {
					this.setProperty("masterTo", FormatterUtils.format_Date(
							masterTo, pattern_masterTo));
				}

			}

			if (untilMaster != null) {

				String pattern_untilMaster = "yyyy-MM-dd HH:mm:ss";
				String value_untilMaster = "";
				String[] parts_untilMaster = value_untilMaster.split(";");
				if (parts_untilMaster.length > 1) {
					pattern_untilMaster = parts_untilMaster[0];
					this.setProperty(
							"untilMaster",
							pattern_untilMaster
									+ ";"
									+ FormatterUtils.format_Date(untilMaster,
											pattern_untilMaster));
				} else {
					this.setProperty("untilMaster", FormatterUtils.format_Date(
							untilMaster, pattern_untilMaster));
				}

			}

			if (settingID != null) {

				this.setProperty("settingID", settingID.toString());

			}

		}

		public String apiLink;

		public String getApiLink() {
			return this.apiLink;
		}

		public java.util.Date from;

		public java.util.Date getFrom() {
			return this.from;
		}

		public Integer lineCount;

		public Integer getLineCount() {
			return this.lineCount;
		}

		public String metadataPrefix;

		public String getMetadataPrefix() {
			return this.metadataPrefix;
		}

		public String realUrl;

		public String getRealUrl() {
			return this.realUrl;
		}

		public String resumptionToken;

		public String getResumptionToken() {
			return this.resumptionToken;
		}

		public String set;

		public String getSet() {
			return this.set;
		}

		public java.util.Date to;

		public java.util.Date getTo() {
			return this.to;
		}

		public Integer tryCount;

		public Integer getTryCount() {
			return this.tryCount;
		}

		public java.util.Date until;

		public java.util.Date getUntil() {
			return this.until;
		}

		public Integer loopTime;

		public Integer getLoopTime() {
			return this.loopTime;
		}

		public String mailTo;

		public String getMailTo() {
			return this.mailTo;
		}

		public java.lang.String mailPassword;

		public java.lang.String getMailPassword() {
			return this.mailPassword;
		}

		public String mailFrom;

		public String getMailFrom() {
			return this.mailFrom;
		}

		public String dbHost;

		public String getDbHost() {
			return this.dbHost;
		}

		public Integer dbPort;

		public Integer getDbPort() {
			return this.dbPort;
		}

		public String dbSchema;

		public String getDbSchema() {
			return this.dbSchema;
		}

		public String dbUser;

		public String getDbUser() {
			return this.dbUser;
		}

		public java.lang.String dbPassword;

		public java.lang.String getDbPassword() {
			return this.dbPassword;
		}

		public String MSG_JOB_DONE;

		public String getMSG_JOB_DONE() {
			return this.MSG_JOB_DONE;
		}

		public String MSG_JOB_ERR;

		public String getMSG_JOB_ERR() {
			return this.MSG_JOB_ERR;
		}

		public String dbQueryParam;

		public String getDbQueryParam() {
			return this.dbQueryParam;
		}

		public String userName;

		public String getUserName() {
			return this.userName;
		}

		public String MSG_LOG_SUCCESS;

		public String getMSG_LOG_SUCCESS() {
			return this.MSG_LOG_SUCCESS;
		}

		public String MSG_LOG_ERROR;

		public String getMSG_LOG_ERROR() {
			return this.MSG_LOG_ERROR;
		}

		public String tmpFile;

		public String getTmpFile() {
			return this.tmpFile;
		}

		public String xslFile;

		public String getXslFile() {
			return this.xslFile;
		}

		public java.util.Date masterFrom;

		public java.util.Date getMasterFrom() {
			return this.masterFrom;
		}

		public java.util.Date masterTo;

		public java.util.Date getMasterTo() {
			return this.masterTo;
		}

		public java.util.Date untilMaster;

		public java.util.Date getUntilMaster() {
			return this.untilMaster;
		}

		public String settingID;

		public String getSettingID() {
			return this.settingID;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "CRAWLER_DATA";
	private final String projectName = "PROJECTNDL";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					CRAWLER_DATA.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(CRAWLER_DATA.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (TalendException e) {
					// do nothing

				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tLogCatcher_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSendMail_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlConnection_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tInfiniteLoop_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tHttpRequest_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputRaw_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_11_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputRaw_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tXSLT_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputRaw_3_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tExtractXMLField_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlSP_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlSP_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileDelete_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileDelete_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJavaRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFlowToIterate_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputRaw_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFixedFlowInput_1_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlOutput_2_error(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tInfiniteLoop_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tSendMail_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tSendMail_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tJava_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tJava_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlConnection_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_10_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tInfiniteLoop_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputRaw_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_9_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputRaw_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlSP_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_2_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileDelete_3_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFixedFlowInput_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_4_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_7_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tSendMail_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_12_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_5_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tJava_6_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlClose_1_onSubJobError(Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class errStruct implements
			routines.system.IPersistableRow<errStruct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String event;

		public String getEvent() {
			return this.event;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.message = readString(dis);

					this.code = readInteger(dis);

					this.moment = readDate(dis);

					this.event = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.event, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",moment=" + String.valueOf(moment));
			sb.append(",event=" + event);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(errStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements
			routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				errStruct err = new errStruct();

				/**
				 * [tMysqlOutput_3 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_3", false);
				start_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_3";

				int tos_count_tMysqlOutput_3 = 0;

				class BytesLimit65535_tMysqlOutput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMysqlOutput_3().limitLog4jByte();

				int nb_line_tMysqlOutput_3 = 0;
				int nb_line_update_tMysqlOutput_3 = 0;
				int nb_line_inserted_tMysqlOutput_3 = 0;
				int nb_line_deleted_tMysqlOutput_3 = 0;
				int nb_line_rejected_tMysqlOutput_3 = 0;

				int deletedCount_tMysqlOutput_3 = 0;
				int updatedCount_tMysqlOutput_3 = 0;
				int insertedCount_tMysqlOutput_3 = 0;

				int rejectedCount_tMysqlOutput_3 = 0;

				String tableName_tMysqlOutput_3 = "LOG";
				boolean whetherReject_tMysqlOutput_3 = false;

				java.util.Calendar calendar_tMysqlOutput_3 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_3.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_3 = calendar_tMysqlOutput_3.getTime()
						.getTime();
				calendar_tMysqlOutput_3.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_3 = calendar_tMysqlOutput_3
						.getTime().getTime();
				long date_tMysqlOutput_3;

				java.sql.Connection conn_tMysqlOutput_3 = null;
				conn_tMysqlOutput_3 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				int count_tMysqlOutput_3 = 0;

				String insert_tMysqlOutput_3 = "INSERT INTO `"
						+ "LOG"
						+ "` (`MESSAGE`,`CATEGORY`,`CRTDATE`,`LOGEVENT`) VALUES (?,?,?,?)";
				int batchSize_tMysqlOutput_3 = 100;
				int batchSizeCounter_tMysqlOutput_3 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_3 = conn_tMysqlOutput_3
						.prepareStatement(insert_tMysqlOutput_3);

				/**
				 * [tMysqlOutput_3 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				class BytesLimit65535_tMap_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_1().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				errStruct err_tmp = new errStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				class BytesLimit65535_tLogCatcher_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tLogCatcher_1().limitLog4jByte();

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row3.type = lcm.getType();
					row3.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row3.priority = lcm.getPriority();
					row3.message = lcm.getMessage();
					row3.code = lcm.getCode();

					row3.moment = java.util.Calendar.getInstance().getTime();

					row3.pid = pid;
					row3.root_pid = rootPid;
					row3.father_pid = fatherPid;

					row3.project = projectName;
					row3.job = jobName;
					row3.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */

					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						err = null;

						// # Output table : 'err'
						err_tmp.message = "「" + context.realUrl
								+ "」を取得しました、レスポンスコード：" + row3.code + ", "
								+ row3.message;
						err_tmp.code = 3;
						err_tmp.moment = row3.moment;
						err_tmp.event = "APIレスポンス";
						err = err_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */
					// Start of branch "err"
					if (err != null) {

						/**
						 * [tMysqlOutput_3 main ] start
						 */

						currentComponent = "tMysqlOutput_3";

						whetherReject_tMysqlOutput_3 = false;
						if (err.message == null) {
							pstmt_tMysqlOutput_3.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_3.setString(1, err.message);
						}

						if (err.code == null) {
							pstmt_tMysqlOutput_3.setNull(2,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tMysqlOutput_3.setInt(2, err.code);
						}

						if (err.moment != null) {
							date_tMysqlOutput_3 = err.moment.getTime();
							if (date_tMysqlOutput_3 < year1_tMysqlOutput_3
									|| date_tMysqlOutput_3 >= year10000_tMysqlOutput_3) {
								pstmt_tMysqlOutput_3.setString(3,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tMysqlOutput_3.setTimestamp(3,
										new java.sql.Timestamp(
												date_tMysqlOutput_3));
							}
						} else {
							pstmt_tMysqlOutput_3
									.setNull(3, java.sql.Types.DATE);
						}

						if (err.event == null) {
							pstmt_tMysqlOutput_3.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_3.setString(4, err.event);
						}

						pstmt_tMysqlOutput_3.addBatch();
						nb_line_tMysqlOutput_3++;

						batchSizeCounter_tMysqlOutput_3++;
						if (batchSize_tMysqlOutput_3 <= batchSizeCounter_tMysqlOutput_3) {
							try {
								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
										.executeBatch()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: 1);
								}
								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tMysqlOutput_3 = 0;
								for (int countEach_tMysqlOutput_3 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
											: countEach_tMysqlOutput_3);
								}
								insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tMysqlOutput_3 = 0;
						}

						tos_count_tMysqlOutput_3++;

						/**
						 * [tMysqlOutput_3 main ] stop
						 */

					} // End of branch "err"

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				tSendMail_2Process(globalMap);

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_3 end ] start
				 */

				currentComponent = "tMysqlOutput_3";

				try {
					if (batchSizeCounter_tMysqlOutput_3 != 0) {
						int countSum_tMysqlOutput_3 = 0;

						for (int countEach_tMysqlOutput_3 : pstmt_tMysqlOutput_3
								.executeBatch()) {
							countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_3 = 0;
					for (int countEach_tMysqlOutput_3 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_3 += (countEach_tMysqlOutput_3 < 0 ? 0
								: countEach_tMysqlOutput_3);
					}

					insertedCount_tMysqlOutput_3 += countSum_tMysqlOutput_3;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_3 = 0;

				if (pstmt_tMysqlOutput_3 != null) {

					pstmt_tMysqlOutput_3.close();

				}

				nb_line_deleted_tMysqlOutput_3 = nb_line_deleted_tMysqlOutput_3
						+ deletedCount_tMysqlOutput_3;
				nb_line_update_tMysqlOutput_3 = nb_line_update_tMysqlOutput_3
						+ updatedCount_tMysqlOutput_3;
				nb_line_inserted_tMysqlOutput_3 = nb_line_inserted_tMysqlOutput_3
						+ insertedCount_tMysqlOutput_3;
				nb_line_rejected_tMysqlOutput_3 = nb_line_rejected_tMysqlOutput_3
						+ rejectedCount_tMysqlOutput_3;

				globalMap.put("tMysqlOutput_3_NB_LINE", nb_line_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_3);
				globalMap.put("tMysqlOutput_3_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_3);

				ok_Hash.put("tMysqlOutput_3", true);
				end_Hash.put("tMysqlOutput_3", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_3 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_3 finally ] start
				 */

				currentComponent = "tMysqlOutput_3";

				/**
				 * [tMysqlOutput_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_2 begin ] start
				 */

				ok_Hash.put("tSendMail_2", false);
				start_Hash.put("tSendMail_2", System.currentTimeMillis());

				currentComponent = "tSendMail_2";

				int tos_count_tSendMail_2 = 0;

				class BytesLimit65535_tSendMail_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSendMail_2().limitLog4jByte();

				/**
				 * [tSendMail_2 begin ] stop
				 */

				/**
				 * [tSendMail_2 main ] start
				 */

				currentComponent = "tSendMail_2";

				String smtpHost_tSendMail_2 = "smtp.gmail.com";
				String smtpPort_tSendMail_2 = "465";
				String from_tSendMail_2 = (context.mailFrom);
				String to_tSendMail_2 = (context.mailTo).replace(";", ",");
				String cc_tSendMail_2 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String bcc_tSendMail_2 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String subject_tSendMail_2 = ("NDL APIからデータを取得している時のエラー通知" + TalendDate
						.getDate("CCYY-MM-DD hh:mm:ss"));

				java.util.List<java.util.Map<String, String>> headers_tSendMail_2 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_2 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_2 = new java.util.ArrayList<String>();

				String message_tSendMail_2 = ((context.userName + "様、\r\nNDL APIからのデータ取得にエラーが発生しました。システムにログインしてログを確認してください。\r\nよろしくお願いします。\r\n注意：このメールは配信専用なので返信しないでください。") == null || ""
						.equals(context.userName
								+ "様、\r\nNDL APIからのデータ取得にエラーが発生しました。システムにログインしてログを確認してください。\r\nよろしくお願いします。\r\n注意：このメールは配信専用なので返信しないでください。")) ? "\"\""
						: (context.userName + "様、\r\nNDL APIからのデータ取得にエラーが発生しました。システムにログインしてログを確認してください。\r\nよろしくお願いします。\r\n注意：このメールは配信専用なので返信しないでください。");
				java.util.Properties props_tSendMail_2 = System.getProperties();
				props_tSendMail_2.put("mail.smtp.host", smtpHost_tSendMail_2);
				props_tSendMail_2.put("mail.smtp.port", smtpPort_tSendMail_2);
				props_tSendMail_2.put("mail.mime.encodefilename", "true");
				props_tSendMail_2.put("mail.smtp.starttls.enable", "true");
				java.security.Security
						.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
				props_tSendMail_2.put("mail.smtp.socketFactory.class",
						"javax.net.ssl.SSLSocketFactory");
				props_tSendMail_2.put("mail.smtp.socketFactory.fallback",
						"false");
				props_tSendMail_2.put("mail.smtp.socketFactory.port",
						smtpPort_tSendMail_2);
				try {

					props_tSendMail_2.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_2 = javax.mail.Session
							.getInstance(props_tSendMail_2,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_2 = context.mailPassword;

											return new javax.mail.PasswordAuthentication(
													context.mailFrom,
													decryptedPassword_tSendMail_2);
										}
									});

					javax.mail.Message msg_tSendMail_2 = new javax.mail.internet.MimeMessage(
							session_tSendMail_2);
					msg_tSendMail_2
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_2, null));
					msg_tSendMail_2.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_2, false));
					if (cc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_2, false));
					if (bcc_tSendMail_2 != null)
						msg_tSendMail_2.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_2, false));
					msg_tSendMail_2.setSubject(subject_tSendMail_2);

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < headers_tSendMail_2
							.size(); i_tSendMail_2++) {
						java.util.Map<String, String> header_tSendMail_2 = headers_tSendMail_2
								.get(i_tSendMail_2);
						msg_tSendMail_2.setHeader(
								header_tSendMail_2.get("KEY"),
								header_tSendMail_2.get("VALUE"));
					}
					msg_tSendMail_2.setSentDate(new Date());
					msg_tSendMail_2.setHeader("X-Priority", "1"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_2 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_2.setText(message_tSendMail_2, "UTF-8",
							"plain");
					mp_tSendMail_2.addBodyPart(mbpText_tSendMail_2);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_2 = null;

					for (int i_tSendMail_2 = 0; i_tSendMail_2 < attachments_tSendMail_2
							.size(); i_tSendMail_2++) {
						String filename_tSendMail_2 = attachments_tSendMail_2
								.get(i_tSendMail_2);
						javax.activation.FileDataSource fds_tSendMail_2 = null;
						java.io.File file_tSendMail_2 = new java.io.File(
								filename_tSendMail_2);

						if (!file_tSendMail_2.exists()) {
							continue;
						}

						if (file_tSendMail_2.isDirectory()) {
							java.io.File[] subFiles_tSendMail_2 = file_tSendMail_2
									.listFiles();
							for (java.io.File subFile_tSendMail_2 : subFiles_tSendMail_2) {
								if (subFile_tSendMail_2.isFile()) {
									fds_tSendMail_2 = new javax.activation.FileDataSource(
											subFile_tSendMail_2
													.getAbsolutePath());
									mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_2
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_2));
									mbpFile_tSendMail_2
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_2
															.getName()));
									if (contentTransferEncoding_tSendMail_2
											.get(i_tSendMail_2)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_2.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_2
											.addBodyPart(mbpFile_tSendMail_2);
								}
							}
						} else {
							mbpFile_tSendMail_2 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_2 = new javax.activation.FileDataSource(
									filename_tSendMail_2);
							mbpFile_tSendMail_2
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_2));
							mbpFile_tSendMail_2
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_2
													.getName()));
							if (contentTransferEncoding_tSendMail_2.get(
									i_tSendMail_2).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_2.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_2.addBodyPart(mbpFile_tSendMail_2);
						}
					}
					// -- set the content --
					msg_tSendMail_2.setContent(mp_tSendMail_2);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_2 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_2
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_2
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_2
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_2
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_2
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_2);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_2);
				} catch (java.lang.Exception e) {

					System.err.println(e.toString());

				} finally {
					props_tSendMail_2.remove("mail.smtp.host");
					props_tSendMail_2.remove("mail.smtp.port");

					props_tSendMail_2.remove("mail.mime.encodefilename");

					props_tSendMail_2.remove("mail.smtp.starttls.enable");

					props_tSendMail_2.remove("mail.smtp.socketFactory.class");
					props_tSendMail_2
							.remove("mail.smtp.socketFactory.fallback");
					props_tSendMail_2.remove("mail.smtp.socketFactory.port");

					props_tSendMail_2.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_2++;

				/**
				 * [tSendMail_2 main ] stop
				 */

				/**
				 * [tSendMail_2 end ] start
				 */

				currentComponent = "tSendMail_2";

				ok_Hash.put("tSendMail_2", true);
				end_Hash.put("tSendMail_2", System.currentTimeMillis());

				/**
				 * [tSendMail_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_2 finally ] start
				 */

				currentComponent = "tSendMail_2";

				/**
				 * [tSendMail_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_2_SUBPROCESS_STATE", 1);
	}

	public void tMysqlConnection_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlConnection_1 begin ] start
				 */

				ok_Hash.put("tMysqlConnection_1", false);
				start_Hash
						.put("tMysqlConnection_1", System.currentTimeMillis());

				currentComponent = "tMysqlConnection_1";

				int tos_count_tMysqlConnection_1 = 0;

				class BytesLimit65535_tMysqlConnection_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMysqlConnection_1().limitLog4jByte();

				String properties_tMysqlConnection_1 = context.dbQueryParam;
				if (properties_tMysqlConnection_1 == null
						|| properties_tMysqlConnection_1.trim().length() == 0) {
					properties_tMysqlConnection_1 += "rewriteBatchedStatements=true";
				} else if (properties_tMysqlConnection_1 != null
						&& !properties_tMysqlConnection_1
								.contains("rewriteBatchedStatements")) {
					properties_tMysqlConnection_1 += "&rewriteBatchedStatements=true";
				}

				String url_tMysqlConnection_1 = "jdbc:mysql://"
						+ context.dbHost + ":" + context.dbPort + "/"
						+ context.dbSchema + "?"
						+ properties_tMysqlConnection_1;

				String dbUser_tMysqlConnection_1 = context.dbUser;

				final String decryptedPassword_tMysqlConnection_1 = context.dbPassword;
				String dbPwd_tMysqlConnection_1 = decryptedPassword_tMysqlConnection_1;

				java.sql.Connection conn_tMysqlConnection_1 = null;

				String driverClass_tMysqlConnection_1 = "org.gjt.mm.mysql.Driver";
				java.lang.Class.forName(driverClass_tMysqlConnection_1);

				conn_tMysqlConnection_1 = java.sql.DriverManager.getConnection(
						url_tMysqlConnection_1, dbUser_tMysqlConnection_1,
						dbPwd_tMysqlConnection_1);

				globalMap.put("conn_tMysqlConnection_1",
						conn_tMysqlConnection_1);
				if (null != conn_tMysqlConnection_1) {

					conn_tMysqlConnection_1.setAutoCommit(true);
				}

				globalMap.put("conn_tMysqlConnection_1",
						conn_tMysqlConnection_1);

				globalMap.put("db_tMysqlConnection_1", context.dbSchema);

				/**
				 * [tMysqlConnection_1 begin ] stop
				 */

				/**
				 * [tMysqlConnection_1 main ] start
				 */

				currentComponent = "tMysqlConnection_1";

				tos_count_tMysqlConnection_1++;

				/**
				 * [tMysqlConnection_1 main ] stop
				 */

				/**
				 * [tMysqlConnection_1 end ] start
				 */

				currentComponent = "tMysqlConnection_1";

				ok_Hash.put("tMysqlConnection_1", true);
				end_Hash.put("tMysqlConnection_1", System.currentTimeMillis());

				tJava_10Process(globalMap);

				/**
				 * [tMysqlConnection_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlConnection_1 finally ] start
				 */

				currentComponent = "tMysqlConnection_1";

				/**
				 * [tMysqlConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_10Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_10 begin ] start
				 */

				ok_Hash.put("tJava_10", false);
				start_Hash.put("tJava_10", System.currentTimeMillis());

				currentComponent = "tJava_10";

				int tos_count_tJava_10 = 0;

				class BytesLimit65535_tJava_10 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_10().limitLog4jByte();

				if (context.set != null && !"".equals(context.set)) {
					String[] setList = (context.set).split(",");
					globalMap.put("setList", context.set);
					globalMap.put("lastPos", setList.length - 1);
					globalMap.put("currPos", 0);
				} else {
					System.out.println("Configuration for set is not correct!");
					globalMap.put("currPos", -1);
				}

				context.masterFrom = context.from;
				context.masterTo = context.to;
				context.untilMaster = context.until;

				/**
				 * [tJava_10 begin ] stop
				 */

				/**
				 * [tJava_10 main ] start
				 */

				currentComponent = "tJava_10";

				tos_count_tJava_10++;

				/**
				 * [tJava_10 main ] stop
				 */

				/**
				 * [tJava_10 end ] start
				 */

				currentComponent = "tJava_10";

				ok_Hash.put("tJava_10", true);
				end_Hash.put("tJava_10", System.currentTimeMillis());

				if ((Integer) globalMap.get("currPos") > -1) {

					tInfiniteLoop_1Process(globalMap);
				}

				/**
				 * [tJava_10 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_10 finally ] start
				 */

				currentComponent = "tJava_10";

				/**
				 * [tJava_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_10_SUBPROCESS_STATE", 1);
	}

	public void tInfiniteLoop_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tInfiniteLoop_1 begin ] start
				 */

				int NB_ITERATE_tJava_1 = 0; // for statistics

				int NB_ITERATE_tJava_2 = 0; // for statistics

				int NB_ITERATE_tJava_3 = 0; // for statistics

				int NB_ITERATE_tHttpRequest_1 = 0; // for statistics

				ok_Hash.put("tInfiniteLoop_1", false);
				start_Hash.put("tInfiniteLoop_1", System.currentTimeMillis());

				currentComponent = "tInfiniteLoop_1";

				int tos_count_tInfiniteLoop_1 = 0;

				class BytesLimit65535_tInfiniteLoop_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tInfiniteLoop_1().limitLog4jByte();

				int counter_tInfiniteLoop_1 = 0;
				globalMap.put("tInfiniteLoop_1_CURRENT_ITERATION",
						counter_tInfiniteLoop_1);

				while (counter_tInfiniteLoop_1 > -1) {
					counter_tInfiniteLoop_1++;
					globalMap.put("tInfiniteLoop_1_CURRENT_ITERATION",
							counter_tInfiniteLoop_1);

					/**
					 * [tInfiniteLoop_1 begin ] stop
					 */

					/**
					 * [tInfiniteLoop_1 main ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					tos_count_tInfiniteLoop_1++;

					/**
					 * [tInfiniteLoop_1 main ] stop
					 */
					NB_ITERATE_tJava_1++;

					/**
					 * [tJava_1 begin ] start
					 */

					ok_Hash.put("tJava_1", false);
					start_Hash.put("tJava_1", System.currentTimeMillis());

					currentComponent = "tJava_1";

					int tos_count_tJava_1 = 0;

					class BytesLimit65535_tJava_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tJava_1().limitLog4jByte();

					String resumeToken = ((String) globalMap.get("_myToken"));
					String[] arr = ((String) globalMap.get("setList"))
							.split(",");
					context.set = arr[(Integer) globalMap.get("currPos")];

					if (resumeToken == null) {
						context.realUrl = context.apiLink
								+ "&metadataPrefix="
								+ context.metadataPrefix
								+ "&set="
								+ context.set
								+ "&from="
								+ TalendDate.formatDate("YYYY-MM-dd",
										context.from)
								+ "&until="
								+ TalendDate.formatDate("YYYY-MM-dd",
										context.until);
					} else {
						context.realUrl = context.apiLink + "&resumptionToken="
								+ resumeToken;
					}

					globalMap.put("curF",
							context.tmpFile + "/transFile/transformFile"
									+ TalendDate.getDate("yyyyMMddHHmmss")
									+ ".xml");

					globalMap.put(
							"curRaw",
							context.tmpFile + "/rawFile/rawFile"
									+ TalendDate.getDate("yyyyMMddHHmmss")
									+ ".xml");

					/**
					 * [tJava_1 begin ] stop
					 */

					/**
					 * [tJava_1 main ] start
					 */

					currentComponent = "tJava_1";

					tos_count_tJava_1++;

					/**
					 * [tJava_1 main ] stop
					 */

					/**
					 * [tJava_1 end ] start
					 */

					currentComponent = "tJava_1";

					ok_Hash.put("tJava_1", true);
					end_Hash.put("tJava_1", System.currentTimeMillis());

					if (context.tryCount == 0) {

						tDie_2Process(globalMap);
					}

					/**
					 * [tJava_1 end ] stop
					 */

					NB_ITERATE_tHttpRequest_1++;

					/**
					 * [tHttpRequest_1 begin ] start
					 */

					ok_Hash.put("tHttpRequest_1", false);
					start_Hash
							.put("tHttpRequest_1", System.currentTimeMillis());

					currentComponent = "tHttpRequest_1";

					int tos_count_tHttpRequest_1 = 0;

					class BytesLimit65535_tHttpRequest_1 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tHttpRequest_1().limitLog4jByte();

					/**
					 * [tHttpRequest_1 begin ] stop
					 */

					/**
					 * [tHttpRequest_1 main ] start
					 */

					currentComponent = "tHttpRequest_1";

					int connectTimeOut_tHttpRequest_1 = Integer.valueOf(30) * 1000;
					int readTimeOut_tHttpRequest_1 = Integer.valueOf(0) * 1000;

					java.net.URL url_tHttpRequest_1 = new java.net.URL(
							context.realUrl);

					java.net.HttpURLConnection urlConn_tHttpRequest_1 = (java.net.HttpURLConnection) url_tHttpRequest_1
							.openConnection();
					urlConn_tHttpRequest_1.setRequestMethod("GET");
					urlConn_tHttpRequest_1.setDoOutput(true);
					urlConn_tHttpRequest_1.setDoInput(true);
					urlConn_tHttpRequest_1.setUseCaches(false);

					boolean connected_tHttpRequest_1 = false;
					int responseCode_tHttpRequest_1 = 0;
					String responseMessage_tHttpRequest_1 = null;
					globalMap.put("tHttpRequest_1_CONNECTED", false);
					try {
						urlConn_tHttpRequest_1.connect();
						connected_tHttpRequest_1 = true;
						globalMap.put("tHttpRequest_1_CONNECTED", true);

						byte[] buffer_tHttpRequest_1 = new byte[1024];
						int bos_buffer_tHttpRequest_1 = 0;

						responseCode_tHttpRequest_1 = urlConn_tHttpRequest_1
								.getResponseCode();
						globalMap.put("tHttpRequest_1_RESPONSE_CODE",
								responseCode_tHttpRequest_1);
						responseMessage_tHttpRequest_1 = urlConn_tHttpRequest_1
								.getResponseMessage();

						if (java.net.HttpURLConnection.HTTP_OK == responseCode_tHttpRequest_1) {
							java.io.InputStream bis_tHttpRequest_1 = new java.io.BufferedInputStream(
									urlConn_tHttpRequest_1.getInputStream());
							java.io.File bosParent_tHttpRequest_1 = new java.io.File(
									((String) globalMap.get("curRaw")))
									.getParentFile();
							if (bosParent_tHttpRequest_1 != null
									&& bosParent_tHttpRequest_1.exists() == false) {
								bosParent_tHttpRequest_1.mkdirs();
							}
							java.io.OutputStream bosContent_tHttpRequest_1 = new java.io.BufferedOutputStream(
									new java.io.FileOutputStream(
											((String) globalMap.get("curRaw"))));
							while ((bos_buffer_tHttpRequest_1 = bis_tHttpRequest_1
									.read(buffer_tHttpRequest_1)) != -1) {
								bosContent_tHttpRequest_1.write(
										buffer_tHttpRequest_1, 0,
										bos_buffer_tHttpRequest_1);
							}
							bosContent_tHttpRequest_1.flush();
							bosContent_tHttpRequest_1.close();
							bis_tHttpRequest_1.close();
						} else {
							System.err.println(responseCode_tHttpRequest_1
									+ " " + responseMessage_tHttpRequest_1);
							globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
									"Request failed:"
											+ responseCode_tHttpRequest_1 + " "
											+ responseMessage_tHttpRequest_1);
						}

						urlConn_tHttpRequest_1.disconnect();
					} catch (Exception e) {
						System.err.println(e.getMessage());
						globalMap.put("tHttpRequest_1" + "_ERROR_MESSAGE",
								e.getMessage());
					}

					tos_count_tHttpRequest_1++;

					/**
					 * [tHttpRequest_1 main ] stop
					 */

					/**
					 * [tHttpRequest_1 end ] start
					 */

					currentComponent = "tHttpRequest_1";

					ok_Hash.put("tHttpRequest_1", true);
					end_Hash.put("tHttpRequest_1", System.currentTimeMillis());

					tFixedFlowInput_3Process(globalMap);
					tFileInputRaw_2Process(globalMap);

					/**
					 * [tHttpRequest_1 end ] stop
					 */

					NB_ITERATE_tJava_2++;

					/**
					 * [tJava_2 begin ] start
					 */

					ok_Hash.put("tJava_2", false);
					start_Hash.put("tJava_2", System.currentTimeMillis());

					currentComponent = "tJava_2";

					int tos_count_tJava_2 = 0;

					class BytesLimit65535_tJava_2 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tJava_2().limitLog4jByte();

					String foo = "bar";

					/**
					 * [tJava_2 begin ] stop
					 */

					/**
					 * [tJava_2 main ] start
					 */

					currentComponent = "tJava_2";

					tos_count_tJava_2++;

					/**
					 * [tJava_2 main ] stop
					 */

					/**
					 * [tJava_2 end ] start
					 */

					currentComponent = "tJava_2";

					ok_Hash.put("tJava_2", true);
					end_Hash.put("tJava_2", System.currentTimeMillis());

					tFixedFlowInput_1Process(globalMap);

					/**
					 * [tJava_2 end ] stop
					 */

					NB_ITERATE_tJava_3++;

					/**
					 * [tJava_3 begin ] start
					 */

					ok_Hash.put("tJava_3", false);
					start_Hash.put("tJava_3", System.currentTimeMillis());

					currentComponent = "tJava_3";

					int tos_count_tJava_3 = 0;

					class BytesLimit65535_tJava_3 {
						public void limitLog4jByte() throws Exception {

						}
					}

					new BytesLimit65535_tJava_3().limitLog4jByte();

					// System.out.println("OK");
					// System.out.println(context.masterFrom + " - " +
					// context.masterTo + " - " + context.untilMaster);

					/*
					 * Date untilPlusOne =
					 * TalendDate.addDate(context.until,1,"yyyy");
					 * System.out.println(untilPlusOne);
					 * System.out.println(context.to);
					 * System.out.println((untilPlusOne).compareTo(context.to));
					 * System.out.println((untilPlusOne).compareTo(context.to)
					 * <= 0);
					 */

					/**
					 * [tJava_3 begin ] stop
					 */

					/**
					 * [tJava_3 main ] start
					 */

					currentComponent = "tJava_3";

					tos_count_tJava_3++;

					/**
					 * [tJava_3 main ] stop
					 */

					/**
					 * [tJava_3 end ] start
					 */

					currentComponent = "tJava_3";

					ok_Hash.put("tJava_3", true);
					end_Hash.put("tJava_3", System.currentTimeMillis());

					if (// ((Integer)globalMap.get("tExtractXMLField_1_NB_LINE"))
						// < 200

					(((String) globalMap.get("_myToken")) == null)

					) {

						tJava_4Process(globalMap);
					}

					/**
					 * [tJava_3 end ] stop
					 */

					/**
					 * [tInfiniteLoop_1 end ] start
					 */

					currentComponent = "tInfiniteLoop_1";

					Thread.sleep(context.loopTime * 1000);
				}

				ok_Hash.put("tInfiniteLoop_1", true);
				end_Hash.put("tInfiniteLoop_1", System.currentTimeMillis());

				/**
				 * [tInfiniteLoop_1 end ] stop
				 */
			}// end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil
						.addLog("CHECKPOINT",
								"CONNECTION:SUBJOB_OK:tInfiniteLoop_1:OnSubjobOk",
								"", Thread.currentThread().getId() + "", "",
								"", "", "", "");
			}

			tMysqlClose_1Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tInfiniteLoop_1 finally ] start
				 */

				currentComponent = "tInfiniteLoop_1";

				/**
				 * [tInfiniteLoop_1 finally ] stop
				 */

				/**
				 * [tJava_1 finally ] start
				 */

				currentComponent = "tJava_1";

				/**
				 * [tJava_1 finally ] stop
				 */

				/**
				 * [tHttpRequest_1 finally ] start
				 */

				currentComponent = "tHttpRequest_1";

				/**
				 * [tHttpRequest_1 finally ] stop
				 */

				/**
				 * [tJava_2 finally ] start
				 */

				currentComponent = "tJava_2";

				/**
				 * [tJava_2 finally ] stop
				 */

				/**
				 * [tJava_3 finally ] start
				 */

				currentComponent = "tJava_3";

				/**
				 * [tJava_3 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tInfiniteLoop_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_2Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_2 begin ] start
				 */

				ok_Hash.put("tDie_2", false);
				start_Hash.put("tDie_2", System.currentTimeMillis());

				currentComponent = "tDie_2";

				int tos_count_tDie_2 = 0;

				class BytesLimit65535_tDie_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDie_2().limitLog4jByte();

				/**
				 * [tDie_2 begin ] stop
				 */

				/**
				 * [tDie_2 main ] start
				 */

				currentComponent = "tDie_2";

				globalMap.put("tDie_2_DIE_PRIORITY", 5);
				System.err.println(context.MSG_JOB_ERR);

				globalMap.put("tDie_2_DIE_MESSAGE", context.MSG_JOB_ERR);
				globalMap.put("tDie_2_DIE_MESSAGES", context.MSG_JOB_ERR);
				currentComponent = "tDie_2";
				status = "failure";
				errorCode = new Integer(3);
				globalMap.put("tDie_2_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_2++;

				/**
				 * [tDie_2 main ] stop
				 */

				/**
				 * [tDie_2 end ] start
				 */

				currentComponent = "tDie_2";

				ok_Hash.put("tDie_2", true);
				end_Hash.put("tDie_2", System.currentTimeMillis());

				/**
				 * [tDie_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_2 finally ] start
				 */

				currentComponent = "tDie_2";

				/**
				 * [tDie_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}

	public static class row12Struct implements
			routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String url;

		public String getUrl() {
			return this.url;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.url = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.url, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("url=" + url);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row12Struct row12 = new row12Struct();

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				int tos_count_tFileOutputDelimited_1 = 0;

				class BytesLimit65535_tFileOutputDelimited_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputDelimited_1().limitLog4jByte();

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						context.tmpFile + "/urlList/list.txt"))
						.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
							.substring(0, fileName_tFileOutputDelimited_1
									.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(0, fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1
										.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(
						fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);
				if (filetFileOutputDelimited_1.exists()) {
					isFileGenerated_tFileOutputDelimited_1 = false;
				}
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitEvery_tFileOutputDelimited_1 = 1000;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /**
				 * Start field
				 * tFileOutputDelimited_1:FIELDSEPARATOR
				 */
				"\r\n"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
				 * Start
				 * field tFileOutputDelimited_1:ROWSEPARATOR
				 */
				"\r\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null
						&& directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(
							directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				outtFileOutputDelimited_1 = new java.io.BufferedWriter(
						new java.io.OutputStreamWriter(
								new java.io.FileOutputStream(
										fileName_tFileOutputDelimited_1, true),
								"ISO-8859-15"));

				resourceMap.put("out_tFileOutputDelimited_1",
						outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1",
						nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_3 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_3", false);
				start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_3";

				int tos_count_tFixedFlowInput_3 = 0;

				class BytesLimit65535_tFixedFlowInput_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_3().limitLog4jByte();

				for (int i_tFixedFlowInput_3 = 0; i_tFixedFlowInput_3 < 1; i_tFixedFlowInput_3++) {

					row12.url = context.realUrl;

					/**
					 * [tFixedFlowInput_3 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_3 main ] start
					 */

					currentComponent = "tFixedFlowInput_3";

					tos_count_tFixedFlowInput_3++;

					/**
					 * [tFixedFlowInput_3 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
					if (row12.url != null) {
						sb_tFileOutputDelimited_1.append(row12.url);
					}
					sb_tFileOutputDelimited_1
							.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1",
							nb_line_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1
							.toString());

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tFixedFlowInput_3 end ] start
					 */

					currentComponent = "tFixedFlowInput_3";

				}
				globalMap.put("tFixedFlowInput_3_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_3", true);
				end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE",
						nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",
						fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1",
						System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_3 finally ] start
				 */

				currentComponent = "tFixedFlowInput_3";

				/**
				 * [tFixedFlowInput_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements
			routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class FAILLINEStruct implements
			routines.system.IPersistableRow<FAILLINEStruct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(FAILLINEStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OKLINEStruct implements
			routines.system.IPersistableRow<OKLINEStruct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OKLINEStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String ResponseContent;

		public String getResponseContent() {
			return this.ResponseContent;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.ResponseContent = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ResponseContent, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ResponseContent=" + ResponseContent);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements
			routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputRaw_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputRaw_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row10Struct row10 = new row10Struct();
				FAILLINEStruct FAILLINE = new FAILLINEStruct();
				OKLINEStruct OKLINE = new OKLINEStruct();
				OKLINEStruct row5 = OKLINE;
				row1Struct row1 = new row1Struct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tJava_11 begin ] start
				 */

				ok_Hash.put("tJava_11", false);
				start_Hash.put("tJava_11", System.currentTimeMillis());

				currentComponent = "tJava_11";

				int tos_count_tJava_11 = 0;

				class BytesLimit65535_tJava_11 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_11().limitLog4jByte();

				context.tryCount = context.tryCount - 1;

				/**
				 * [tJava_11 begin ] stop
				 */

				/**
				 * [tXSLT_1 begin ] start
				 */

				ok_Hash.put("tXSLT_1", false);
				start_Hash.put("tXSLT_1", System.currentTimeMillis());

				currentComponent = "tXSLT_1";

				int tos_count_tXSLT_1 = 0;

				class BytesLimit65535_tXSLT_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tXSLT_1().limitLog4jByte();

				/**
				 * [tXSLT_1 begin ] stop
				 */

				/**
				 * [tFileOutputRaw_1 begin ] start
				 */

				ok_Hash.put("tFileOutputRaw_1", false);
				start_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

				currentComponent = "tFileOutputRaw_1";

				int tos_count_tFileOutputRaw_1 = 0;

				class BytesLimit65535_tFileOutputRaw_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileOutputRaw_1().limitLog4jByte();

				String fileName_tFileOutputRaw_1 = ((String) globalMap
						.get("curF"));

				/**
				 * [tFileOutputRaw_1 begin ] stop
				 */

				/**
				 * [tFlowToIterate_1 begin ] start
				 */

				ok_Hash.put("tFlowToIterate_1", false);
				start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				currentComponent = "tFlowToIterate_1";

				int tos_count_tFlowToIterate_1 = 0;

				class BytesLimit65535_tFlowToIterate_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFlowToIterate_1().limitLog4jByte();

				int nb_line_tFlowToIterate_1 = 0;
				int counter_tFlowToIterate_1 = 0;

				/**
				 * [tFlowToIterate_1 begin ] stop
				 */

				/**
				 * [tJavaRow_3 begin ] start
				 */

				ok_Hash.put("tJavaRow_3", false);
				start_Hash.put("tJavaRow_3", System.currentTimeMillis());

				currentComponent = "tJavaRow_3";

				int tos_count_tJavaRow_3 = 0;

				class BytesLimit65535_tJavaRow_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_3().limitLog4jByte();

				int nb_line_tJavaRow_3 = 0;

				/**
				 * [tJavaRow_3 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				int tos_count_tMap_5 = 0;

				class BytesLimit65535_tMap_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_5().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				FAILLINEStruct FAILLINE_tmp = new FAILLINEStruct();
				OKLINEStruct OKLINE_tmp = new OKLINEStruct();
				row1Struct row1_tmp = new row1Struct();
				// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tFileInputRaw_2 begin ] start
				 */

				ok_Hash.put("tFileInputRaw_2", false);
				start_Hash.put("tFileInputRaw_2", System.currentTimeMillis());

				currentComponent = "tFileInputRaw_2";

				int tos_count_tFileInputRaw_2 = 0;

				class BytesLimit65535_tFileInputRaw_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputRaw_2().limitLog4jByte();

				try {
					String content_tFileInputRaw_2 = org.apache.commons.io.FileUtils
							.readFileToString(new java.io.File(
									((String) globalMap.get("curRaw"))),
									"UTF-8");
					row10.content = content_tFileInputRaw_2;
					globalMap.put("tFileInputRaw_2_FILENAME_PATH",
							((String) globalMap.get("curRaw")));
				} catch (java.io.IOException e_tFileInputRaw_2) {

					System.err.println(e_tFileInputRaw_2);
				}

				/**
				 * [tFileInputRaw_2 begin ] stop
				 */

				/**
				 * [tFileInputRaw_2 main ] start
				 */

				currentComponent = "tFileInputRaw_2";

				tos_count_tFileInputRaw_2++;

				/**
				 * [tFileInputRaw_2 main ] stop
				 */

				/**
				 * [tMap_5 main ] start
				 */

				currentComponent = "tMap_5";

				boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

				// ###############################
				// # Input tables (lookups)
				boolean rejectedInnerJoin_tMap_5 = false;
				boolean mainRowRejected_tMap_5 = false;

				// ###############################
				{ // start of Var scope

					// ###############################
					// # Vars tables

					Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
					// ###############################
					// # Output tables

					FAILLINE = null;
					OKLINE = null;
					row1 = null;

					// # Output table : 'FAILLINE'
					// # Filter conditions
					if (

					!(row10.content != null && !"".equals(row10.content))

					) {
						FAILLINE_tmp.content = (row10.content)
								.replaceAll(
										"<OAI-PMH xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns=\"http://www.openarchives.org/OAI/2.0/\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
										"<OAI-PMH>");
						FAILLINE = FAILLINE_tmp;
					} // closing filter/reject

					// # Output table : 'OKLINE'
					// # Filter conditions
					if (

					row10.content != null && !"".equals(row10.content)

					) {
						OKLINE_tmp.content = (row10.content)
								.replaceAll(
										"<OAI-PMH xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns=\"http://www.openarchives.org/OAI/2.0/\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">",
										"<OAI-PMH>");
						OKLINE = OKLINE_tmp;
					} // closing filter/reject

					// # Output table : 'row1'
					// # Filter conditions
					if (

					row10.content != null && !"".equals(row10.content)

					) {
						row1_tmp.ResponseContent = row10.content;
						row1 = row1_tmp;
					} // closing filter/reject
						// ###############################

				} // end of Var scope

				rejectedInnerJoin_tMap_5 = false;

				tos_count_tMap_5++;

				/**
				 * [tMap_5 main ] stop
				 */
				// Start of branch "FAILLINE"
				if (FAILLINE != null) {

					/**
					 * [tJava_11 main ] start
					 */

					currentComponent = "tJava_11";

					tos_count_tJava_11++;

					/**
					 * [tJava_11 main ] stop
					 */

				} // End of branch "FAILLINE"

				// Start of branch "OKLINE"
				if (OKLINE != null) {

					/**
					 * [tFileOutputRaw_1 main ] start
					 */

					currentComponent = "tFileOutputRaw_1";

					try {
						Object content_tFileOutputRaw_1 = OKLINE.content;

						if (content_tFileOutputRaw_1 != null) {
							java.io.File file_tFileOutputRaw_1 = new java.io.File(
									fileName_tFileOutputRaw_1);
							java.io.File parentFile_tFileOutputRaw_1 = file_tFileOutputRaw_1
									.getParentFile();
							if (parentFile_tFileOutputRaw_1 != null
									&& !parentFile_tFileOutputRaw_1.exists()) {
								parentFile_tFileOutputRaw_1.mkdirs();
							}
							if (content_tFileOutputRaw_1 instanceof String) {
								org.apache.commons.io.FileUtils
										.writeStringToFile(
												file_tFileOutputRaw_1,
												content_tFileOutputRaw_1
														.toString(), "UTF-8");
							} else if (content_tFileOutputRaw_1 instanceof byte[]) {
								org.apache.commons.io.FileUtils
										.writeByteArrayToFile(
												file_tFileOutputRaw_1,
												(byte[]) content_tFileOutputRaw_1);
							} else if (content_tFileOutputRaw_1 instanceof java.io.InputStream) {
								java.io.InputStream fis_tFileOutputRaw_1 = (java.io.InputStream) content_tFileOutputRaw_1;
								java.io.FileOutputStream fos_tFileOutputRaw_1 = new java.io.FileOutputStream(
										file_tFileOutputRaw_1);
								byte[] buffer_tFileOutputRaw_1 = new byte[65536];
								int nb_tFileOutputRaw_1 = 0;
								while (true) {
									nb_tFileOutputRaw_1 = fis_tFileOutputRaw_1
											.read(buffer_tFileOutputRaw_1);
									if (nb_tFileOutputRaw_1 == -1) {
										break;
									}
									fos_tFileOutputRaw_1.write(
											buffer_tFileOutputRaw_1, 0,
											nb_tFileOutputRaw_1);
								}
								fis_tFileOutputRaw_1.close();
								fos_tFileOutputRaw_1.close();
							}
						}
					} catch (java.lang.Exception e_tFileOutputRaw_1) {
						System.err.println(e_tFileOutputRaw_1);
					}

					row5 = OKLINE;

					tos_count_tFileOutputRaw_1++;

					/**
					 * [tFileOutputRaw_1 main ] stop
					 */

					/**
					 * [tXSLT_1 main ] start
					 */

					currentComponent = "tXSLT_1";

					java.io.File xsltFiletXSLT_1 = new java.io.File(
							context.xslFile);
					javax.xml.transform.stream.StreamSource styleSourcetXSLT_1 = new javax.xml.transform.stream.StreamSource(
							xsltFiletXSLT_1);
					javax.xml.transform.Transformer ttXSLT_1 = javax.xml.transform.TransformerFactory
							.newInstance(
									net.sf.saxon.TransformerFactoryImpl.class
											.getName(),
									null).newTransformer(styleSourcetXSLT_1);

					javax.xml.transform.stream.StreamSource xmlSourcetXSLT_1 = new javax.xml.transform.stream.StreamSource(
							new java.io.File(((String) globalMap.get("curF"))));
					ttXSLT_1.transform(
							xmlSourcetXSLT_1,
							new javax.xml.transform.stream.StreamResult(
									new java.io.File(((String) globalMap
											.get("curF")))));

					if ((((String) globalMap.get("curF"))).indexOf("/") != -1) {
						globalMap.put("tXSLT_1_OUTPUT_FILEPATH",
								(((String) globalMap.get("curF"))).substring(0,
										(((String) globalMap.get("curF")))
												.lastIndexOf("/")));
						globalMap
								.put("tXSLT_1_OUTPUT_FILENAME",
										(((String) globalMap.get("curF")))
												.substring((((String) globalMap
														.get("curF")))
														.lastIndexOf("/") + 1));
					} else {
						globalMap.put("tXSLT_1_OUTPUT_FILEPATH",
								((String) globalMap.get("curF")));
						globalMap.put("tXSLT_1_OUTPUT_FILENAME",
								((String) globalMap.get("curF")));
					}

					tos_count_tXSLT_1++;

					/**
					 * [tXSLT_1 main ] stop
					 */

				} // End of branch "OKLINE"

				// Start of branch "row1"
				if (row1 != null) {

					/**
					 * [tJavaRow_3 main ] start
					 */

					currentComponent = "tJavaRow_3";

					// Code generated according to input schema and output
					// schema
					String tempStr = row1.ResponseContent;

					if (tempStr.contains("</resumptionToken>")) {
						tempStr = tempStr.substring(
								tempStr.indexOf("<resumptionToken "),
								tempStr.indexOf("</resumptionToken>"));
						tempStr = tempStr.substring(tempStr.indexOf(">") + 1);
					} else {
						tempStr = null;
					}
					row2.ResponseContent = tempStr;

					nb_line_tJavaRow_3++;

					tos_count_tJavaRow_3++;

					/**
					 * [tJavaRow_3 main ] stop
					 */

					/**
					 * [tFlowToIterate_1 main ] start
					 */

					currentComponent = "tFlowToIterate_1";

					globalMap.put("_myToken", row2.ResponseContent);
					nb_line_tFlowToIterate_1++;
					counter_tFlowToIterate_1++;
					globalMap.put("tFlowToIterate_1_CURRENT_ITERATION",
							counter_tFlowToIterate_1);

					tos_count_tFlowToIterate_1++;

					/**
					 * [tFlowToIterate_1 main ] stop
					 */

				} // End of branch "row1"

				/**
				 * [tFileInputRaw_2 end ] start
				 */

				currentComponent = "tFileInputRaw_2";

				ok_Hash.put("tFileInputRaw_2", true);
				end_Hash.put("tFileInputRaw_2", System.currentTimeMillis());

				/**
				 * [tFileInputRaw_2 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tJava_11 end ] start
				 */

				currentComponent = "tJava_11";

				ok_Hash.put("tJava_11", true);
				end_Hash.put("tJava_11", System.currentTimeMillis());

				/**
				 * [tJava_11 end ] stop
				 */

				/**
				 * [tFileOutputRaw_1 end ] start
				 */

				currentComponent = "tFileOutputRaw_1";

				globalMap.put("tFileOutputRaw_1_FILENAME_PATH",
						fileName_tFileOutputRaw_1);

				ok_Hash.put("tFileOutputRaw_1", true);
				end_Hash.put("tFileOutputRaw_1", System.currentTimeMillis());

				/**
				 * [tFileOutputRaw_1 end ] stop
				 */

				/**
				 * [tXSLT_1 end ] start
				 */

				currentComponent = "tXSLT_1";

				ok_Hash.put("tXSLT_1", true);
				end_Hash.put("tXSLT_1", System.currentTimeMillis());

				tJava_9Process(globalMap);
				tFileInputRaw_3Process(globalMap);

				/**
				 * [tXSLT_1 end ] stop
				 */

				/**
				 * [tJavaRow_3 end ] start
				 */

				currentComponent = "tJavaRow_3";

				globalMap.put("tJavaRow_3_NB_LINE", nb_line_tJavaRow_3);

				ok_Hash.put("tJavaRow_3", true);
				end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				/**
				 * [tJavaRow_3 end ] stop
				 */

				/**
				 * [tFlowToIterate_1 end ] start
				 */

				currentComponent = "tFlowToIterate_1";

				globalMap.put("tFlowToIterate_1_NB_LINE",
						nb_line_tFlowToIterate_1);

				ok_Hash.put("tFlowToIterate_1", true);
				end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());

				/**
				 * [tFlowToIterate_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputRaw_2 finally ] start
				 */

				currentComponent = "tFileInputRaw_2";

				/**
				 * [tFileInputRaw_2 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tJava_11 finally ] start
				 */

				currentComponent = "tJava_11";

				/**
				 * [tJava_11 finally ] stop
				 */

				/**
				 * [tFileOutputRaw_1 finally ] start
				 */

				currentComponent = "tFileOutputRaw_1";

				/**
				 * [tFileOutputRaw_1 finally ] stop
				 */

				/**
				 * [tXSLT_1 finally ] start
				 */

				currentComponent = "tXSLT_1";

				/**
				 * [tXSLT_1 finally ] stop
				 */

				/**
				 * [tJavaRow_3 finally ] start
				 */

				currentComponent = "tJavaRow_3";

				/**
				 * [tJavaRow_3 finally ] stop
				 */

				/**
				 * [tFlowToIterate_1 finally ] start
				 */

				currentComponent = "tFlowToIterate_1";

				/**
				 * [tFlowToIterate_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputRaw_2_SUBPROCESS_STATE", 1);
	}

	public void tJava_9Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_9 begin ] start
				 */

				ok_Hash.put("tJava_9", false);
				start_Hash.put("tJava_9", System.currentTimeMillis());

				currentComponent = "tJava_9";

				int tos_count_tJava_9 = 0;

				class BytesLimit65535_tJava_9 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_9().limitLog4jByte();

				context.tryCount = 3;

				/**
				 * [tJava_9 begin ] stop
				 */

				/**
				 * [tJava_9 main ] start
				 */

				currentComponent = "tJava_9";

				tos_count_tJava_9++;

				/**
				 * [tJava_9 main ] stop
				 */

				/**
				 * [tJava_9 end ] start
				 */

				currentComponent = "tJava_9";

				ok_Hash.put("tJava_9", true);
				end_Hash.put("tJava_9", System.currentTimeMillis());

				/**
				 * [tJava_9 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_9 finally ] start
				 */

				currentComponent = "tJava_9";

				/**
				 * [tJava_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}

	public static class row8Struct implements
			routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String SERIESTITLE;

		public String getSERIESTITLE() {
			return this.SERIESTITLE;
		}

		public String VOLUMETITLE;

		public String getVOLUMETITLE() {
			return this.VOLUMETITLE;
		}

		public String ALTERNATIVE;

		public String getALTERNATIVE() {
			return this.ALTERNATIVE;
		}

		public String VOLUME;

		public String getVOLUME() {
			return this.VOLUME;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DIGIPUBLISHER;

		public String getDIGIPUBLISHER() {
			return this.DIGIPUBLISHER;
		}

		public String PUBLICYEAR;

		public String getPUBLICYEAR() {
			return this.PUBLICYEAR;
		}

		public String NDLC;

		public String getNDLC() {
			return this.NDLC;
		}

		public String NDC;

		public String getNDC() {
			return this.NDC;
		}

		public String NDC8;

		public String getNDC8() {
			return this.NDC8;
		}

		public String NDC9;

		public String getNDC9() {
			return this.NDC9;
		}

		public String GHQSCAP;

		public String getGHQSCAP() {
			return this.GHQSCAP;
		}

		public String UDC;

		public String getUDC() {
			return this.UDC;
		}

		public String DDC;

		public String getDDC() {
			return this.DDC;
		}

		public String NDLSH;

		public String getNDLSH() {
			return this.NDLSH;
		}

		public String PAGERANGE;

		public String getPAGERANGE() {
			return this.PAGERANGE;
		}

		public String ABSTRACT1;

		public String getABSTRACT1() {
			return this.ABSTRACT1;
		}

		public String ABSTRACT2;

		public String getABSTRACT2() {
			return this.ABSTRACT2;
		}

		public String MATERIALTYPE;

		public String getMATERIALTYPE() {
			return this.MATERIALTYPE;
		}

		public Integer MATERIALID;

		public Integer getMATERIALID() {
			return this.MATERIALID;
		}

		public String IMTFORMAT;

		public String getIMTFORMAT() {
			return this.IMTFORMAT;
		}

		public String PUBLISHER;

		public String getPUBLISHER() {
			return this.PUBLISHER;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String ISOLANGUAGE;

		public String getISOLANGUAGE() {
			return this.ISOLANGUAGE;
		}

		public String EDITION;

		public String getEDITION() {
			return this.EDITION;
		}

		public String PUBNAME;

		public String getPUBNAME() {
			return this.PUBNAME;
		}

		public String PUBPLACECD;

		public String getPUBPLACECD() {
			return this.PUBPLACECD;
		}

		public String PUBPLACENAME;

		public String getPUBPLACENAME() {
			return this.PUBPLACENAME;
		}

		public String PUBVOLUME;

		public String getPUBVOLUME() {
			return this.PUBVOLUME;
		}

		public String PUBDATE;

		public String getPUBDATE() {
			return this.PUBDATE;
		}

		public String TABLECONTENTS;

		public String getTABLECONTENTS() {
			return this.TABLECONTENTS;
		}

		public String PARTTITLE;

		public String getPARTTITLE() {
			return this.PARTTITLE;
		}

		public String NUMBER;

		public String getNUMBER() {
			return this.NUMBER;
		}

		public String SPATIAL;

		public String getSPATIAL() {
			return this.SPATIAL;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String EXTENT;

		public String getEXTENT() {
			return this.EXTENT;
		}

		public String PRICE;

		public String getPRICE() {
			return this.PRICE;
		}

		public String SERIESCREATOR;

		public String getSERIESCREATOR() {
			return this.SERIESCREATOR;
		}

		public String JISX0402;

		public String getJISX0402() {
			return this.JISX0402;
		}

		public String NCNO;

		public String getNCNO() {
			return this.NCNO;
		}

		public String UTMNO;

		public String getUTMNO() {
			return this.UTMNO;
		}

		public String JPNO;

		public String getJPNO() {
			return this.JPNO;
		}

		public String ISBN;

		public String getISBN() {
			return this.ISBN;
		}

		public String ISSN;

		public String getISSN() {
			return this.ISSN;
		}

		public String ISSNL;

		public String getISSNL() {
			return this.ISSNL;
		}

		public String INCORRECTISSN;

		public String getINCORRECTISSN() {
			return this.INCORRECTISSN;
		}

		public String INCORRECTISSNL;

		public String getINCORRECTISSNL() {
			return this.INCORRECTISSNL;
		}

		public String ISBNSET;

		public String getISBNSET() {
			return this.ISBNSET;
		}

		public String BRNO;

		public String getBRNO() {
			return this.BRNO;
		}

		public String DOI;

		public String getDOI() {
			return this.DOI;
		}

		public String NDLBIDID;

		public String getNDLBIDID() {
			return this.NDLBIDID;
		}

		public String STANDARDNO;

		public String getSTANDARDNO() {
			return this.STANDARDNO;
		}

		public String TOHANMARCNO;

		public String getTOHANMARCNO() {
			return this.TOHANMARCNO;
		}

		public String USMARCNO;

		public String getUSMARCNO() {
			return this.USMARCNO;
		}

		public String NSMARCNO;

		public String getNSMARCNO() {
			return this.NSMARCNO;
		}

		public String UKMARCNO;

		public String getUKMARCNO() {
			return this.UKMARCNO;
		}

		public String RIS502;

		public String getRIS502() {
			return this.RIS502;
		}

		public String OCLCNO;

		public String getOCLCNO() {
			return this.OCLCNO;
		}

		public String RLINNO;

		public String getRLINNO() {
			return this.RLINNO;
		}

		public String KAKENHINO;

		public String getKAKENHINO() {
			return this.KAKENHINO;
		}

		public String TRNO;

		public String getTRNO() {
			return this.TRNO;
		}

		public String GPOBIBNO;

		public String getGPOBIBNO() {
			return this.GPOBIBNO;
		}

		public String NIIBIBNO;

		public String getNIIBIBNO() {
			return this.NIIBIBNO;
		}

		public String UNDS;

		public String getUNDS() {
			return this.UNDS;
		}

		public String UNSN;

		public String getUNSN() {
			return this.UNSN;
		}

		public String CHECKSUM;

		public String getCHECKSUM() {
			return this.CHECKSUM;
		}

		public String INSERTTIME;

		public String getINSERTTIME() {
			return this.INSERTTIME;
		}

		public java.util.Date CRTDATE;

		public java.util.Date getCRTDATE() {
			return this.CRTDATE;
		}

		public java.util.Date UPDDATETIME;

		public java.util.Date getUPDDATETIME() {
			return this.UPDDATETIME;
		}

		public String TITLETRANS;

		public String getTITLETRANS() {
			return this.TITLETRANS;
		}

		public String ALTERNATIVETRANS;

		public String getALTERNATIVETRANS() {
			return this.ALTERNATIVETRANS;
		}

		public String VOLUMETRANS;

		public String getVOLUMETRANS() {
			return this.VOLUMETRANS;
		}

		public String VOLUMETITLETRANS;

		public String getVOLUMETITLETRANS() {
			return this.VOLUMETITLETRANS;
		}

		public String SERIESTITLETRANS;

		public String getSERIESTITLETRANS() {
			return this.SERIESTITLETRANS;
		}

		public String PARTTITLETRANS;

		public String getPARTTITLETRANS() {
			return this.PARTTITLETRANS;
		}

		public String CREATORTRANS;

		public String getCREATORTRANS() {
			return this.CREATORTRANS;
		}

		public String DATEDIGITIZED;

		public String getDATEDIGITIZED() {
			return this.DATEDIGITIZED;
		}

		public String USCAR;

		public String getUSCAR() {
			return this.USCAR;
		}

		public String MCJ;

		public String getMCJ() {
			return this.MCJ;
		}

		public String NDLBIBID;

		public String getNDLBIBID() {
			return this.NDLBIBID;
		}

		public String NDLJP;

		public String getNDLJP() {
			return this.NDLJP;
		}

		public String TRCMARCNO;

		public String getTRCMARCNO() {
			return this.TRCMARCNO;
		}

		public String OPLMARCNO;

		public String getOPLMARCNO() {
			return this.OPLMARCNO;
		}

		public String KNMARCNO;

		public String getKNMARCNO() {
			return this.KNMARCNO;
		}

		public String CODEN;

		public String getCODEN() {
			return this.CODEN;
		}

		public String ISRN;

		public String getISRN() {
			return this.ISRN;
		}

		public String ISMN;

		public String getISMN() {
			return this.ISMN;
		}

		public String PBNO;

		public String getPBNO() {
			return this.PBNO;
		}

		public String PLNO;

		public String getPLNO() {
			return this.PLNO;
		}

		public String GPOCN;

		public String getGPOCN() {
			return this.GPOCN;
		}

		public String SUPTDOC;

		public String getSUPTDOC() {
			return this.SUPTDOC;
		}

		public String SICI;

		public String getSICI() {
			return this.SICI;
		}

		public String ICNO;

		public String getICNO() {
			return this.ICNO;
		}

		public String TEMPORAL;

		public String getTEMPORAL() {
			return this.TEMPORAL;
		}

		public String PERIOD;

		public String getPERIOD() {
			return this.PERIOD;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String URI;

		public String getURI() {
			return this.URI;
		}

		public String NDC10;

		public String getNDC10() {
			return this.NDC10;
		}

		public String PARTCREATOR;

		public String getPARTCREATOR() {
			return this.PARTCREATOR;
		}

		public String LCC;

		public String getLCC() {
			return this.LCC;
		}

		public String ErrorISBN;

		public String getErrorISBN() {
			return this.ErrorISBN;
		}

		public String ISSUE;

		public String getISSUE() {
			return this.ISSUE;
		}

		public String W3CDTF;

		public String getW3CDTF() {
			return this.W3CDTF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.TITLE = readString(dis);

					this.SERIESTITLE = readString(dis);

					this.VOLUMETITLE = readString(dis);

					this.ALTERNATIVE = readString(dis);

					this.VOLUME = readString(dis);

					this.CREATOR = readString(dis);

					this.DIGIPUBLISHER = readString(dis);

					this.PUBLICYEAR = readString(dis);

					this.NDLC = readString(dis);

					this.NDC = readString(dis);

					this.NDC8 = readString(dis);

					this.NDC9 = readString(dis);

					this.GHQSCAP = readString(dis);

					this.UDC = readString(dis);

					this.DDC = readString(dis);

					this.NDLSH = readString(dis);

					this.PAGERANGE = readString(dis);

					this.ABSTRACT1 = readString(dis);

					this.ABSTRACT2 = readString(dis);

					this.MATERIALTYPE = readString(dis);

					this.MATERIALID = readInteger(dis);

					this.IMTFORMAT = readString(dis);

					this.PUBLISHER = readString(dis);

					this.LANGUAGE = readString(dis);

					this.ISOLANGUAGE = readString(dis);

					this.EDITION = readString(dis);

					this.PUBNAME = readString(dis);

					this.PUBPLACECD = readString(dis);

					this.PUBPLACENAME = readString(dis);

					this.PUBVOLUME = readString(dis);

					this.PUBDATE = readString(dis);

					this.TABLECONTENTS = readString(dis);

					this.PARTTITLE = readString(dis);

					this.NUMBER = readString(dis);

					this.SPATIAL = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.EXTENT = readString(dis);

					this.PRICE = readString(dis);

					this.SERIESCREATOR = readString(dis);

					this.JISX0402 = readString(dis);

					this.NCNO = readString(dis);

					this.UTMNO = readString(dis);

					this.JPNO = readString(dis);

					this.ISBN = readString(dis);

					this.ISSN = readString(dis);

					this.ISSNL = readString(dis);

					this.INCORRECTISSN = readString(dis);

					this.INCORRECTISSNL = readString(dis);

					this.ISBNSET = readString(dis);

					this.BRNO = readString(dis);

					this.DOI = readString(dis);

					this.NDLBIDID = readString(dis);

					this.STANDARDNO = readString(dis);

					this.TOHANMARCNO = readString(dis);

					this.USMARCNO = readString(dis);

					this.NSMARCNO = readString(dis);

					this.UKMARCNO = readString(dis);

					this.RIS502 = readString(dis);

					this.OCLCNO = readString(dis);

					this.RLINNO = readString(dis);

					this.KAKENHINO = readString(dis);

					this.TRNO = readString(dis);

					this.GPOBIBNO = readString(dis);

					this.NIIBIBNO = readString(dis);

					this.UNDS = readString(dis);

					this.UNSN = readString(dis);

					this.CHECKSUM = readString(dis);

					this.INSERTTIME = readString(dis);

					this.CRTDATE = readDate(dis);

					this.UPDDATETIME = readDate(dis);

					this.TITLETRANS = readString(dis);

					this.ALTERNATIVETRANS = readString(dis);

					this.VOLUMETRANS = readString(dis);

					this.VOLUMETITLETRANS = readString(dis);

					this.SERIESTITLETRANS = readString(dis);

					this.PARTTITLETRANS = readString(dis);

					this.CREATORTRANS = readString(dis);

					this.DATEDIGITIZED = readString(dis);

					this.USCAR = readString(dis);

					this.MCJ = readString(dis);

					this.NDLBIBID = readString(dis);

					this.NDLJP = readString(dis);

					this.TRCMARCNO = readString(dis);

					this.OPLMARCNO = readString(dis);

					this.KNMARCNO = readString(dis);

					this.CODEN = readString(dis);

					this.ISRN = readString(dis);

					this.ISMN = readString(dis);

					this.PBNO = readString(dis);

					this.PLNO = readString(dis);

					this.GPOCN = readString(dis);

					this.SUPTDOC = readString(dis);

					this.SICI = readString(dis);

					this.ICNO = readString(dis);

					this.TEMPORAL = readString(dis);

					this.PERIOD = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.URI = readString(dis);

					this.NDC10 = readString(dis);

					this.PARTCREATOR = readString(dis);

					this.LCC = readString(dis);

					this.ErrorISBN = readString(dis);

					this.ISSUE = readString(dis);

					this.W3CDTF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.SERIESTITLE, dos);

				// String

				writeString(this.VOLUMETITLE, dos);

				// String

				writeString(this.ALTERNATIVE, dos);

				// String

				writeString(this.VOLUME, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DIGIPUBLISHER, dos);

				// String

				writeString(this.PUBLICYEAR, dos);

				// String

				writeString(this.NDLC, dos);

				// String

				writeString(this.NDC, dos);

				// String

				writeString(this.NDC8, dos);

				// String

				writeString(this.NDC9, dos);

				// String

				writeString(this.GHQSCAP, dos);

				// String

				writeString(this.UDC, dos);

				// String

				writeString(this.DDC, dos);

				// String

				writeString(this.NDLSH, dos);

				// String

				writeString(this.PAGERANGE, dos);

				// String

				writeString(this.ABSTRACT1, dos);

				// String

				writeString(this.ABSTRACT2, dos);

				// String

				writeString(this.MATERIALTYPE, dos);

				// Integer

				writeInteger(this.MATERIALID, dos);

				// String

				writeString(this.IMTFORMAT, dos);

				// String

				writeString(this.PUBLISHER, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.ISOLANGUAGE, dos);

				// String

				writeString(this.EDITION, dos);

				// String

				writeString(this.PUBNAME, dos);

				// String

				writeString(this.PUBPLACECD, dos);

				// String

				writeString(this.PUBPLACENAME, dos);

				// String

				writeString(this.PUBVOLUME, dos);

				// String

				writeString(this.PUBDATE, dos);

				// String

				writeString(this.TABLECONTENTS, dos);

				// String

				writeString(this.PARTTITLE, dos);

				// String

				writeString(this.NUMBER, dos);

				// String

				writeString(this.SPATIAL, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.EXTENT, dos);

				// String

				writeString(this.PRICE, dos);

				// String

				writeString(this.SERIESCREATOR, dos);

				// String

				writeString(this.JISX0402, dos);

				// String

				writeString(this.NCNO, dos);

				// String

				writeString(this.UTMNO, dos);

				// String

				writeString(this.JPNO, dos);

				// String

				writeString(this.ISBN, dos);

				// String

				writeString(this.ISSN, dos);

				// String

				writeString(this.ISSNL, dos);

				// String

				writeString(this.INCORRECTISSN, dos);

				// String

				writeString(this.INCORRECTISSNL, dos);

				// String

				writeString(this.ISBNSET, dos);

				// String

				writeString(this.BRNO, dos);

				// String

				writeString(this.DOI, dos);

				// String

				writeString(this.NDLBIDID, dos);

				// String

				writeString(this.STANDARDNO, dos);

				// String

				writeString(this.TOHANMARCNO, dos);

				// String

				writeString(this.USMARCNO, dos);

				// String

				writeString(this.NSMARCNO, dos);

				// String

				writeString(this.UKMARCNO, dos);

				// String

				writeString(this.RIS502, dos);

				// String

				writeString(this.OCLCNO, dos);

				// String

				writeString(this.RLINNO, dos);

				// String

				writeString(this.KAKENHINO, dos);

				// String

				writeString(this.TRNO, dos);

				// String

				writeString(this.GPOBIBNO, dos);

				// String

				writeString(this.NIIBIBNO, dos);

				// String

				writeString(this.UNDS, dos);

				// String

				writeString(this.UNSN, dos);

				// String

				writeString(this.CHECKSUM, dos);

				// String

				writeString(this.INSERTTIME, dos);

				// java.util.Date

				writeDate(this.CRTDATE, dos);

				// java.util.Date

				writeDate(this.UPDDATETIME, dos);

				// String

				writeString(this.TITLETRANS, dos);

				// String

				writeString(this.ALTERNATIVETRANS, dos);

				// String

				writeString(this.VOLUMETRANS, dos);

				// String

				writeString(this.VOLUMETITLETRANS, dos);

				// String

				writeString(this.SERIESTITLETRANS, dos);

				// String

				writeString(this.PARTTITLETRANS, dos);

				// String

				writeString(this.CREATORTRANS, dos);

				// String

				writeString(this.DATEDIGITIZED, dos);

				// String

				writeString(this.USCAR, dos);

				// String

				writeString(this.MCJ, dos);

				// String

				writeString(this.NDLBIBID, dos);

				// String

				writeString(this.NDLJP, dos);

				// String

				writeString(this.TRCMARCNO, dos);

				// String

				writeString(this.OPLMARCNO, dos);

				// String

				writeString(this.KNMARCNO, dos);

				// String

				writeString(this.CODEN, dos);

				// String

				writeString(this.ISRN, dos);

				// String

				writeString(this.ISMN, dos);

				// String

				writeString(this.PBNO, dos);

				// String

				writeString(this.PLNO, dos);

				// String

				writeString(this.GPOCN, dos);

				// String

				writeString(this.SUPTDOC, dos);

				// String

				writeString(this.SICI, dos);

				// String

				writeString(this.ICNO, dos);

				// String

				writeString(this.TEMPORAL, dos);

				// String

				writeString(this.PERIOD, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.URI, dos);

				// String

				writeString(this.NDC10, dos);

				// String

				writeString(this.PARTCREATOR, dos);

				// String

				writeString(this.LCC, dos);

				// String

				writeString(this.ErrorISBN, dos);

				// String

				writeString(this.ISSUE, dos);

				// String

				writeString(this.W3CDTF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TITLE=" + TITLE);
			sb.append(",SERIESTITLE=" + SERIESTITLE);
			sb.append(",VOLUMETITLE=" + VOLUMETITLE);
			sb.append(",ALTERNATIVE=" + ALTERNATIVE);
			sb.append(",VOLUME=" + VOLUME);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DIGIPUBLISHER=" + DIGIPUBLISHER);
			sb.append(",PUBLICYEAR=" + PUBLICYEAR);
			sb.append(",NDLC=" + NDLC);
			sb.append(",NDC=" + NDC);
			sb.append(",NDC8=" + NDC8);
			sb.append(",NDC9=" + NDC9);
			sb.append(",GHQSCAP=" + GHQSCAP);
			sb.append(",UDC=" + UDC);
			sb.append(",DDC=" + DDC);
			sb.append(",NDLSH=" + NDLSH);
			sb.append(",PAGERANGE=" + PAGERANGE);
			sb.append(",ABSTRACT1=" + ABSTRACT1);
			sb.append(",ABSTRACT2=" + ABSTRACT2);
			sb.append(",MATERIALTYPE=" + MATERIALTYPE);
			sb.append(",MATERIALID=" + String.valueOf(MATERIALID));
			sb.append(",IMTFORMAT=" + IMTFORMAT);
			sb.append(",PUBLISHER=" + PUBLISHER);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",ISOLANGUAGE=" + ISOLANGUAGE);
			sb.append(",EDITION=" + EDITION);
			sb.append(",PUBNAME=" + PUBNAME);
			sb.append(",PUBPLACECD=" + PUBPLACECD);
			sb.append(",PUBPLACENAME=" + PUBPLACENAME);
			sb.append(",PUBVOLUME=" + PUBVOLUME);
			sb.append(",PUBDATE=" + PUBDATE);
			sb.append(",TABLECONTENTS=" + TABLECONTENTS);
			sb.append(",PARTTITLE=" + PARTTITLE);
			sb.append(",NUMBER=" + NUMBER);
			sb.append(",SPATIAL=" + SPATIAL);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",EXTENT=" + EXTENT);
			sb.append(",PRICE=" + PRICE);
			sb.append(",SERIESCREATOR=" + SERIESCREATOR);
			sb.append(",JISX0402=" + JISX0402);
			sb.append(",NCNO=" + NCNO);
			sb.append(",UTMNO=" + UTMNO);
			sb.append(",JPNO=" + JPNO);
			sb.append(",ISBN=" + ISBN);
			sb.append(",ISSN=" + ISSN);
			sb.append(",ISSNL=" + ISSNL);
			sb.append(",INCORRECTISSN=" + INCORRECTISSN);
			sb.append(",INCORRECTISSNL=" + INCORRECTISSNL);
			sb.append(",ISBNSET=" + ISBNSET);
			sb.append(",BRNO=" + BRNO);
			sb.append(",DOI=" + DOI);
			sb.append(",NDLBIDID=" + NDLBIDID);
			sb.append(",STANDARDNO=" + STANDARDNO);
			sb.append(",TOHANMARCNO=" + TOHANMARCNO);
			sb.append(",USMARCNO=" + USMARCNO);
			sb.append(",NSMARCNO=" + NSMARCNO);
			sb.append(",UKMARCNO=" + UKMARCNO);
			sb.append(",RIS502=" + RIS502);
			sb.append(",OCLCNO=" + OCLCNO);
			sb.append(",RLINNO=" + RLINNO);
			sb.append(",KAKENHINO=" + KAKENHINO);
			sb.append(",TRNO=" + TRNO);
			sb.append(",GPOBIBNO=" + GPOBIBNO);
			sb.append(",NIIBIBNO=" + NIIBIBNO);
			sb.append(",UNDS=" + UNDS);
			sb.append(",UNSN=" + UNSN);
			sb.append(",CHECKSUM=" + CHECKSUM);
			sb.append(",INSERTTIME=" + INSERTTIME);
			sb.append(",CRTDATE=" + String.valueOf(CRTDATE));
			sb.append(",UPDDATETIME=" + String.valueOf(UPDDATETIME));
			sb.append(",TITLETRANS=" + TITLETRANS);
			sb.append(",ALTERNATIVETRANS=" + ALTERNATIVETRANS);
			sb.append(",VOLUMETRANS=" + VOLUMETRANS);
			sb.append(",VOLUMETITLETRANS=" + VOLUMETITLETRANS);
			sb.append(",SERIESTITLETRANS=" + SERIESTITLETRANS);
			sb.append(",PARTTITLETRANS=" + PARTTITLETRANS);
			sb.append(",CREATORTRANS=" + CREATORTRANS);
			sb.append(",DATEDIGITIZED=" + DATEDIGITIZED);
			sb.append(",USCAR=" + USCAR);
			sb.append(",MCJ=" + MCJ);
			sb.append(",NDLBIBID=" + NDLBIBID);
			sb.append(",NDLJP=" + NDLJP);
			sb.append(",TRCMARCNO=" + TRCMARCNO);
			sb.append(",OPLMARCNO=" + OPLMARCNO);
			sb.append(",KNMARCNO=" + KNMARCNO);
			sb.append(",CODEN=" + CODEN);
			sb.append(",ISRN=" + ISRN);
			sb.append(",ISMN=" + ISMN);
			sb.append(",PBNO=" + PBNO);
			sb.append(",PLNO=" + PLNO);
			sb.append(",GPOCN=" + GPOCN);
			sb.append(",SUPTDOC=" + SUPTDOC);
			sb.append(",SICI=" + SICI);
			sb.append(",ICNO=" + ICNO);
			sb.append(",TEMPORAL=" + TEMPORAL);
			sb.append(",PERIOD=" + PERIOD);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",URI=" + URI);
			sb.append(",NDC10=" + NDC10);
			sb.append(",PARTCREATOR=" + PARTCREATOR);
			sb.append(",LCC=" + LCC);
			sb.append(",ErrorISBN=" + ErrorISBN);
			sb.append(",ISSUE=" + ISSUE);
			sb.append(",W3CDTF=" + W3CDTF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class NDLDATAStruct implements
			routines.system.IPersistableRow<NDLDATAStruct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String SERIESTITLE;

		public String getSERIESTITLE() {
			return this.SERIESTITLE;
		}

		public String VOLUMETITLE;

		public String getVOLUMETITLE() {
			return this.VOLUMETITLE;
		}

		public String ALTERNATIVE;

		public String getALTERNATIVE() {
			return this.ALTERNATIVE;
		}

		public String VOLUME;

		public String getVOLUME() {
			return this.VOLUME;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DIGIPUBLISHER;

		public String getDIGIPUBLISHER() {
			return this.DIGIPUBLISHER;
		}

		public String PUBLICYEAR;

		public String getPUBLICYEAR() {
			return this.PUBLICYEAR;
		}

		public String NDLC;

		public String getNDLC() {
			return this.NDLC;
		}

		public String NDC;

		public String getNDC() {
			return this.NDC;
		}

		public String NDC8;

		public String getNDC8() {
			return this.NDC8;
		}

		public String NDC9;

		public String getNDC9() {
			return this.NDC9;
		}

		public String GHQSCAP;

		public String getGHQSCAP() {
			return this.GHQSCAP;
		}

		public String UDC;

		public String getUDC() {
			return this.UDC;
		}

		public String DDC;

		public String getDDC() {
			return this.DDC;
		}

		public String NDLSH;

		public String getNDLSH() {
			return this.NDLSH;
		}

		public String PAGERANGE;

		public String getPAGERANGE() {
			return this.PAGERANGE;
		}

		public String ABSTRACT1;

		public String getABSTRACT1() {
			return this.ABSTRACT1;
		}

		public String ABSTRACT2;

		public String getABSTRACT2() {
			return this.ABSTRACT2;
		}

		public String MATERIALTYPE;

		public String getMATERIALTYPE() {
			return this.MATERIALTYPE;
		}

		public Integer MATERIALID;

		public Integer getMATERIALID() {
			return this.MATERIALID;
		}

		public String IMTFORMAT;

		public String getIMTFORMAT() {
			return this.IMTFORMAT;
		}

		public String PUBLISHER;

		public String getPUBLISHER() {
			return this.PUBLISHER;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String ISOLANGUAGE;

		public String getISOLANGUAGE() {
			return this.ISOLANGUAGE;
		}

		public String EDITION;

		public String getEDITION() {
			return this.EDITION;
		}

		public String PUBNAME;

		public String getPUBNAME() {
			return this.PUBNAME;
		}

		public String PUBPLACECD;

		public String getPUBPLACECD() {
			return this.PUBPLACECD;
		}

		public String PUBPLACENAME;

		public String getPUBPLACENAME() {
			return this.PUBPLACENAME;
		}

		public String PUBVOLUME;

		public String getPUBVOLUME() {
			return this.PUBVOLUME;
		}

		public String PUBDATE;

		public String getPUBDATE() {
			return this.PUBDATE;
		}

		public String TABLECONTENTS;

		public String getTABLECONTENTS() {
			return this.TABLECONTENTS;
		}

		public String PARTTITLE;

		public String getPARTTITLE() {
			return this.PARTTITLE;
		}

		public String NUMBER;

		public String getNUMBER() {
			return this.NUMBER;
		}

		public String SPATIAL;

		public String getSPATIAL() {
			return this.SPATIAL;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String EXTENT;

		public String getEXTENT() {
			return this.EXTENT;
		}

		public String PRICE;

		public String getPRICE() {
			return this.PRICE;
		}

		public String SERIESCREATOR;

		public String getSERIESCREATOR() {
			return this.SERIESCREATOR;
		}

		public String JISX0402;

		public String getJISX0402() {
			return this.JISX0402;
		}

		public String NCNO;

		public String getNCNO() {
			return this.NCNO;
		}

		public String UTMNO;

		public String getUTMNO() {
			return this.UTMNO;
		}

		public String JPNO;

		public String getJPNO() {
			return this.JPNO;
		}

		public String ISBN;

		public String getISBN() {
			return this.ISBN;
		}

		public String ISSN;

		public String getISSN() {
			return this.ISSN;
		}

		public String ISSNL;

		public String getISSNL() {
			return this.ISSNL;
		}

		public String INCORRECTISSN;

		public String getINCORRECTISSN() {
			return this.INCORRECTISSN;
		}

		public String INCORRECTISSNL;

		public String getINCORRECTISSNL() {
			return this.INCORRECTISSNL;
		}

		public String ISBNSET;

		public String getISBNSET() {
			return this.ISBNSET;
		}

		public String BRNO;

		public String getBRNO() {
			return this.BRNO;
		}

		public String DOI;

		public String getDOI() {
			return this.DOI;
		}

		public String NDLBIDID;

		public String getNDLBIDID() {
			return this.NDLBIDID;
		}

		public String STANDARDNO;

		public String getSTANDARDNO() {
			return this.STANDARDNO;
		}

		public String TOHANMARCNO;

		public String getTOHANMARCNO() {
			return this.TOHANMARCNO;
		}

		public String USMARCNO;

		public String getUSMARCNO() {
			return this.USMARCNO;
		}

		public String NSMARCNO;

		public String getNSMARCNO() {
			return this.NSMARCNO;
		}

		public String UKMARCNO;

		public String getUKMARCNO() {
			return this.UKMARCNO;
		}

		public String RIS502;

		public String getRIS502() {
			return this.RIS502;
		}

		public String OCLCNO;

		public String getOCLCNO() {
			return this.OCLCNO;
		}

		public String RLINNO;

		public String getRLINNO() {
			return this.RLINNO;
		}

		public String KAKENHINO;

		public String getKAKENHINO() {
			return this.KAKENHINO;
		}

		public String TRNO;

		public String getTRNO() {
			return this.TRNO;
		}

		public String GPOBIBNO;

		public String getGPOBIBNO() {
			return this.GPOBIBNO;
		}

		public String NIIBIBNO;

		public String getNIIBIBNO() {
			return this.NIIBIBNO;
		}

		public String UNDS;

		public String getUNDS() {
			return this.UNDS;
		}

		public String UNSN;

		public String getUNSN() {
			return this.UNSN;
		}

		public String CHECKSUM;

		public String getCHECKSUM() {
			return this.CHECKSUM;
		}

		public String INSERTTIME;

		public String getINSERTTIME() {
			return this.INSERTTIME;
		}

		public String CODE;

		public String getCODE() {
			return this.CODE;
		}

		public String CODE2;

		public String getCODE2() {
			return this.CODE2;
		}

		public String CODE3;

		public String getCODE3() {
			return this.CODE3;
		}

		public java.util.Date CRTDATE;

		public java.util.Date getCRTDATE() {
			return this.CRTDATE;
		}

		public java.util.Date UPDDATETIME;

		public java.util.Date getUPDDATETIME() {
			return this.UPDDATETIME;
		}

		public String TITLETRANS;

		public String getTITLETRANS() {
			return this.TITLETRANS;
		}

		public String ALTERNATIVETRANS;

		public String getALTERNATIVETRANS() {
			return this.ALTERNATIVETRANS;
		}

		public String VOLUMETRANS;

		public String getVOLUMETRANS() {
			return this.VOLUMETRANS;
		}

		public String VOLUMETITLETRANS;

		public String getVOLUMETITLETRANS() {
			return this.VOLUMETITLETRANS;
		}

		public String SERIESTITLETRANS;

		public String getSERIESTITLETRANS() {
			return this.SERIESTITLETRANS;
		}

		public String PARTTITLETRANS;

		public String getPARTTITLETRANS() {
			return this.PARTTITLETRANS;
		}

		public String CREATORTRANS;

		public String getCREATORTRANS() {
			return this.CREATORTRANS;
		}

		public String DATEDIGITIZED;

		public String getDATEDIGITIZED() {
			return this.DATEDIGITIZED;
		}

		public String USCAR;

		public String getUSCAR() {
			return this.USCAR;
		}

		public String MCJ;

		public String getMCJ() {
			return this.MCJ;
		}

		public String NDLBIBID;

		public String getNDLBIBID() {
			return this.NDLBIBID;
		}

		public String NDLJP;

		public String getNDLJP() {
			return this.NDLJP;
		}

		public String TRCMARCNO;

		public String getTRCMARCNO() {
			return this.TRCMARCNO;
		}

		public String OPLMARCNO;

		public String getOPLMARCNO() {
			return this.OPLMARCNO;
		}

		public String KNMARCNO;

		public String getKNMARCNO() {
			return this.KNMARCNO;
		}

		public String CODEN;

		public String getCODEN() {
			return this.CODEN;
		}

		public String ISRN;

		public String getISRN() {
			return this.ISRN;
		}

		public String ISMN;

		public String getISMN() {
			return this.ISMN;
		}

		public String PBNO;

		public String getPBNO() {
			return this.PBNO;
		}

		public String PLNO;

		public String getPLNO() {
			return this.PLNO;
		}

		public String GPOCN;

		public String getGPOCN() {
			return this.GPOCN;
		}

		public String SUPTDOC;

		public String getSUPTDOC() {
			return this.SUPTDOC;
		}

		public String SICI;

		public String getSICI() {
			return this.SICI;
		}

		public String ICNO;

		public String getICNO() {
			return this.ICNO;
		}

		public String TEMPORAL;

		public String getTEMPORAL() {
			return this.TEMPORAL;
		}

		public String PERIOD;

		public String getPERIOD() {
			return this.PERIOD;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String URI;

		public String getURI() {
			return this.URI;
		}

		public String NDC10;

		public String getNDC10() {
			return this.NDC10;
		}

		public String PARTCREATOR;

		public String getPARTCREATOR() {
			return this.PARTCREATOR;
		}

		public String LCC;

		public String getLCC() {
			return this.LCC;
		}

		public String ErrorISBN;

		public String getErrorISBN() {
			return this.ErrorISBN;
		}

		public String ISSUE;

		public String getISSUE() {
			return this.ISSUE;
		}

		public String W3CDTF;

		public String getW3CDTF() {
			return this.W3CDTF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.TITLE = readString(dis);

					this.SERIESTITLE = readString(dis);

					this.VOLUMETITLE = readString(dis);

					this.ALTERNATIVE = readString(dis);

					this.VOLUME = readString(dis);

					this.CREATOR = readString(dis);

					this.DIGIPUBLISHER = readString(dis);

					this.PUBLICYEAR = readString(dis);

					this.NDLC = readString(dis);

					this.NDC = readString(dis);

					this.NDC8 = readString(dis);

					this.NDC9 = readString(dis);

					this.GHQSCAP = readString(dis);

					this.UDC = readString(dis);

					this.DDC = readString(dis);

					this.NDLSH = readString(dis);

					this.PAGERANGE = readString(dis);

					this.ABSTRACT1 = readString(dis);

					this.ABSTRACT2 = readString(dis);

					this.MATERIALTYPE = readString(dis);

					this.MATERIALID = readInteger(dis);

					this.IMTFORMAT = readString(dis);

					this.PUBLISHER = readString(dis);

					this.LANGUAGE = readString(dis);

					this.ISOLANGUAGE = readString(dis);

					this.EDITION = readString(dis);

					this.PUBNAME = readString(dis);

					this.PUBPLACECD = readString(dis);

					this.PUBPLACENAME = readString(dis);

					this.PUBVOLUME = readString(dis);

					this.PUBDATE = readString(dis);

					this.TABLECONTENTS = readString(dis);

					this.PARTTITLE = readString(dis);

					this.NUMBER = readString(dis);

					this.SPATIAL = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.EXTENT = readString(dis);

					this.PRICE = readString(dis);

					this.SERIESCREATOR = readString(dis);

					this.JISX0402 = readString(dis);

					this.NCNO = readString(dis);

					this.UTMNO = readString(dis);

					this.JPNO = readString(dis);

					this.ISBN = readString(dis);

					this.ISSN = readString(dis);

					this.ISSNL = readString(dis);

					this.INCORRECTISSN = readString(dis);

					this.INCORRECTISSNL = readString(dis);

					this.ISBNSET = readString(dis);

					this.BRNO = readString(dis);

					this.DOI = readString(dis);

					this.NDLBIDID = readString(dis);

					this.STANDARDNO = readString(dis);

					this.TOHANMARCNO = readString(dis);

					this.USMARCNO = readString(dis);

					this.NSMARCNO = readString(dis);

					this.UKMARCNO = readString(dis);

					this.RIS502 = readString(dis);

					this.OCLCNO = readString(dis);

					this.RLINNO = readString(dis);

					this.KAKENHINO = readString(dis);

					this.TRNO = readString(dis);

					this.GPOBIBNO = readString(dis);

					this.NIIBIBNO = readString(dis);

					this.UNDS = readString(dis);

					this.UNSN = readString(dis);

					this.CHECKSUM = readString(dis);

					this.INSERTTIME = readString(dis);

					this.CODE = readString(dis);

					this.CODE2 = readString(dis);

					this.CODE3 = readString(dis);

					this.CRTDATE = readDate(dis);

					this.UPDDATETIME = readDate(dis);

					this.TITLETRANS = readString(dis);

					this.ALTERNATIVETRANS = readString(dis);

					this.VOLUMETRANS = readString(dis);

					this.VOLUMETITLETRANS = readString(dis);

					this.SERIESTITLETRANS = readString(dis);

					this.PARTTITLETRANS = readString(dis);

					this.CREATORTRANS = readString(dis);

					this.DATEDIGITIZED = readString(dis);

					this.USCAR = readString(dis);

					this.MCJ = readString(dis);

					this.NDLBIBID = readString(dis);

					this.NDLJP = readString(dis);

					this.TRCMARCNO = readString(dis);

					this.OPLMARCNO = readString(dis);

					this.KNMARCNO = readString(dis);

					this.CODEN = readString(dis);

					this.ISRN = readString(dis);

					this.ISMN = readString(dis);

					this.PBNO = readString(dis);

					this.PLNO = readString(dis);

					this.GPOCN = readString(dis);

					this.SUPTDOC = readString(dis);

					this.SICI = readString(dis);

					this.ICNO = readString(dis);

					this.TEMPORAL = readString(dis);

					this.PERIOD = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.URI = readString(dis);

					this.NDC10 = readString(dis);

					this.PARTCREATOR = readString(dis);

					this.LCC = readString(dis);

					this.ErrorISBN = readString(dis);

					this.ISSUE = readString(dis);

					this.W3CDTF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.SERIESTITLE, dos);

				// String

				writeString(this.VOLUMETITLE, dos);

				// String

				writeString(this.ALTERNATIVE, dos);

				// String

				writeString(this.VOLUME, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DIGIPUBLISHER, dos);

				// String

				writeString(this.PUBLICYEAR, dos);

				// String

				writeString(this.NDLC, dos);

				// String

				writeString(this.NDC, dos);

				// String

				writeString(this.NDC8, dos);

				// String

				writeString(this.NDC9, dos);

				// String

				writeString(this.GHQSCAP, dos);

				// String

				writeString(this.UDC, dos);

				// String

				writeString(this.DDC, dos);

				// String

				writeString(this.NDLSH, dos);

				// String

				writeString(this.PAGERANGE, dos);

				// String

				writeString(this.ABSTRACT1, dos);

				// String

				writeString(this.ABSTRACT2, dos);

				// String

				writeString(this.MATERIALTYPE, dos);

				// Integer

				writeInteger(this.MATERIALID, dos);

				// String

				writeString(this.IMTFORMAT, dos);

				// String

				writeString(this.PUBLISHER, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.ISOLANGUAGE, dos);

				// String

				writeString(this.EDITION, dos);

				// String

				writeString(this.PUBNAME, dos);

				// String

				writeString(this.PUBPLACECD, dos);

				// String

				writeString(this.PUBPLACENAME, dos);

				// String

				writeString(this.PUBVOLUME, dos);

				// String

				writeString(this.PUBDATE, dos);

				// String

				writeString(this.TABLECONTENTS, dos);

				// String

				writeString(this.PARTTITLE, dos);

				// String

				writeString(this.NUMBER, dos);

				// String

				writeString(this.SPATIAL, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.EXTENT, dos);

				// String

				writeString(this.PRICE, dos);

				// String

				writeString(this.SERIESCREATOR, dos);

				// String

				writeString(this.JISX0402, dos);

				// String

				writeString(this.NCNO, dos);

				// String

				writeString(this.UTMNO, dos);

				// String

				writeString(this.JPNO, dos);

				// String

				writeString(this.ISBN, dos);

				// String

				writeString(this.ISSN, dos);

				// String

				writeString(this.ISSNL, dos);

				// String

				writeString(this.INCORRECTISSN, dos);

				// String

				writeString(this.INCORRECTISSNL, dos);

				// String

				writeString(this.ISBNSET, dos);

				// String

				writeString(this.BRNO, dos);

				// String

				writeString(this.DOI, dos);

				// String

				writeString(this.NDLBIDID, dos);

				// String

				writeString(this.STANDARDNO, dos);

				// String

				writeString(this.TOHANMARCNO, dos);

				// String

				writeString(this.USMARCNO, dos);

				// String

				writeString(this.NSMARCNO, dos);

				// String

				writeString(this.UKMARCNO, dos);

				// String

				writeString(this.RIS502, dos);

				// String

				writeString(this.OCLCNO, dos);

				// String

				writeString(this.RLINNO, dos);

				// String

				writeString(this.KAKENHINO, dos);

				// String

				writeString(this.TRNO, dos);

				// String

				writeString(this.GPOBIBNO, dos);

				// String

				writeString(this.NIIBIBNO, dos);

				// String

				writeString(this.UNDS, dos);

				// String

				writeString(this.UNSN, dos);

				// String

				writeString(this.CHECKSUM, dos);

				// String

				writeString(this.INSERTTIME, dos);

				// String

				writeString(this.CODE, dos);

				// String

				writeString(this.CODE2, dos);

				// String

				writeString(this.CODE3, dos);

				// java.util.Date

				writeDate(this.CRTDATE, dos);

				// java.util.Date

				writeDate(this.UPDDATETIME, dos);

				// String

				writeString(this.TITLETRANS, dos);

				// String

				writeString(this.ALTERNATIVETRANS, dos);

				// String

				writeString(this.VOLUMETRANS, dos);

				// String

				writeString(this.VOLUMETITLETRANS, dos);

				// String

				writeString(this.SERIESTITLETRANS, dos);

				// String

				writeString(this.PARTTITLETRANS, dos);

				// String

				writeString(this.CREATORTRANS, dos);

				// String

				writeString(this.DATEDIGITIZED, dos);

				// String

				writeString(this.USCAR, dos);

				// String

				writeString(this.MCJ, dos);

				// String

				writeString(this.NDLBIBID, dos);

				// String

				writeString(this.NDLJP, dos);

				// String

				writeString(this.TRCMARCNO, dos);

				// String

				writeString(this.OPLMARCNO, dos);

				// String

				writeString(this.KNMARCNO, dos);

				// String

				writeString(this.CODEN, dos);

				// String

				writeString(this.ISRN, dos);

				// String

				writeString(this.ISMN, dos);

				// String

				writeString(this.PBNO, dos);

				// String

				writeString(this.PLNO, dos);

				// String

				writeString(this.GPOCN, dos);

				// String

				writeString(this.SUPTDOC, dos);

				// String

				writeString(this.SICI, dos);

				// String

				writeString(this.ICNO, dos);

				// String

				writeString(this.TEMPORAL, dos);

				// String

				writeString(this.PERIOD, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.URI, dos);

				// String

				writeString(this.NDC10, dos);

				// String

				writeString(this.PARTCREATOR, dos);

				// String

				writeString(this.LCC, dos);

				// String

				writeString(this.ErrorISBN, dos);

				// String

				writeString(this.ISSUE, dos);

				// String

				writeString(this.W3CDTF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TITLE=" + TITLE);
			sb.append(",SERIESTITLE=" + SERIESTITLE);
			sb.append(",VOLUMETITLE=" + VOLUMETITLE);
			sb.append(",ALTERNATIVE=" + ALTERNATIVE);
			sb.append(",VOLUME=" + VOLUME);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DIGIPUBLISHER=" + DIGIPUBLISHER);
			sb.append(",PUBLICYEAR=" + PUBLICYEAR);
			sb.append(",NDLC=" + NDLC);
			sb.append(",NDC=" + NDC);
			sb.append(",NDC8=" + NDC8);
			sb.append(",NDC9=" + NDC9);
			sb.append(",GHQSCAP=" + GHQSCAP);
			sb.append(",UDC=" + UDC);
			sb.append(",DDC=" + DDC);
			sb.append(",NDLSH=" + NDLSH);
			sb.append(",PAGERANGE=" + PAGERANGE);
			sb.append(",ABSTRACT1=" + ABSTRACT1);
			sb.append(",ABSTRACT2=" + ABSTRACT2);
			sb.append(",MATERIALTYPE=" + MATERIALTYPE);
			sb.append(",MATERIALID=" + String.valueOf(MATERIALID));
			sb.append(",IMTFORMAT=" + IMTFORMAT);
			sb.append(",PUBLISHER=" + PUBLISHER);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",ISOLANGUAGE=" + ISOLANGUAGE);
			sb.append(",EDITION=" + EDITION);
			sb.append(",PUBNAME=" + PUBNAME);
			sb.append(",PUBPLACECD=" + PUBPLACECD);
			sb.append(",PUBPLACENAME=" + PUBPLACENAME);
			sb.append(",PUBVOLUME=" + PUBVOLUME);
			sb.append(",PUBDATE=" + PUBDATE);
			sb.append(",TABLECONTENTS=" + TABLECONTENTS);
			sb.append(",PARTTITLE=" + PARTTITLE);
			sb.append(",NUMBER=" + NUMBER);
			sb.append(",SPATIAL=" + SPATIAL);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",EXTENT=" + EXTENT);
			sb.append(",PRICE=" + PRICE);
			sb.append(",SERIESCREATOR=" + SERIESCREATOR);
			sb.append(",JISX0402=" + JISX0402);
			sb.append(",NCNO=" + NCNO);
			sb.append(",UTMNO=" + UTMNO);
			sb.append(",JPNO=" + JPNO);
			sb.append(",ISBN=" + ISBN);
			sb.append(",ISSN=" + ISSN);
			sb.append(",ISSNL=" + ISSNL);
			sb.append(",INCORRECTISSN=" + INCORRECTISSN);
			sb.append(",INCORRECTISSNL=" + INCORRECTISSNL);
			sb.append(",ISBNSET=" + ISBNSET);
			sb.append(",BRNO=" + BRNO);
			sb.append(",DOI=" + DOI);
			sb.append(",NDLBIDID=" + NDLBIDID);
			sb.append(",STANDARDNO=" + STANDARDNO);
			sb.append(",TOHANMARCNO=" + TOHANMARCNO);
			sb.append(",USMARCNO=" + USMARCNO);
			sb.append(",NSMARCNO=" + NSMARCNO);
			sb.append(",UKMARCNO=" + UKMARCNO);
			sb.append(",RIS502=" + RIS502);
			sb.append(",OCLCNO=" + OCLCNO);
			sb.append(",RLINNO=" + RLINNO);
			sb.append(",KAKENHINO=" + KAKENHINO);
			sb.append(",TRNO=" + TRNO);
			sb.append(",GPOBIBNO=" + GPOBIBNO);
			sb.append(",NIIBIBNO=" + NIIBIBNO);
			sb.append(",UNDS=" + UNDS);
			sb.append(",UNSN=" + UNSN);
			sb.append(",CHECKSUM=" + CHECKSUM);
			sb.append(",INSERTTIME=" + INSERTTIME);
			sb.append(",CODE=" + CODE);
			sb.append(",CODE2=" + CODE2);
			sb.append(",CODE3=" + CODE3);
			sb.append(",CRTDATE=" + String.valueOf(CRTDATE));
			sb.append(",UPDDATETIME=" + String.valueOf(UPDDATETIME));
			sb.append(",TITLETRANS=" + TITLETRANS);
			sb.append(",ALTERNATIVETRANS=" + ALTERNATIVETRANS);
			sb.append(",VOLUMETRANS=" + VOLUMETRANS);
			sb.append(",VOLUMETITLETRANS=" + VOLUMETITLETRANS);
			sb.append(",SERIESTITLETRANS=" + SERIESTITLETRANS);
			sb.append(",PARTTITLETRANS=" + PARTTITLETRANS);
			sb.append(",CREATORTRANS=" + CREATORTRANS);
			sb.append(",DATEDIGITIZED=" + DATEDIGITIZED);
			sb.append(",USCAR=" + USCAR);
			sb.append(",MCJ=" + MCJ);
			sb.append(",NDLBIBID=" + NDLBIBID);
			sb.append(",NDLJP=" + NDLJP);
			sb.append(",TRCMARCNO=" + TRCMARCNO);
			sb.append(",OPLMARCNO=" + OPLMARCNO);
			sb.append(",KNMARCNO=" + KNMARCNO);
			sb.append(",CODEN=" + CODEN);
			sb.append(",ISRN=" + ISRN);
			sb.append(",ISMN=" + ISMN);
			sb.append(",PBNO=" + PBNO);
			sb.append(",PLNO=" + PLNO);
			sb.append(",GPOCN=" + GPOCN);
			sb.append(",SUPTDOC=" + SUPTDOC);
			sb.append(",SICI=" + SICI);
			sb.append(",ICNO=" + ICNO);
			sb.append(",TEMPORAL=" + TEMPORAL);
			sb.append(",PERIOD=" + PERIOD);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",URI=" + URI);
			sb.append(",NDC10=" + NDC10);
			sb.append(",PARTCREATOR=" + PARTCREATOR);
			sb.append(",LCC=" + LCC);
			sb.append(",ErrorISBN=" + ErrorISBN);
			sb.append(",ISSUE=" + ISSUE);
			sb.append(",W3CDTF=" + W3CDTF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(NDLDATAStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements
			routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String TITLE;

		public String getTITLE() {
			return this.TITLE;
		}

		public String SERIESTITLE;

		public String getSERIESTITLE() {
			return this.SERIESTITLE;
		}

		public String VOLUMETITLE;

		public String getVOLUMETITLE() {
			return this.VOLUMETITLE;
		}

		public String ALTERNATIVE;

		public String getALTERNATIVE() {
			return this.ALTERNATIVE;
		}

		public String VOLUME;

		public String getVOLUME() {
			return this.VOLUME;
		}

		public String CREATOR;

		public String getCREATOR() {
			return this.CREATOR;
		}

		public String DIGIPUBLISHER;

		public String getDIGIPUBLISHER() {
			return this.DIGIPUBLISHER;
		}

		public String PUBLICYEAR;

		public String getPUBLICYEAR() {
			return this.PUBLICYEAR;
		}

		public String NDLC;

		public String getNDLC() {
			return this.NDLC;
		}

		public String NDC;

		public String getNDC() {
			return this.NDC;
		}

		public String NDC8;

		public String getNDC8() {
			return this.NDC8;
		}

		public String NDC9;

		public String getNDC9() {
			return this.NDC9;
		}

		public String GHQSCAP;

		public String getGHQSCAP() {
			return this.GHQSCAP;
		}

		public String UDC;

		public String getUDC() {
			return this.UDC;
		}

		public String DDC;

		public String getDDC() {
			return this.DDC;
		}

		public String NDLSH;

		public String getNDLSH() {
			return this.NDLSH;
		}

		public String PAGERANGE;

		public String getPAGERANGE() {
			return this.PAGERANGE;
		}

		public String ABSTRACT1;

		public String getABSTRACT1() {
			return this.ABSTRACT1;
		}

		public String ABSTRACT2;

		public String getABSTRACT2() {
			return this.ABSTRACT2;
		}

		public String METARIALTYPE;

		public String getMETARIALTYPE() {
			return this.METARIALTYPE;
		}

		public Integer MATERIALID;

		public Integer getMATERIALID() {
			return this.MATERIALID;
		}

		public String IMTFORMAT;

		public String getIMTFORMAT() {
			return this.IMTFORMAT;
		}

		public String PUBLISHER;

		public String getPUBLISHER() {
			return this.PUBLISHER;
		}

		public String LANGUAGE;

		public String getLANGUAGE() {
			return this.LANGUAGE;
		}

		public String ISOLANGUAGE;

		public String getISOLANGUAGE() {
			return this.ISOLANGUAGE;
		}

		public String EDITION;

		public String getEDITION() {
			return this.EDITION;
		}

		public String PUBNAME;

		public String getPUBNAME() {
			return this.PUBNAME;
		}

		public String PUBPLACECD;

		public String getPUBPLACECD() {
			return this.PUBPLACECD;
		}

		public String PUBPLACENAME;

		public String getPUBPLACENAME() {
			return this.PUBPLACENAME;
		}

		public String PUBVOLUME;

		public String getPUBVOLUME() {
			return this.PUBVOLUME;
		}

		public String PUBDATE;

		public String getPUBDATE() {
			return this.PUBDATE;
		}

		public String TABLECONTENTS;

		public String getTABLECONTENTS() {
			return this.TABLECONTENTS;
		}

		public String PARTTITLE;

		public String getPARTTITLE() {
			return this.PARTTITLE;
		}

		public String NUMBER;

		public String getNUMBER() {
			return this.NUMBER;
		}

		public String SPATIAL;

		public String getSPATIAL() {
			return this.SPATIAL;
		}

		public String DESCRIPTION;

		public String getDESCRIPTION() {
			return this.DESCRIPTION;
		}

		public String EXPORT;

		public String getEXPORT() {
			return this.EXPORT;
		}

		public String PRICE;

		public String getPRICE() {
			return this.PRICE;
		}

		public String SERIESCREATOR;

		public String getSERIESCREATOR() {
			return this.SERIESCREATOR;
		}

		public String JISX0402;

		public String getJISX0402() {
			return this.JISX0402;
		}

		public String NCNO;

		public String getNCNO() {
			return this.NCNO;
		}

		public String UTMNO;

		public String getUTMNO() {
			return this.UTMNO;
		}

		public String JPNO;

		public String getJPNO() {
			return this.JPNO;
		}

		public String ISBN;

		public String getISBN() {
			return this.ISBN;
		}

		public String ISSN;

		public String getISSN() {
			return this.ISSN;
		}

		public String ISSNL;

		public String getISSNL() {
			return this.ISSNL;
		}

		public String INCORRECTISSN;

		public String getINCORRECTISSN() {
			return this.INCORRECTISSN;
		}

		public String INCORRECTISSNL;

		public String getINCORRECTISSNL() {
			return this.INCORRECTISSNL;
		}

		public String ISBNSET;

		public String getISBNSET() {
			return this.ISBNSET;
		}

		public String BRNO;

		public String getBRNO() {
			return this.BRNO;
		}

		public String DOI;

		public String getDOI() {
			return this.DOI;
		}

		public String NDLBIDID;

		public String getNDLBIDID() {
			return this.NDLBIDID;
		}

		public String STANDARDNO;

		public String getSTANDARDNO() {
			return this.STANDARDNO;
		}

		public String TOHANMARCNO;

		public String getTOHANMARCNO() {
			return this.TOHANMARCNO;
		}

		public String USMARCNO;

		public String getUSMARCNO() {
			return this.USMARCNO;
		}

		public String NSMARCNO;

		public String getNSMARCNO() {
			return this.NSMARCNO;
		}

		public String UKMARCNO;

		public String getUKMARCNO() {
			return this.UKMARCNO;
		}

		public String RIS502;

		public String getRIS502() {
			return this.RIS502;
		}

		public String OCLCNO;

		public String getOCLCNO() {
			return this.OCLCNO;
		}

		public String RLINNO;

		public String getRLINNO() {
			return this.RLINNO;
		}

		public String KAKENHINO;

		public String getKAKENHINO() {
			return this.KAKENHINO;
		}

		public String TRNO;

		public String getTRNO() {
			return this.TRNO;
		}

		public String GPOBIBNO;

		public String getGPOBIBNO() {
			return this.GPOBIBNO;
		}

		public String NIIBIBNO;

		public String getNIIBIBNO() {
			return this.NIIBIBNO;
		}

		public String UNDS;

		public String getUNDS() {
			return this.UNDS;
		}

		public String UNSN;

		public String getUNSN() {
			return this.UNSN;
		}

		public String CHECKSUM;

		public String getCHECKSUM() {
			return this.CHECKSUM;
		}

		public String INSERTTIME;

		public String getINSERTTIME() {
			return this.INSERTTIME;
		}

		public String CODE;

		public String getCODE() {
			return this.CODE;
		}

		public String CODE2;

		public String getCODE2() {
			return this.CODE2;
		}

		public String CODE3;

		public String getCODE3() {
			return this.CODE3;
		}

		public java.util.Date CRTDATE;

		public java.util.Date getCRTDATE() {
			return this.CRTDATE;
		}

		public java.util.Date UPDDATETIME;

		public java.util.Date getUPDDATETIME() {
			return this.UPDDATETIME;
		}

		public String TITLETRANS;

		public String getTITLETRANS() {
			return this.TITLETRANS;
		}

		public String ALTERNATIVETRANS;

		public String getALTERNATIVETRANS() {
			return this.ALTERNATIVETRANS;
		}

		public String VOLUMETRANS;

		public String getVOLUMETRANS() {
			return this.VOLUMETRANS;
		}

		public String VOLUMETITLETRANS;

		public String getVOLUMETITLETRANS() {
			return this.VOLUMETITLETRANS;
		}

		public String SERIESTITLETRANS;

		public String getSERIESTITLETRANS() {
			return this.SERIESTITLETRANS;
		}

		public String PARTTITLETRANS;

		public String getPARTTITLETRANS() {
			return this.PARTTITLETRANS;
		}

		public String CREATORTRANS;

		public String getCREATORTRANS() {
			return this.CREATORTRANS;
		}

		public String DATEDIGITIZED;

		public String getDATEDIGITIZED() {
			return this.DATEDIGITIZED;
		}

		public String USCAR;

		public String getUSCAR() {
			return this.USCAR;
		}

		public String MCJ;

		public String getMCJ() {
			return this.MCJ;
		}

		public String NDLBIBID;

		public String getNDLBIBID() {
			return this.NDLBIBID;
		}

		public String NDLJP;

		public String getNDLJP() {
			return this.NDLJP;
		}

		public String TRCMARCNO;

		public String getTRCMARCNO() {
			return this.TRCMARCNO;
		}

		public String OPLMARCNO;

		public String getOPLMARCNO() {
			return this.OPLMARCNO;
		}

		public String KNMARCNO;

		public String getKNMARCNO() {
			return this.KNMARCNO;
		}

		public String CODEN;

		public String getCODEN() {
			return this.CODEN;
		}

		public String ISRN;

		public String getISRN() {
			return this.ISRN;
		}

		public String ISMN;

		public String getISMN() {
			return this.ISMN;
		}

		public String PBNO;

		public String getPBNO() {
			return this.PBNO;
		}

		public String PLNO;

		public String getPLNO() {
			return this.PLNO;
		}

		public String GPOCN;

		public String getGPOCN() {
			return this.GPOCN;
		}

		public String SUPTDOC;

		public String getSUPTDOC() {
			return this.SUPTDOC;
		}

		public String SICI;

		public String getSICI() {
			return this.SICI;
		}

		public String ICNO;

		public String getICNO() {
			return this.ICNO;
		}

		public String TEMPORAL;

		public String getTEMPORAL() {
			return this.TEMPORAL;
		}

		public String PERIOD;

		public String getPERIOD() {
			return this.PERIOD;
		}

		public String ACCESSRIGHTS;

		public String getACCESSRIGHTS() {
			return this.ACCESSRIGHTS;
		}

		public String RIGHTS;

		public String getRIGHTS() {
			return this.RIGHTS;
		}

		public String RIGHTSHOLDER;

		public String getRIGHTSHOLDER() {
			return this.RIGHTSHOLDER;
		}

		public String URI;

		public String getURI() {
			return this.URI;
		}

		public String NDC10;

		public String getNDC10() {
			return this.NDC10;
		}

		public String PARTCREATOR;

		public String getPARTCREATOR() {
			return this.PARTCREATOR;
		}

		public String LCC;

		public String getLCC() {
			return this.LCC;
		}

		public String ErrorISBN;

		public String getErrorISBN() {
			return this.ErrorISBN;
		}

		public String EXTENT;

		public String getEXTENT() {
			return this.EXTENT;
		}

		public String ISSUE;

		public String getISSUE() {
			return this.ISSUE;
		}

		public String W3CDTF;

		public String getW3CDTF() {
			return this.W3CDTF;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.TITLE = readString(dis);

					this.SERIESTITLE = readString(dis);

					this.VOLUMETITLE = readString(dis);

					this.ALTERNATIVE = readString(dis);

					this.VOLUME = readString(dis);

					this.CREATOR = readString(dis);

					this.DIGIPUBLISHER = readString(dis);

					this.PUBLICYEAR = readString(dis);

					this.NDLC = readString(dis);

					this.NDC = readString(dis);

					this.NDC8 = readString(dis);

					this.NDC9 = readString(dis);

					this.GHQSCAP = readString(dis);

					this.UDC = readString(dis);

					this.DDC = readString(dis);

					this.NDLSH = readString(dis);

					this.PAGERANGE = readString(dis);

					this.ABSTRACT1 = readString(dis);

					this.ABSTRACT2 = readString(dis);

					this.METARIALTYPE = readString(dis);

					this.MATERIALID = readInteger(dis);

					this.IMTFORMAT = readString(dis);

					this.PUBLISHER = readString(dis);

					this.LANGUAGE = readString(dis);

					this.ISOLANGUAGE = readString(dis);

					this.EDITION = readString(dis);

					this.PUBNAME = readString(dis);

					this.PUBPLACECD = readString(dis);

					this.PUBPLACENAME = readString(dis);

					this.PUBVOLUME = readString(dis);

					this.PUBDATE = readString(dis);

					this.TABLECONTENTS = readString(dis);

					this.PARTTITLE = readString(dis);

					this.NUMBER = readString(dis);

					this.SPATIAL = readString(dis);

					this.DESCRIPTION = readString(dis);

					this.EXPORT = readString(dis);

					this.PRICE = readString(dis);

					this.SERIESCREATOR = readString(dis);

					this.JISX0402 = readString(dis);

					this.NCNO = readString(dis);

					this.UTMNO = readString(dis);

					this.JPNO = readString(dis);

					this.ISBN = readString(dis);

					this.ISSN = readString(dis);

					this.ISSNL = readString(dis);

					this.INCORRECTISSN = readString(dis);

					this.INCORRECTISSNL = readString(dis);

					this.ISBNSET = readString(dis);

					this.BRNO = readString(dis);

					this.DOI = readString(dis);

					this.NDLBIDID = readString(dis);

					this.STANDARDNO = readString(dis);

					this.TOHANMARCNO = readString(dis);

					this.USMARCNO = readString(dis);

					this.NSMARCNO = readString(dis);

					this.UKMARCNO = readString(dis);

					this.RIS502 = readString(dis);

					this.OCLCNO = readString(dis);

					this.RLINNO = readString(dis);

					this.KAKENHINO = readString(dis);

					this.TRNO = readString(dis);

					this.GPOBIBNO = readString(dis);

					this.NIIBIBNO = readString(dis);

					this.UNDS = readString(dis);

					this.UNSN = readString(dis);

					this.CHECKSUM = readString(dis);

					this.INSERTTIME = readString(dis);

					this.CODE = readString(dis);

					this.CODE2 = readString(dis);

					this.CODE3 = readString(dis);

					this.CRTDATE = readDate(dis);

					this.UPDDATETIME = readDate(dis);

					this.TITLETRANS = readString(dis);

					this.ALTERNATIVETRANS = readString(dis);

					this.VOLUMETRANS = readString(dis);

					this.VOLUMETITLETRANS = readString(dis);

					this.SERIESTITLETRANS = readString(dis);

					this.PARTTITLETRANS = readString(dis);

					this.CREATORTRANS = readString(dis);

					this.DATEDIGITIZED = readString(dis);

					this.USCAR = readString(dis);

					this.MCJ = readString(dis);

					this.NDLBIBID = readString(dis);

					this.NDLJP = readString(dis);

					this.TRCMARCNO = readString(dis);

					this.OPLMARCNO = readString(dis);

					this.KNMARCNO = readString(dis);

					this.CODEN = readString(dis);

					this.ISRN = readString(dis);

					this.ISMN = readString(dis);

					this.PBNO = readString(dis);

					this.PLNO = readString(dis);

					this.GPOCN = readString(dis);

					this.SUPTDOC = readString(dis);

					this.SICI = readString(dis);

					this.ICNO = readString(dis);

					this.TEMPORAL = readString(dis);

					this.PERIOD = readString(dis);

					this.ACCESSRIGHTS = readString(dis);

					this.RIGHTS = readString(dis);

					this.RIGHTSHOLDER = readString(dis);

					this.URI = readString(dis);

					this.NDC10 = readString(dis);

					this.PARTCREATOR = readString(dis);

					this.LCC = readString(dis);

					this.ErrorISBN = readString(dis);

					this.EXTENT = readString(dis);

					this.ISSUE = readString(dis);

					this.W3CDTF = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.TITLE, dos);

				// String

				writeString(this.SERIESTITLE, dos);

				// String

				writeString(this.VOLUMETITLE, dos);

				// String

				writeString(this.ALTERNATIVE, dos);

				// String

				writeString(this.VOLUME, dos);

				// String

				writeString(this.CREATOR, dos);

				// String

				writeString(this.DIGIPUBLISHER, dos);

				// String

				writeString(this.PUBLICYEAR, dos);

				// String

				writeString(this.NDLC, dos);

				// String

				writeString(this.NDC, dos);

				// String

				writeString(this.NDC8, dos);

				// String

				writeString(this.NDC9, dos);

				// String

				writeString(this.GHQSCAP, dos);

				// String

				writeString(this.UDC, dos);

				// String

				writeString(this.DDC, dos);

				// String

				writeString(this.NDLSH, dos);

				// String

				writeString(this.PAGERANGE, dos);

				// String

				writeString(this.ABSTRACT1, dos);

				// String

				writeString(this.ABSTRACT2, dos);

				// String

				writeString(this.METARIALTYPE, dos);

				// Integer

				writeInteger(this.MATERIALID, dos);

				// String

				writeString(this.IMTFORMAT, dos);

				// String

				writeString(this.PUBLISHER, dos);

				// String

				writeString(this.LANGUAGE, dos);

				// String

				writeString(this.ISOLANGUAGE, dos);

				// String

				writeString(this.EDITION, dos);

				// String

				writeString(this.PUBNAME, dos);

				// String

				writeString(this.PUBPLACECD, dos);

				// String

				writeString(this.PUBPLACENAME, dos);

				// String

				writeString(this.PUBVOLUME, dos);

				// String

				writeString(this.PUBDATE, dos);

				// String

				writeString(this.TABLECONTENTS, dos);

				// String

				writeString(this.PARTTITLE, dos);

				// String

				writeString(this.NUMBER, dos);

				// String

				writeString(this.SPATIAL, dos);

				// String

				writeString(this.DESCRIPTION, dos);

				// String

				writeString(this.EXPORT, dos);

				// String

				writeString(this.PRICE, dos);

				// String

				writeString(this.SERIESCREATOR, dos);

				// String

				writeString(this.JISX0402, dos);

				// String

				writeString(this.NCNO, dos);

				// String

				writeString(this.UTMNO, dos);

				// String

				writeString(this.JPNO, dos);

				// String

				writeString(this.ISBN, dos);

				// String

				writeString(this.ISSN, dos);

				// String

				writeString(this.ISSNL, dos);

				// String

				writeString(this.INCORRECTISSN, dos);

				// String

				writeString(this.INCORRECTISSNL, dos);

				// String

				writeString(this.ISBNSET, dos);

				// String

				writeString(this.BRNO, dos);

				// String

				writeString(this.DOI, dos);

				// String

				writeString(this.NDLBIDID, dos);

				// String

				writeString(this.STANDARDNO, dos);

				// String

				writeString(this.TOHANMARCNO, dos);

				// String

				writeString(this.USMARCNO, dos);

				// String

				writeString(this.NSMARCNO, dos);

				// String

				writeString(this.UKMARCNO, dos);

				// String

				writeString(this.RIS502, dos);

				// String

				writeString(this.OCLCNO, dos);

				// String

				writeString(this.RLINNO, dos);

				// String

				writeString(this.KAKENHINO, dos);

				// String

				writeString(this.TRNO, dos);

				// String

				writeString(this.GPOBIBNO, dos);

				// String

				writeString(this.NIIBIBNO, dos);

				// String

				writeString(this.UNDS, dos);

				// String

				writeString(this.UNSN, dos);

				// String

				writeString(this.CHECKSUM, dos);

				// String

				writeString(this.INSERTTIME, dos);

				// String

				writeString(this.CODE, dos);

				// String

				writeString(this.CODE2, dos);

				// String

				writeString(this.CODE3, dos);

				// java.util.Date

				writeDate(this.CRTDATE, dos);

				// java.util.Date

				writeDate(this.UPDDATETIME, dos);

				// String

				writeString(this.TITLETRANS, dos);

				// String

				writeString(this.ALTERNATIVETRANS, dos);

				// String

				writeString(this.VOLUMETRANS, dos);

				// String

				writeString(this.VOLUMETITLETRANS, dos);

				// String

				writeString(this.SERIESTITLETRANS, dos);

				// String

				writeString(this.PARTTITLETRANS, dos);

				// String

				writeString(this.CREATORTRANS, dos);

				// String

				writeString(this.DATEDIGITIZED, dos);

				// String

				writeString(this.USCAR, dos);

				// String

				writeString(this.MCJ, dos);

				// String

				writeString(this.NDLBIBID, dos);

				// String

				writeString(this.NDLJP, dos);

				// String

				writeString(this.TRCMARCNO, dos);

				// String

				writeString(this.OPLMARCNO, dos);

				// String

				writeString(this.KNMARCNO, dos);

				// String

				writeString(this.CODEN, dos);

				// String

				writeString(this.ISRN, dos);

				// String

				writeString(this.ISMN, dos);

				// String

				writeString(this.PBNO, dos);

				// String

				writeString(this.PLNO, dos);

				// String

				writeString(this.GPOCN, dos);

				// String

				writeString(this.SUPTDOC, dos);

				// String

				writeString(this.SICI, dos);

				// String

				writeString(this.ICNO, dos);

				// String

				writeString(this.TEMPORAL, dos);

				// String

				writeString(this.PERIOD, dos);

				// String

				writeString(this.ACCESSRIGHTS, dos);

				// String

				writeString(this.RIGHTS, dos);

				// String

				writeString(this.RIGHTSHOLDER, dos);

				// String

				writeString(this.URI, dos);

				// String

				writeString(this.NDC10, dos);

				// String

				writeString(this.PARTCREATOR, dos);

				// String

				writeString(this.LCC, dos);

				// String

				writeString(this.ErrorISBN, dos);

				// String

				writeString(this.EXTENT, dos);

				// String

				writeString(this.ISSUE, dos);

				// String

				writeString(this.W3CDTF, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TITLE=" + TITLE);
			sb.append(",SERIESTITLE=" + SERIESTITLE);
			sb.append(",VOLUMETITLE=" + VOLUMETITLE);
			sb.append(",ALTERNATIVE=" + ALTERNATIVE);
			sb.append(",VOLUME=" + VOLUME);
			sb.append(",CREATOR=" + CREATOR);
			sb.append(",DIGIPUBLISHER=" + DIGIPUBLISHER);
			sb.append(",PUBLICYEAR=" + PUBLICYEAR);
			sb.append(",NDLC=" + NDLC);
			sb.append(",NDC=" + NDC);
			sb.append(",NDC8=" + NDC8);
			sb.append(",NDC9=" + NDC9);
			sb.append(",GHQSCAP=" + GHQSCAP);
			sb.append(",UDC=" + UDC);
			sb.append(",DDC=" + DDC);
			sb.append(",NDLSH=" + NDLSH);
			sb.append(",PAGERANGE=" + PAGERANGE);
			sb.append(",ABSTRACT1=" + ABSTRACT1);
			sb.append(",ABSTRACT2=" + ABSTRACT2);
			sb.append(",METARIALTYPE=" + METARIALTYPE);
			sb.append(",MATERIALID=" + String.valueOf(MATERIALID));
			sb.append(",IMTFORMAT=" + IMTFORMAT);
			sb.append(",PUBLISHER=" + PUBLISHER);
			sb.append(",LANGUAGE=" + LANGUAGE);
			sb.append(",ISOLANGUAGE=" + ISOLANGUAGE);
			sb.append(",EDITION=" + EDITION);
			sb.append(",PUBNAME=" + PUBNAME);
			sb.append(",PUBPLACECD=" + PUBPLACECD);
			sb.append(",PUBPLACENAME=" + PUBPLACENAME);
			sb.append(",PUBVOLUME=" + PUBVOLUME);
			sb.append(",PUBDATE=" + PUBDATE);
			sb.append(",TABLECONTENTS=" + TABLECONTENTS);
			sb.append(",PARTTITLE=" + PARTTITLE);
			sb.append(",NUMBER=" + NUMBER);
			sb.append(",SPATIAL=" + SPATIAL);
			sb.append(",DESCRIPTION=" + DESCRIPTION);
			sb.append(",EXPORT=" + EXPORT);
			sb.append(",PRICE=" + PRICE);
			sb.append(",SERIESCREATOR=" + SERIESCREATOR);
			sb.append(",JISX0402=" + JISX0402);
			sb.append(",NCNO=" + NCNO);
			sb.append(",UTMNO=" + UTMNO);
			sb.append(",JPNO=" + JPNO);
			sb.append(",ISBN=" + ISBN);
			sb.append(",ISSN=" + ISSN);
			sb.append(",ISSNL=" + ISSNL);
			sb.append(",INCORRECTISSN=" + INCORRECTISSN);
			sb.append(",INCORRECTISSNL=" + INCORRECTISSNL);
			sb.append(",ISBNSET=" + ISBNSET);
			sb.append(",BRNO=" + BRNO);
			sb.append(",DOI=" + DOI);
			sb.append(",NDLBIDID=" + NDLBIDID);
			sb.append(",STANDARDNO=" + STANDARDNO);
			sb.append(",TOHANMARCNO=" + TOHANMARCNO);
			sb.append(",USMARCNO=" + USMARCNO);
			sb.append(",NSMARCNO=" + NSMARCNO);
			sb.append(",UKMARCNO=" + UKMARCNO);
			sb.append(",RIS502=" + RIS502);
			sb.append(",OCLCNO=" + OCLCNO);
			sb.append(",RLINNO=" + RLINNO);
			sb.append(",KAKENHINO=" + KAKENHINO);
			sb.append(",TRNO=" + TRNO);
			sb.append(",GPOBIBNO=" + GPOBIBNO);
			sb.append(",NIIBIBNO=" + NIIBIBNO);
			sb.append(",UNDS=" + UNDS);
			sb.append(",UNSN=" + UNSN);
			sb.append(",CHECKSUM=" + CHECKSUM);
			sb.append(",INSERTTIME=" + INSERTTIME);
			sb.append(",CODE=" + CODE);
			sb.append(",CODE2=" + CODE2);
			sb.append(",CODE3=" + CODE3);
			sb.append(",CRTDATE=" + String.valueOf(CRTDATE));
			sb.append(",UPDDATETIME=" + String.valueOf(UPDDATETIME));
			sb.append(",TITLETRANS=" + TITLETRANS);
			sb.append(",ALTERNATIVETRANS=" + ALTERNATIVETRANS);
			sb.append(",VOLUMETRANS=" + VOLUMETRANS);
			sb.append(",VOLUMETITLETRANS=" + VOLUMETITLETRANS);
			sb.append(",SERIESTITLETRANS=" + SERIESTITLETRANS);
			sb.append(",PARTTITLETRANS=" + PARTTITLETRANS);
			sb.append(",CREATORTRANS=" + CREATORTRANS);
			sb.append(",DATEDIGITIZED=" + DATEDIGITIZED);
			sb.append(",USCAR=" + USCAR);
			sb.append(",MCJ=" + MCJ);
			sb.append(",NDLBIBID=" + NDLBIBID);
			sb.append(",NDLJP=" + NDLJP);
			sb.append(",TRCMARCNO=" + TRCMARCNO);
			sb.append(",OPLMARCNO=" + OPLMARCNO);
			sb.append(",KNMARCNO=" + KNMARCNO);
			sb.append(",CODEN=" + CODEN);
			sb.append(",ISRN=" + ISRN);
			sb.append(",ISMN=" + ISMN);
			sb.append(",PBNO=" + PBNO);
			sb.append(",PLNO=" + PLNO);
			sb.append(",GPOCN=" + GPOCN);
			sb.append(",SUPTDOC=" + SUPTDOC);
			sb.append(",SICI=" + SICI);
			sb.append(",ICNO=" + ICNO);
			sb.append(",TEMPORAL=" + TEMPORAL);
			sb.append(",PERIOD=" + PERIOD);
			sb.append(",ACCESSRIGHTS=" + ACCESSRIGHTS);
			sb.append(",RIGHTS=" + RIGHTS);
			sb.append(",RIGHTSHOLDER=" + RIGHTSHOLDER);
			sb.append(",URI=" + URI);
			sb.append(",NDC10=" + NDC10);
			sb.append(",PARTCREATOR=" + PARTCREATOR);
			sb.append(",LCC=" + LCC);
			sb.append(",ErrorISBN=" + ErrorISBN);
			sb.append(",EXTENT=" + EXTENT);
			sb.append(",ISSUE=" + ISSUE);
			sb.append(",W3CDTF=" + W3CDTF);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements
			routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String content;

		public String getContent() {
			return this.content;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.content = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.content, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("content=" + content);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputRaw_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileInputRaw_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();
				NDLDATAStruct NDLDATA = new NDLDATAStruct();
				row8Struct row8 = new row8Struct();

				/**
				 * [tMysqlOutput_1 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_1", false);
				start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_1";

				int tos_count_tMysqlOutput_1 = 0;

				class BytesLimit65535_tMysqlOutput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();

				int nb_line_tMysqlOutput_1 = 0;
				int nb_line_update_tMysqlOutput_1 = 0;
				int nb_line_inserted_tMysqlOutput_1 = 0;
				int nb_line_deleted_tMysqlOutput_1 = 0;
				int nb_line_rejected_tMysqlOutput_1 = 0;

				int deletedCount_tMysqlOutput_1 = 0;
				int updatedCount_tMysqlOutput_1 = 0;
				int insertedCount_tMysqlOutput_1 = 0;

				int rejectedCount_tMysqlOutput_1 = 0;

				String tableName_tMysqlOutput_1 = "NDLDATA";
				boolean whetherReject_tMysqlOutput_1 = false;

				java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime()
						.getTime();
				calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1
						.getTime().getTime();
				long date_tMysqlOutput_1;

				java.sql.Connection conn_tMysqlOutput_1 = null;
				conn_tMysqlOutput_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				int count_tMysqlOutput_1 = 0;

				String insertIgnore_tMysqlOutput_1 = "INSERT IGNORE INTO `"
						+ "NDLDATA"
						+ "` (`TITLE`,`SERIESTITLE`,`VOLUMETITLE`,`ALTERNATIVE`,`VOLUME`,`CREATOR`,`DIGIPUBLISHER`,`PUBLICYEAR`,`NDLC`,`NDC`,`NDC8`,`NDC9`,`GHQSCAP`,`UDC`,`DDC`,`NDLSH`,`PAGERANGE`,`ABSTRACT1`,`ABSTRACT2`,`MATERIALTYPE`,`MATERIALID`,`IMTFORMAT`,`PUBLISHER`,`LANGUAGE`,`ISOLANGUAGE`,`EDITION`,`PUBNAME`,`PUBPLACECD`,`PUBPLACENAME`,`PUBVOLUME`,`PUBDATE`,`TABLECONTENTS`,`PARTTITLE`,`NUMBER`,`SPATIAL`,`DESCRIPTION`,`EXTENT`,`PRICE`,`SERIESCREATOR`,`JISX0402`,`NCNO`,`UTMNO`,`JPNO`,`ISBN`,`ISSN`,`ISSNL`,`INCORRECTISSN`,`INCORRECTISSNL`,`ISBNSET`,`BRNO`,`DOI`,`NDLBIDID`,`STANDARDNO`,`TOHANMARCNO`,`USMARCNO`,`NSMARCNO`,`UKMARCNO`,`RIS502`,`OCLCNO`,`RLINNO`,`KAKENHINO`,`TRNO`,`GPOBIBNO`,`NIIBIBNO`,`UNDS`,`UNSN`,`CHECKSUM`,`INSERTTIME`,`CRTDATE`,`UPDDATETIME`,`TITLETRANS`,`ALTERNATIVETRANS`,`VOLUMETRANS`,`VOLUMETITLETRANS`,`SERIESTITLETRANS`,`PARTTITLETRANS`,`CREATORTRANS`,`DATEDIGITIZED`,`USCAR`,`MCJ`,`NDLBIBID`,`NDLJP`,`TRCMARCNO`,`OPLMARCNO`,`KNMARCNO`,`CODEN`,`ISRN`,`ISMN`,`PBNO`,`PLNO`,`GPOCN`,`SUPTDOC`,`SICI`,`ICNO`,`TEMPORAL`,`PERIOD`,`ACCESSRIGHTS`,`RIGHTS`,`RIGHTSHOLDER`,`URI`,`NDC10`,`PARTCREATOR`,`LCC`,`ErrorISBN`,`ISSUE`,`W3CDTF`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) ON DUPLICATE KEY UPDATE `TITLE` = ?,`SERIESTITLE` = ?,`VOLUMETITLE` = ?,`ALTERNATIVE` = ?,`VOLUME` = ?,`CREATOR` = ?,`DIGIPUBLISHER` = ?,`PUBLICYEAR` = ?,`NDLC` = ?,`NDC` = ?,`NDC8` = ?,`NDC9` = ?,`GHQSCAP` = ?,`UDC` = ?,`DDC` = ?,`NDLSH` = ?,`PAGERANGE` = ?,`ABSTRACT1` = ?,`ABSTRACT2` = ?,`MATERIALTYPE` = ?,`MATERIALID` = ?,`IMTFORMAT` = ?,`PUBLISHER` = ?,`LANGUAGE` = ?,`ISOLANGUAGE` = ?,`EDITION` = ?,`PUBNAME` = ?,`PUBPLACECD` = ?,`PUBPLACENAME` = ?,`PUBVOLUME` = ?,`PUBDATE` = ?,`TABLECONTENTS` = ?,`PARTTITLE` = ?,`NUMBER` = ?,`SPATIAL` = ?,`DESCRIPTION` = ?,`EXTENT` = ?,`PRICE` = ?,`SERIESCREATOR` = ?,`JISX0402` = ?,`NCNO` = ?,`UTMNO` = ?,`JPNO` = ?,`ISBN` = ?,`ISSN` = ?,`ISSNL` = ?,`INCORRECTISSN` = ?,`INCORRECTISSNL` = ?,`ISBNSET` = ?,`BRNO` = ?,`DOI` = ?,`NDLBIDID` = ?,`STANDARDNO` = ?,`TOHANMARCNO` = ?,`USMARCNO` = ?,`NSMARCNO` = ?,`UKMARCNO` = ?,`RIS502` = ?,`OCLCNO` = ?,`RLINNO` = ?,`KAKENHINO` = ?,`TRNO` = ?,`GPOBIBNO` = ?,`NIIBIBNO` = ?,`UNDS` = ?,`UNSN` = ?,`CHECKSUM` = ?,`INSERTTIME` = ?,`CRTDATE` = ?,`UPDDATETIME` = ?,`TITLETRANS` = ?,`ALTERNATIVETRANS` = ?,`VOLUMETRANS` = ?,`VOLUMETITLETRANS` = ?,`SERIESTITLETRANS` = ?,`PARTTITLETRANS` = ?,`CREATORTRANS` = ?,`DATEDIGITIZED` = ?,`USCAR` = ?,`MCJ` = ?,`NDLBIBID` = ?,`NDLJP` = ?,`TRCMARCNO` = ?,`OPLMARCNO` = ?,`KNMARCNO` = ?,`CODEN` = ?,`ISRN` = ?,`ISMN` = ?,`PBNO` = ?,`PLNO` = ?,`GPOCN` = ?,`SUPTDOC` = ?,`SICI` = ?,`ICNO` = ?,`TEMPORAL` = ?,`PERIOD` = ?,`ACCESSRIGHTS` = ?,`RIGHTS` = ?,`RIGHTSHOLDER` = ?,`NDC10` = ?,`PARTCREATOR` = ?,`LCC` = ?,`ErrorISBN` = ?,`ISSUE` = ?,`W3CDTF` = ?";
				java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1
						.prepareStatement(insertIgnore_tMysqlOutput_1);

				StringBuffer query_tMysqlOutput_1 = null;

				insertIgnore_tMysqlOutput_1 += " ";
				String[] insertIgnoreSQLSplits_tMysqlOutput_1 = insertIgnore_tMysqlOutput_1
						.split("\\?");

				/**
				 * [tMysqlOutput_1 begin ] stop
				 */

				/**
				 * [tJavaRow_1 begin ] start
				 */

				ok_Hash.put("tJavaRow_1", false);
				start_Hash.put("tJavaRow_1", System.currentTimeMillis());

				currentComponent = "tJavaRow_1";

				int tos_count_tJavaRow_1 = 0;

				class BytesLimit65535_tJavaRow_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJavaRow_1().limitLog4jByte();

				int nb_line_tJavaRow_1 = 0;

				/**
				 * [tJavaRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				int tos_count_tMap_2 = 0;

				class BytesLimit65535_tMap_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_2().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_2__Struct {
					java.util.Date toDay;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				NDLDATAStruct NDLDATA_tmp = new NDLDATAStruct();
				// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tExtractXMLField_1 begin ] start
				 */

				ok_Hash.put("tExtractXMLField_1", false);
				start_Hash
						.put("tExtractXMLField_1", System.currentTimeMillis());

				currentComponent = "tExtractXMLField_1";

				int tos_count_tExtractXMLField_1 = 0;

				class BytesLimit65535_tExtractXMLField_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tExtractXMLField_1().limitLog4jByte();

				int nb_line_tExtractXMLField_1 = 0;

				class NameSpaceTool_tExtractXMLField_1 {

					public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();

					private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

					public void countNSMap(org.dom4j.Element el) {
						for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el
								.declaredNamespaces()) {
							if (ns.getPrefix().trim().length() == 0) {
								xmlNameSpaceMap.put(
										"pre" + defualtNSPath.size(),
										ns.getURI());
								String path = "";
								org.dom4j.Element elTmp = el;
								while (elTmp != null) {
									if (elTmp.getNamespacePrefix() != null
											&& elTmp.getNamespacePrefix()
													.length() > 0) {
										path = "/" + elTmp.getNamespacePrefix()
												+ ":" + elTmp.getName() + path;
									} else {
										path = "/" + elTmp.getName() + path;
									}
									elTmp = elTmp.getParent();
								}
								defualtNSPath.add(path);
							} else {
								xmlNameSpaceMap
										.put(ns.getPrefix(), ns.getURI());
							}

						}
						for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el
								.elements()) {
							countNSMap(e);
						}
					}

					/**
					 * the regex for the xpath like that : case 1 :
					 * functionA(locationXPathExpression) case 2 :
					 * fn:functionA(locationXPathExpression) case 3 :
					 * functionA(functionB(locationXPathExpression)) case 4 :
					 * fn:functionA(fn:functionB(locationXPathExpression)) and
					 * like that.
					 */
					private java.util.regex.Pattern simpleFunctionPattern;
					private StringBuffer stringBuffer;
					private java.util.Map<String, String> resultCache;

					public String addDefaultNSPrefix(
							final String xpathExpression, String loopPath) {
						if (defualtNSPath.size() < 1) {
							return xpathExpression;
						}

						if (resultCache == null) {
							resultCache = new java.util.HashMap<String, String>();
						}

						String resultXpathExpression = resultCache
								.get(xpathExpression);
						if (resultXpathExpression != null) {
							return resultXpathExpression;
						}

						String locationPathExpression = xpathExpression;

						if (simpleFunctionPattern == null) {
							simpleFunctionPattern = java.util.regex.Pattern
									.compile("([a-zA-z0-9]+:)?[a-zA-Z]+-?[A-Za-z]+\\(.*\\)");
						}

						boolean isSimpleFunctionXPath = simpleFunctionPattern
								.matcher(xpathExpression).matches();
						String tail = null;
						if (isSimpleFunctionXPath) {
							int start = xpathExpression.lastIndexOf('(');
							int end = xpathExpression.indexOf(')');
							if (start < end) {
								if (stringBuffer == null) {
									stringBuffer = new StringBuffer();
								}
								locationPathExpression = xpathExpression
										.substring(start + 1, end);
								stringBuffer.append(xpathExpression.substring(
										0, start + 1));
								tail = xpathExpression.substring(end);
							} else {
								isSimpleFunctionXPath = false;
							}
						}

						locationPathExpression = addDefaultNSPrefixForLocationXPathExpression(
								locationPathExpression, loopPath);

						resultXpathExpression = locationPathExpression;

						if (isSimpleFunctionXPath) {
							stringBuffer.append(locationPathExpression);
							stringBuffer.append(tail);
							resultXpathExpression = stringBuffer.toString();
							stringBuffer.setLength(0);
						}

						resultCache.put(xpathExpression, resultXpathExpression);
						return resultXpathExpression;
					}

					private String addDefaultNSPrefixForLocationXPathExpression(
							String path, String loopPath) {
						String fullPath = loopPath;
						if (!path.equals(fullPath)) {
							for (String tmp : path.split("/")) {
								if (("..").equals(tmp)) {
									fullPath = fullPath.substring(0,
											fullPath.lastIndexOf("/"));
								} else {
									fullPath += "/" + tmp;
								}
							}
						}
						int[] indexs = new int[fullPath.split("/").length - 1];
						java.util.Arrays.fill(indexs, -1);
						int length = 0;
						for (int i = 0; i < defualtNSPath.size(); i++) {
							if (defualtNSPath.get(i).length() > length
									&& fullPath
											.startsWith(defualtNSPath.get(i))) {
								java.util.Arrays.fill(indexs, defualtNSPath
										.get(i).split("/").length - 2,
										indexs.length, i);
								length = defualtNSPath.get(i).length();
							}
						}

						StringBuilder newPath = new StringBuilder();
						String[] pathStrs = path.split("/");
						for (int i = 0; i < pathStrs.length; i++) {
							String tmp = pathStrs[i];
							if (newPath.length() > 0) {
								newPath.append("/");
							}
							if (tmp.length() > 0 && tmp.indexOf(":") == -1
									&& tmp.indexOf(".") == -1 /*
															 * &&
															 * tmp.indexOf("@")
															 * == -1
															 */) {
								int index = indexs[i + indexs.length
										- pathStrs.length];
								if (index >= 0) {
									// ==== add by wliu to support both filter
									// and functions==
									if (tmp.indexOf("[") > 0
											&& tmp.indexOf("]") > tmp
													.indexOf("[")) {// include
																	// filter
										String tmpStr = replaceElementWithNS(
												tmp, "pre" + index + ":");
										newPath.append(tmpStr);
									} else {
										if (tmp.indexOf("@") != -1
												|| tmp.indexOf("(") < tmp
														.indexOf(")")) { // include
																			// attribute
											newPath.append(tmp);
										} else {
											// ==add end=======
											newPath.append("pre").append(index)
													.append(":").append(tmp);
										}
									}
								} else {
									newPath.append(tmp);
								}
							} else {
								newPath.append(tmp);
							}
						}
						return newPath.toString();
					}

					private String matches = "@*\\b[a-z|A-Z|_]+[[-]*\\w]*\\b[^'|^\\(]";
					private java.util.regex.Pattern pattern = java.util.regex.Pattern
							.compile(matches);

					private String replaceElementWithNS(String global,
							String pre) {

						java.util.regex.Matcher match = pattern.matcher(global);
						StringBuffer sb = new StringBuffer();
						match.reset();
						while (match.find()) {
							String group = match.group();
							String tmp = "";
							if (group.toLowerCase().matches(
									"\\b(div|mod|and|or)\\b.*")
									|| group.matches("@.*")) {
								tmp = group;
							} else {
								tmp = tmp + pre + group;
							}
							match.appendReplacement(sb, tmp);
						}
						match.appendTail(sb);

						return sb.toString();
					}

				}

				class XML_API_tExtractXMLField_1 {
					public boolean isDefNull(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null && node instanceof org.dom4j.Element) {
							org.dom4j.Attribute attri = ((org.dom4j.Element) node)
									.attribute("nil");
							if (attri != null
									&& ("true").equals(attri.getText())) {
								return true;
							}
						}
						return false;
					}

					public boolean isMissing(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						return node == null ? true : false;
					}

					public boolean isEmpty(org.dom4j.Node node)
							throws javax.xml.transform.TransformerException {
						if (node != null) {
							return node.getText().length() == 0;
						}
						return false;
					}

					public void putExtractValue_0(
							row7Struct row7,
							row6Struct row6,
							String xmlStr_tExtractXMLField_1,
							org.dom4j.tree.AbstractNode temp_tExtractXMLField_1,
							NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1,
							String loopQuery_tExtractXMLField_1,
							java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1,
							org.dom4j.Node node_tExtractXMLField_1,
							String str_tExtractXMLField_1,
							XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1,
							org.jaxen.NamespaceContext namespaceContext_tExtractXMLField_1)
							throws java.lang.Exception {

						boolean resultIsNode_tExtractXMLField_1 = true;
						org.dom4j.XPath xTmp0_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:title/text()",
												loopQuery_tExtractXMLField_1));
						xTmp0_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp0_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj0_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj0_tExtractXMLField_1 instanceof String
								|| obj0_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj0_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp0_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.TITLE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.TITLE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.TITLE = null;
						} else {
							row7.TITLE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp1_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:seriesTitle/text()",
												loopQuery_tExtractXMLField_1));
						xTmp1_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp1_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj1_tExtractXMLField_1 = xTmp1_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj1_tExtractXMLField_1 instanceof String
								|| obj1_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj1_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp1_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp1_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.SERIESTITLE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.SERIESTITLE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.SERIESTITLE = null;
						} else {
							row7.SERIESTITLE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp2_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:volumeTitle/text()",
												loopQuery_tExtractXMLField_1));
						xTmp2_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp2_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj2_tExtractXMLField_1 = xTmp2_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj2_tExtractXMLField_1 instanceof String
								|| obj2_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj2_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp2_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp2_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.VOLUMETITLE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.VOLUMETITLE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.VOLUMETITLE = null;
						} else {
							row7.VOLUMETITLE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp3_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:alternative/text()",
												loopQuery_tExtractXMLField_1));
						xTmp3_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp3_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj3_tExtractXMLField_1 = xTmp3_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj3_tExtractXMLField_1 instanceof String
								|| obj3_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj3_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp3_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp3_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ALTERNATIVE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ALTERNATIVE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ALTERNATIVE = null;
						} else {
							row7.ALTERNATIVE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp4_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:volume/text()",
												loopQuery_tExtractXMLField_1));
						xTmp4_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp4_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj4_tExtractXMLField_1 = xTmp4_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj4_tExtractXMLField_1 instanceof String
								|| obj4_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj4_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp4_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp4_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.VOLUME = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.VOLUME = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.VOLUME = null;
						} else {
							row7.VOLUME = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp5_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:creator/text()",
												loopQuery_tExtractXMLField_1));
						xTmp5_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp5_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj5_tExtractXMLField_1 = xTmp5_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj5_tExtractXMLField_1 instanceof String
								|| obj5_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj5_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp5_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp5_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.CREATOR = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.CREATOR = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.CREATOR = null;
						} else {
							row7.CREATOR = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp6_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:digitizedPublisher/text()",
												loopQuery_tExtractXMLField_1));
						xTmp6_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp6_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj6_tExtractXMLField_1 = xTmp6_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj6_tExtractXMLField_1 instanceof String
								|| obj6_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj6_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp6_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp6_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.DIGIPUBLISHER = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.DIGIPUBLISHER = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.DIGIPUBLISHER = null;
						} else {
							row7.DIGIPUBLISHER = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp7_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:issued[@xsi:type='dcterms:W3CDTF']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp7_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp7_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj7_tExtractXMLField_1 = xTmp7_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj7_tExtractXMLField_1 instanceof String
								|| obj7_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj7_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp7_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp7_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PUBLICYEAR = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PUBLICYEAR = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PUBLICYEAR = null;
						} else {
							row7.PUBLICYEAR = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp8_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:NDLC']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp8_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp8_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj8_tExtractXMLField_1 = xTmp8_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj8_tExtractXMLField_1 instanceof String
								|| obj8_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj8_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp8_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp8_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDLC = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDLC = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDLC = null;
						} else {
							row7.NDLC = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp9_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:NDC']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp9_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp9_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj9_tExtractXMLField_1 = xTmp9_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj9_tExtractXMLField_1 instanceof String
								|| obj9_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj9_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp9_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp9_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDC = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDC = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDC = null;
						} else {
							row7.NDC = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp10_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:NDC8']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp10_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp10_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj10_tExtractXMLField_1 = xTmp10_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj10_tExtractXMLField_1 instanceof String
								|| obj10_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj10_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp10_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp10_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDC8 = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDC8 = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDC8 = null;
						} else {
							row7.NDC8 = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp11_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:NDC9']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp11_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp11_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj11_tExtractXMLField_1 = xTmp11_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj11_tExtractXMLField_1 instanceof String
								|| obj11_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj11_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp11_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp11_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDC9 = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDC9 = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDC9 = null;
						} else {
							row7.NDC9 = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp12_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:GHQSCAP']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp12_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp12_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj12_tExtractXMLField_1 = xTmp12_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj12_tExtractXMLField_1 instanceof String
								|| obj12_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj12_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp12_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp12_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.GHQSCAP = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.GHQSCAP = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.GHQSCAP = null;
						} else {
							row7.GHQSCAP = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp13_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:UDC']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp13_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp13_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj13_tExtractXMLField_1 = xTmp13_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj13_tExtractXMLField_1 instanceof String
								|| obj13_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj13_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp13_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp13_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.UDC = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.UDC = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.UDC = null;
						} else {
							row7.UDC = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp14_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:DDC']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp14_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp14_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj14_tExtractXMLField_1 = xTmp14_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj14_tExtractXMLField_1 instanceof String
								|| obj14_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj14_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp14_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp14_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.DDC = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.DDC = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.DDC = null;
						} else {
							row7.DDC = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp15_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:NDLSH']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp15_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp15_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj15_tExtractXMLField_1 = xTmp15_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj15_tExtractXMLField_1 instanceof String
								|| obj15_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj15_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp15_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp15_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDLSH = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDLSH = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDLSH = null;
						} else {
							row7.NDLSH = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp16_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:pageRange/text()",
												loopQuery_tExtractXMLField_1));
						xTmp16_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp16_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj16_tExtractXMLField_1 = xTmp16_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj16_tExtractXMLField_1 instanceof String
								|| obj16_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj16_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp16_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp16_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PAGERANGE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PAGERANGE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PAGERANGE = null;
						} else {
							row7.PAGERANGE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp17_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:abstract/text()",
												loopQuery_tExtractXMLField_1));
						xTmp17_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp17_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj17_tExtractXMLField_1 = xTmp17_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj17_tExtractXMLField_1 instanceof String
								|| obj17_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj17_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp17_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp17_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ABSTRACT1 = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ABSTRACT1 = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ABSTRACT1 = null;
						} else {
							row7.ABSTRACT1 = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp18_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:abstract/text()",
												loopQuery_tExtractXMLField_1));
						xTmp18_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp18_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj18_tExtractXMLField_1 = xTmp18_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj18_tExtractXMLField_1 instanceof String
								|| obj18_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj18_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp18_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp18_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ABSTRACT2 = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ABSTRACT2 = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ABSTRACT2 = null;
						} else {
							row7.ABSTRACT2 = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp19_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:materialType/text()",
												loopQuery_tExtractXMLField_1));
						xTmp19_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp19_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj19_tExtractXMLField_1 = xTmp19_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj19_tExtractXMLField_1 instanceof String
								|| obj19_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj19_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp19_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp19_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.METARIALTYPE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.METARIALTYPE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.METARIALTYPE = null;
						} else {
							row7.METARIALTYPE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp21_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:format[@xsi:type='dcterms:IMT']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp21_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp21_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj21_tExtractXMLField_1 = xTmp21_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj21_tExtractXMLField_1 instanceof String
								|| obj21_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj21_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp21_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp21_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.IMTFORMAT = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.IMTFORMAT = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.IMTFORMAT = null;
						} else {
							row7.IMTFORMAT = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp22_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:publisher/text()",
												loopQuery_tExtractXMLField_1));
						xTmp22_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp22_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj22_tExtractXMLField_1 = xTmp22_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj22_tExtractXMLField_1 instanceof String
								|| obj22_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj22_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp22_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp22_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PUBLISHER = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PUBLISHER = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PUBLISHER = null;
						} else {
							row7.PUBLISHER = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp23_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:language[@xsi:type='dcterms:ISO639-2']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp23_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp23_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj23_tExtractXMLField_1 = xTmp23_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj23_tExtractXMLField_1 instanceof String
								|| obj23_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj23_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp23_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp23_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.LANGUAGE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.LANGUAGE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.LANGUAGE = null;
						} else {
							row7.LANGUAGE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp24_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:language[@xsi:type='dcterms:ISO639-2']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp24_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp24_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj24_tExtractXMLField_1 = xTmp24_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj24_tExtractXMLField_1 instanceof String
								|| obj24_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj24_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp24_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp24_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISOLANGUAGE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISOLANGUAGE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISOLANGUAGE = null;
						} else {
							row7.ISOLANGUAGE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp25_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:edition/text()",
												loopQuery_tExtractXMLField_1));
						xTmp25_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp25_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj25_tExtractXMLField_1 = xTmp25_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj25_tExtractXMLField_1 instanceof String
								|| obj25_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj25_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp25_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp25_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.EDITION = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.EDITION = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.EDITION = null;
						} else {
							row7.EDITION = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp26_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:publicationName/text()",
												loopQuery_tExtractXMLField_1));
						xTmp26_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp26_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj26_tExtractXMLField_1 = xTmp26_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj26_tExtractXMLField_1 instanceof String
								|| obj26_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj26_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp26_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp26_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PUBNAME = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PUBNAME = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PUBNAME = null;
						} else {
							row7.PUBNAME = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp27_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:publicationPlace[@xsi:type='dcterms:ISO3166']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp27_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp27_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj27_tExtractXMLField_1 = xTmp27_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj27_tExtractXMLField_1 instanceof String
								|| obj27_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj27_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp27_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp27_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PUBPLACECD = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PUBPLACECD = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PUBPLACECD = null;
						} else {
							row7.PUBPLACECD = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp28_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:publicationPlace/text()",
												loopQuery_tExtractXMLField_1));
						xTmp28_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp28_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj28_tExtractXMLField_1 = xTmp28_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj28_tExtractXMLField_1 instanceof String
								|| obj28_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj28_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp28_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp28_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PUBPLACENAME = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PUBPLACENAME = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PUBPLACENAME = null;
						} else {
							row7.PUBPLACENAME = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp29_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:publicationVolume/text()",
												loopQuery_tExtractXMLField_1));
						xTmp29_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp29_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj29_tExtractXMLField_1 = xTmp29_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj29_tExtractXMLField_1 instanceof String
								|| obj29_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj29_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp29_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp29_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PUBVOLUME = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PUBVOLUME = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PUBVOLUME = null;
						} else {
							row7.PUBVOLUME = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp30_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:date/text()",
												loopQuery_tExtractXMLField_1));
						xTmp30_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp30_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj30_tExtractXMLField_1 = xTmp30_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj30_tExtractXMLField_1 instanceof String
								|| obj30_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj30_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp30_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp30_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PUBDATE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PUBDATE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PUBDATE = null;
						} else {
							row7.PUBDATE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp31_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:tableOfContents/text()",
												loopQuery_tExtractXMLField_1));
						xTmp31_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp31_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj31_tExtractXMLField_1 = xTmp31_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj31_tExtractXMLField_1 instanceof String
								|| obj31_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj31_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp31_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp31_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.TABLECONTENTS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.TABLECONTENTS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.TABLECONTENTS = null;
						} else {
							row7.TABLECONTENTS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp32_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:partTitle/text()",
												loopQuery_tExtractXMLField_1));
						xTmp32_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp32_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj32_tExtractXMLField_1 = xTmp32_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj32_tExtractXMLField_1 instanceof String
								|| obj32_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj32_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp32_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp32_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PARTTITLE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PARTTITLE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PARTTITLE = null;
						} else {
							row7.PARTTITLE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp33_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:number/text()",
												loopQuery_tExtractXMLField_1));
						xTmp33_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp33_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj33_tExtractXMLField_1 = xTmp33_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj33_tExtractXMLField_1 instanceof String
								|| obj33_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj33_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp33_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp33_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NUMBER = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NUMBER = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NUMBER = null;
						} else {
							row7.NUMBER = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp34_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:spatial/text()",
												loopQuery_tExtractXMLField_1));
						xTmp34_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp34_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj34_tExtractXMLField_1 = xTmp34_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj34_tExtractXMLField_1 instanceof String
								|| obj34_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj34_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp34_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp34_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.SPATIAL = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.SPATIAL = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.SPATIAL = null;
						} else {
							row7.SPATIAL = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp35_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:description/text()",
												loopQuery_tExtractXMLField_1));
						xTmp35_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp35_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj35_tExtractXMLField_1 = xTmp35_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj35_tExtractXMLField_1 instanceof String
								|| obj35_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj35_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp35_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp35_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.DESCRIPTION = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.DESCRIPTION = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.DESCRIPTION = null;
						} else {
							row7.DESCRIPTION = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp37_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:price/text()",
												loopQuery_tExtractXMLField_1));
						xTmp37_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp37_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj37_tExtractXMLField_1 = xTmp37_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj37_tExtractXMLField_1 instanceof String
								|| obj37_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj37_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp37_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp37_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PRICE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PRICE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PRICE = null;
						} else {
							row7.PRICE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp38_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:seriesCreator/text()",
												loopQuery_tExtractXMLField_1));
						xTmp38_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp38_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj38_tExtractXMLField_1 = xTmp38_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj38_tExtractXMLField_1 instanceof String
								|| obj38_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj38_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp38_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp38_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.SERIESCREATOR = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.SERIESCREATOR = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.SERIESCREATOR = null;
						} else {
							row7.SERIESCREATOR = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp39_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:spatial[@xsi:type='dcndl:JISX0402']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp39_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp39_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj39_tExtractXMLField_1 = xTmp39_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj39_tExtractXMLField_1 instanceof String
								|| obj39_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj39_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp39_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp39_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.JISX0402 = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.JISX0402 = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.JISX0402 = null;
						} else {
							row7.JISX0402 = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp40_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:spatial[@xsi:type='dcndl:NCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp40_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp40_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj40_tExtractXMLField_1 = xTmp40_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj40_tExtractXMLField_1 instanceof String
								|| obj40_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj40_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp40_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp40_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NCNO = null;
						} else {
							row7.NCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp41_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:spatial[@xsi:type='dcndl:UTMNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp41_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp41_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj41_tExtractXMLField_1 = xTmp41_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj41_tExtractXMLField_1 instanceof String
								|| obj41_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj41_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp41_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp41_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.UTMNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.UTMNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.UTMNO = null;
						} else {
							row7.UTMNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp42_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:JPNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp42_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp42_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj42_tExtractXMLField_1 = xTmp42_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj42_tExtractXMLField_1 instanceof String
								|| obj42_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj42_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp42_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp42_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.JPNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.JPNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.JPNO = null;
						} else {
							row7.JPNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp43_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:ISBN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp43_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp43_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj43_tExtractXMLField_1 = xTmp43_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj43_tExtractXMLField_1 instanceof String
								|| obj43_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj43_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp43_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp43_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISBN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISBN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISBN = null;
						} else {
							row7.ISBN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp44_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:ISSN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp44_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp44_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj44_tExtractXMLField_1 = xTmp44_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj44_tExtractXMLField_1 instanceof String
								|| obj44_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj44_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp44_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp44_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISSN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISSN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISSN = null;
						} else {
							row7.ISSN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp45_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:ISSNL']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp45_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp45_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj45_tExtractXMLField_1 = xTmp45_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj45_tExtractXMLField_1 instanceof String
								|| obj45_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj45_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp45_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp45_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISSNL = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISSNL = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISSNL = null;
						} else {
							row7.ISSNL = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp46_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:IncorrectISSN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp46_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp46_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj46_tExtractXMLField_1 = xTmp46_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj46_tExtractXMLField_1 instanceof String
								|| obj46_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj46_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp46_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp46_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.INCORRECTISSN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.INCORRECTISSN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.INCORRECTISSN = null;
						} else {
							row7.INCORRECTISSN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp47_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:IncorrectISSNL']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp47_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp47_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj47_tExtractXMLField_1 = xTmp47_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj47_tExtractXMLField_1 instanceof String
								|| obj47_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj47_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp47_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp47_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.INCORRECTISSNL = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.INCORRECTISSNL = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.INCORRECTISSNL = null;
						} else {
							row7.INCORRECTISSNL = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp48_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:SetISBN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp48_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp48_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj48_tExtractXMLField_1 = xTmp48_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj48_tExtractXMLField_1 instanceof String
								|| obj48_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj48_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp48_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp48_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISBNSET = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISBNSET = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISBNSET = null;
						} else {
							row7.ISBNSET = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp49_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:BRNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp49_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp49_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj49_tExtractXMLField_1 = xTmp49_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj49_tExtractXMLField_1 instanceof String
								|| obj49_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj49_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp49_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp49_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.BRNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.BRNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.BRNO = null;
						} else {
							row7.BRNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp50_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:DOI']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp50_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp50_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj50_tExtractXMLField_1 = xTmp50_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj50_tExtractXMLField_1 instanceof String
								|| obj50_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj50_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp50_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp50_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.DOI = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.DOI = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.DOI = null;
						} else {
							row7.DOI = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp51_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:sourceIdentifier[@xsi:type='dcndl:NDLBibID']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp51_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp51_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj51_tExtractXMLField_1 = xTmp51_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj51_tExtractXMLField_1 instanceof String
								|| obj51_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj51_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp51_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp51_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDLBIDID = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDLBIDID = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDLBIDID = null;
						} else {
							row7.NDLBIDID = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp52_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:StandardNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp52_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp52_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj52_tExtractXMLField_1 = xTmp52_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj52_tExtractXMLField_1 instanceof String
								|| obj52_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj52_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp52_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp52_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.STANDARDNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.STANDARDNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.STANDARDNO = null;
						} else {
							row7.STANDARDNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp53_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:TOHANMARCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp53_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp53_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj53_tExtractXMLField_1 = xTmp53_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj53_tExtractXMLField_1 instanceof String
								|| obj53_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj53_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp53_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp53_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.TOHANMARCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.TOHANMARCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.TOHANMARCNO = null;
						} else {
							row7.TOHANMARCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp54_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:USMARCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp54_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp54_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj54_tExtractXMLField_1 = xTmp54_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj54_tExtractXMLField_1 instanceof String
								|| obj54_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj54_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp54_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp54_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.USMARCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.USMARCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.USMARCNO = null;
						} else {
							row7.USMARCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp55_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:NSMARCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp55_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp55_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj55_tExtractXMLField_1 = xTmp55_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj55_tExtractXMLField_1 instanceof String
								|| obj55_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj55_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp55_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp55_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NSMARCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NSMARCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NSMARCNO = null;
						} else {
							row7.NSMARCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp56_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:UKMARCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp56_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp56_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj56_tExtractXMLField_1 = xTmp56_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj56_tExtractXMLField_1 instanceof String
								|| obj56_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj56_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp56_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp56_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.UKMARCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.UKMARCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.UKMARCNO = null;
						} else {
							row7.UKMARCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp57_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:RIS502']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp57_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp57_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj57_tExtractXMLField_1 = xTmp57_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj57_tExtractXMLField_1 instanceof String
								|| obj57_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj57_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp57_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp57_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.RIS502 = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.RIS502 = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.RIS502 = null;
						} else {
							row7.RIS502 = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp58_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:OCLCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp58_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp58_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj58_tExtractXMLField_1 = xTmp58_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj58_tExtractXMLField_1 instanceof String
								|| obj58_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj58_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp58_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp58_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.OCLCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.OCLCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.OCLCNO = null;
						} else {
							row7.OCLCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp59_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:RLINNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp59_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp59_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj59_tExtractXMLField_1 = xTmp59_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj59_tExtractXMLField_1 instanceof String
								|| obj59_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj59_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp59_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp59_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.RLINNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.RLINNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.RLINNO = null;
						} else {
							row7.RLINNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp60_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:KAKENHINO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp60_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp60_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj60_tExtractXMLField_1 = xTmp60_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj60_tExtractXMLField_1 instanceof String
								|| obj60_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj60_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp60_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp60_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.KAKENHINO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.KAKENHINO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.KAKENHINO = null;
						} else {
							row7.KAKENHINO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp61_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:TRNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp61_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp61_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj61_tExtractXMLField_1 = xTmp61_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj61_tExtractXMLField_1 instanceof String
								|| obj61_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj61_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp61_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp61_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.TRNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.TRNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.TRNO = null;
						} else {
							row7.TRNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp62_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:GPOBibNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp62_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp62_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj62_tExtractXMLField_1 = xTmp62_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj62_tExtractXMLField_1 instanceof String
								|| obj62_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj62_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp62_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp62_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.GPOBIBNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.GPOBIBNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.GPOBIBNO = null;
						} else {
							row7.GPOBIBNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp63_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:NIIBibID']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp63_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp63_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj63_tExtractXMLField_1 = xTmp63_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj63_tExtractXMLField_1 instanceof String
								|| obj63_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj63_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp63_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp63_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NIIBIBNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NIIBIBNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NIIBIBNO = null;
						} else {
							row7.NIIBIBNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp64_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:UNDS']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp64_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp64_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj64_tExtractXMLField_1 = xTmp64_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj64_tExtractXMLField_1 instanceof String
								|| obj64_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj64_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp64_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp64_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.UNDS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.UNDS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.UNDS = null;
						} else {
							row7.UNDS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp65_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:UNSN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp65_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp65_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj65_tExtractXMLField_1 = xTmp65_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj65_tExtractXMLField_1 instanceof String
								|| obj65_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj65_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp65_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp65_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.UNSN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.UNSN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.UNSN = null;
						} else {
							row7.UNSN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp67_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"header/datestamp/text()",
												loopQuery_tExtractXMLField_1));
						xTmp67_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp67_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj67_tExtractXMLField_1 = xTmp67_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj67_tExtractXMLField_1 instanceof String
								|| obj67_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj67_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp67_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp67_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.INSERTTIME = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.INSERTTIME = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.INSERTTIME = null;
						} else {
							row7.INSERTTIME = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp73_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:titleTranscription/text()",
												loopQuery_tExtractXMLField_1));
						xTmp73_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp73_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj73_tExtractXMLField_1 = xTmp73_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj73_tExtractXMLField_1 instanceof String
								|| obj73_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj73_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp73_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp73_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.TITLETRANS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.TITLETRANS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.TITLETRANS = null;
						} else {
							row7.TITLETRANS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp74_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:alternativeTranscription/text()",
												loopQuery_tExtractXMLField_1));
						xTmp74_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp74_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj74_tExtractXMLField_1 = xTmp74_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj74_tExtractXMLField_1 instanceof String
								|| obj74_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj74_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp74_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp74_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ALTERNATIVETRANS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ALTERNATIVETRANS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ALTERNATIVETRANS = null;
						} else {
							row7.ALTERNATIVETRANS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp75_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:volumeTranscription/text()",
												loopQuery_tExtractXMLField_1));
						xTmp75_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp75_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj75_tExtractXMLField_1 = xTmp75_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj75_tExtractXMLField_1 instanceof String
								|| obj75_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj75_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp75_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp75_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.VOLUMETRANS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.VOLUMETRANS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.VOLUMETRANS = null;
						} else {
							row7.VOLUMETRANS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp76_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:volumeTitleTranscription/text()",
												loopQuery_tExtractXMLField_1));
						xTmp76_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp76_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj76_tExtractXMLField_1 = xTmp76_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj76_tExtractXMLField_1 instanceof String
								|| obj76_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj76_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp76_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp76_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.VOLUMETITLETRANS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.VOLUMETITLETRANS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.VOLUMETITLETRANS = null;
						} else {
							row7.VOLUMETITLETRANS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp77_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:seriesTitleTranscription/text()",
												loopQuery_tExtractXMLField_1));
						xTmp77_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp77_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj77_tExtractXMLField_1 = xTmp77_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj77_tExtractXMLField_1 instanceof String
								|| obj77_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj77_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp77_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp77_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.SERIESTITLETRANS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.SERIESTITLETRANS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.SERIESTITLETRANS = null;
						} else {
							row7.SERIESTITLETRANS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp78_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:partTitleTranscription/text()",
												loopQuery_tExtractXMLField_1));
						xTmp78_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp78_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj78_tExtractXMLField_1 = xTmp78_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj78_tExtractXMLField_1 instanceof String
								|| obj78_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj78_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp78_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp78_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PARTTITLETRANS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PARTTITLETRANS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PARTTITLETRANS = null;
						} else {
							row7.PARTTITLETRANS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp79_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:creatorTranscription/text()",
												loopQuery_tExtractXMLField_1));
						xTmp79_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp79_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj79_tExtractXMLField_1 = xTmp79_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj79_tExtractXMLField_1 instanceof String
								|| obj79_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj79_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp79_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp79_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.CREATORTRANS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.CREATORTRANS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.CREATORTRANS = null;
						} else {
							row7.CREATORTRANS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp80_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:dateDigitized[@xsi:type='dcterms:W3CDTF']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp80_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp80_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj80_tExtractXMLField_1 = xTmp80_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj80_tExtractXMLField_1 instanceof String
								|| obj80_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj80_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp80_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp80_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.DATEDIGITIZED = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.DATEDIGITIZED = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.DATEDIGITIZED = null;
						} else {
							row7.DATEDIGITIZED = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp81_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:USCAR']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp81_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp81_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj81_tExtractXMLField_1 = xTmp81_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj81_tExtractXMLField_1 instanceof String
								|| obj81_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj81_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp81_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp81_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.USCAR = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.USCAR = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.USCAR = null;
						} else {
							row7.USCAR = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp82_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:MCJ']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp82_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp82_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj82_tExtractXMLField_1 = xTmp82_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj82_tExtractXMLField_1 instanceof String
								|| obj82_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj82_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp82_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp82_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.MCJ = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.MCJ = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.MCJ = null;
						} else {
							row7.MCJ = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp83_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:NDLBibID']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp83_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp83_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj83_tExtractXMLField_1 = xTmp83_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj83_tExtractXMLField_1 instanceof String
								|| obj83_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj83_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp83_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp83_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDLBIBID = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDLBIBID = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDLBIBID = null;
						} else {
							row7.NDLBIBID = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp84_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:NDLJP']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp84_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp84_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj84_tExtractXMLField_1 = xTmp84_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj84_tExtractXMLField_1 instanceof String
								|| obj84_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj84_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp84_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp84_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDLJP = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDLJP = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDLJP = null;
						} else {
							row7.NDLJP = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp85_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:TRCMARCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp85_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp85_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj85_tExtractXMLField_1 = xTmp85_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj85_tExtractXMLField_1 instanceof String
								|| obj85_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj85_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp85_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp85_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.TRCMARCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.TRCMARCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.TRCMARCNO = null;
						} else {
							row7.TRCMARCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp86_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:OPLMARCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp86_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp86_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj86_tExtractXMLField_1 = xTmp86_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj86_tExtractXMLField_1 instanceof String
								|| obj86_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj86_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp86_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp86_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.OPLMARCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.OPLMARCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.OPLMARCNO = null;
						} else {
							row7.OPLMARCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp87_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:KNMARCNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp87_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp87_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj87_tExtractXMLField_1 = xTmp87_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj87_tExtractXMLField_1 instanceof String
								|| obj87_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj87_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp87_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp87_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.KNMARCNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.KNMARCNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.KNMARCNO = null;
						} else {
							row7.KNMARCNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp88_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:CODEN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp88_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp88_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj88_tExtractXMLField_1 = xTmp88_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj88_tExtractXMLField_1 instanceof String
								|| obj88_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj88_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp88_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp88_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.CODEN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.CODEN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.CODEN = null;
						} else {
							row7.CODEN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp89_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:ISRN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp89_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp89_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj89_tExtractXMLField_1 = xTmp89_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj89_tExtractXMLField_1 instanceof String
								|| obj89_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj89_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp89_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp89_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISRN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISRN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISRN = null;
						} else {
							row7.ISRN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp90_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:ISMN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp90_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp90_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj90_tExtractXMLField_1 = xTmp90_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj90_tExtractXMLField_1 instanceof String
								|| obj90_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj90_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp90_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp90_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISMN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISMN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISMN = null;
						} else {
							row7.ISMN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp91_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:PBNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp91_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp91_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj91_tExtractXMLField_1 = xTmp91_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj91_tExtractXMLField_1 instanceof String
								|| obj91_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj91_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp91_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp91_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PBNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PBNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PBNO = null;
						} else {
							row7.PBNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp92_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:PLNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp92_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp92_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj92_tExtractXMLField_1 = xTmp92_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj92_tExtractXMLField_1 instanceof String
								|| obj92_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj92_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp92_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp92_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PLNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PLNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PLNO = null;
						} else {
							row7.PLNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp93_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:GPOCN']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp93_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp93_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj93_tExtractXMLField_1 = xTmp93_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj93_tExtractXMLField_1 instanceof String
								|| obj93_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj93_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp93_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp93_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.GPOCN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.GPOCN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.GPOCN = null;
						} else {
							row7.GPOCN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp94_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:SUPTDOC']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp94_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp94_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj94_tExtractXMLField_1 = xTmp94_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj94_tExtractXMLField_1 instanceof String
								|| obj94_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj94_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp94_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp94_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.SUPTDOC = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.SUPTDOC = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.SUPTDOC = null;
						} else {
							row7.SUPTDOC = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp95_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:SICI']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp95_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp95_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj95_tExtractXMLField_1 = xTmp95_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj95_tExtractXMLField_1 instanceof String
								|| obj95_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj95_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp95_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp95_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.SICI = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.SICI = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.SICI = null;
						} else {
							row7.SICI = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp96_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:spatial[@xsi:type='dcndl:ICNO']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp96_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp96_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj96_tExtractXMLField_1 = xTmp96_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj96_tExtractXMLField_1 instanceof String
								|| obj96_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj96_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp96_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp96_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ICNO = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ICNO = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ICNO = null;
						} else {
							row7.ICNO = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp97_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:temporal/text()",
												loopQuery_tExtractXMLField_1));
						xTmp97_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp97_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj97_tExtractXMLField_1 = xTmp97_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj97_tExtractXMLField_1 instanceof String
								|| obj97_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj97_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp97_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp97_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.TEMPORAL = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.TEMPORAL = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.TEMPORAL = null;
						} else {
							row7.TEMPORAL = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp98_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:temporal[@xsi:type='dcterms:Period']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp98_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp98_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj98_tExtractXMLField_1 = xTmp98_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj98_tExtractXMLField_1 instanceof String
								|| obj98_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj98_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp98_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp98_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PERIOD = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PERIOD = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PERIOD = null;
						} else {
							row7.PERIOD = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp99_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:accessRights/text()",
												loopQuery_tExtractXMLField_1));
						xTmp99_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp99_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj99_tExtractXMLField_1 = xTmp99_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj99_tExtractXMLField_1 instanceof String
								|| obj99_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj99_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp99_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp99_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ACCESSRIGHTS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ACCESSRIGHTS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ACCESSRIGHTS = null;
						} else {
							row7.ACCESSRIGHTS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp100_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:rights/text()",
												loopQuery_tExtractXMLField_1));
						xTmp100_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp100_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj100_tExtractXMLField_1 = xTmp100_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj100_tExtractXMLField_1 instanceof String
								|| obj100_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj100_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp100_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp100_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.RIGHTS = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.RIGHTS = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.RIGHTS = null;
						} else {
							row7.RIGHTS = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp101_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:rightsHolder/text()",
												loopQuery_tExtractXMLField_1));
						xTmp101_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp101_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj101_tExtractXMLField_1 = xTmp101_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj101_tExtractXMLField_1 instanceof String
								|| obj101_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj101_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp101_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp101_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.RIGHTSHOLDER = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.RIGHTSHOLDER = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.RIGHTSHOLDER = null;
						} else {
							row7.RIGHTSHOLDER = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp102_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcterms:URI']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp102_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp102_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj102_tExtractXMLField_1 = xTmp102_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj102_tExtractXMLField_1 instanceof String
								|| obj102_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj102_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp102_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp102_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.URI = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.URI = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.URI = null;
						} else {
							row7.URI = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp103_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcndl:NDC10']/text()",
												loopQuery_tExtractXMLField_1));
						xTmp103_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp103_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj103_tExtractXMLField_1 = xTmp103_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj103_tExtractXMLField_1 instanceof String
								|| obj103_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj103_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp103_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp103_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.NDC10 = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.NDC10 = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.NDC10 = null;
						} else {
							row7.NDC10 = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp104_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:partCreator",
												loopQuery_tExtractXMLField_1));
						xTmp104_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp104_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj104_tExtractXMLField_1 = xTmp104_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj104_tExtractXMLField_1 instanceof String
								|| obj104_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj104_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp104_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp104_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.PARTCREATOR = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.PARTCREATOR = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.PARTCREATOR = null;
						} else {
							row7.PARTCREATOR = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp105_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:subject[@xsi:type='dcterms:LCC']",
												loopQuery_tExtractXMLField_1));
						xTmp105_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp105_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj105_tExtractXMLField_1 = xTmp105_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj105_tExtractXMLField_1 instanceof String
								|| obj105_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj105_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp105_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp105_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.LCC = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.LCC = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.LCC = null;
						} else {
							row7.LCC = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp106_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dc:identifier[@xsi:type='dcndl:ErrorISBN']",
												loopQuery_tExtractXMLField_1));
						xTmp106_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp106_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj106_tExtractXMLField_1 = xTmp106_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj106_tExtractXMLField_1 instanceof String
								|| obj106_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj106_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp106_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp106_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ErrorISBN = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ErrorISBN = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ErrorISBN = null;
						} else {
							row7.ErrorISBN = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp107_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:extent",
												loopQuery_tExtractXMLField_1));
						xTmp107_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp107_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj107_tExtractXMLField_1 = xTmp107_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj107_tExtractXMLField_1 instanceof String
								|| obj107_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj107_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp107_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp107_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.EXTENT = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.EXTENT = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.EXTENT = null;
						} else {
							row7.EXTENT = str_tExtractXMLField_1;
						}
					}

					public void putExtractValue_1(
							row7Struct row7,
							row6Struct row6,
							String xmlStr_tExtractXMLField_1,
							org.dom4j.tree.AbstractNode temp_tExtractXMLField_1,
							NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1,
							String loopQuery_tExtractXMLField_1,
							java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1,
							org.dom4j.Node node_tExtractXMLField_1,
							String str_tExtractXMLField_1,
							XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1,
							org.jaxen.NamespaceContext namespaceContext_tExtractXMLField_1)
							throws java.lang.Exception {

						boolean resultIsNode_tExtractXMLField_1 = true;
						org.dom4j.XPath xTmp108_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcndl:issue",
												loopQuery_tExtractXMLField_1));
						xTmp108_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp108_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj108_tExtractXMLField_1 = xTmp108_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj108_tExtractXMLField_1 instanceof String
								|| obj108_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj108_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp108_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp108_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.ISSUE = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.ISSUE = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.ISSUE = null;
						} else {
							row7.ISSUE = str_tExtractXMLField_1;
						}
						org.dom4j.XPath xTmp109_tExtractXMLField_1 = temp_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												"metadata/dcndl_simple:dc/dcterms:temporal[@xsi:type='dcterms:W3CDTF']",
												loopQuery_tExtractXMLField_1));
						xTmp109_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						xTmp109_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						Object obj109_tExtractXMLField_1 = xTmp109_tExtractXMLField_1
								.evaluate(temp_tExtractXMLField_1);
						if (obj109_tExtractXMLField_1 instanceof String
								|| obj109_tExtractXMLField_1 instanceof Number) {
							resultIsNode_tExtractXMLField_1 = false;
							str_tExtractXMLField_1 = String
									.valueOf(obj109_tExtractXMLField_1);
						} else {
							resultIsNode_tExtractXMLField_1 = true;
							node_tExtractXMLField_1 = xTmp109_tExtractXMLField_1
									.selectSingleNode(temp_tExtractXMLField_1);
							str_tExtractXMLField_1 = xTmp109_tExtractXMLField_1
									.valueOf(temp_tExtractXMLField_1);
						}
						if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isDefNull(node_tExtractXMLField_1)) {
							row7.W3CDTF = null;
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isEmpty(node_tExtractXMLField_1)) {
							row7.W3CDTF = "";
						} else if (resultIsNode_tExtractXMLField_1
								&& xml_api_tExtractXMLField_1
										.isMissing(node_tExtractXMLField_1)) {
							row7.W3CDTF = null;
						} else {
							row7.W3CDTF = str_tExtractXMLField_1;
						}
					}
				}

				XML_API_tExtractXMLField_1 xml_api_tExtractXMLField_1 = new XML_API_tExtractXMLField_1();
				class XML_NS_RMV_tExtractXMLField_1 {

					public void removeNamespace(org.dom4j.Document reader,
							org.dom4j.Document writer) {
						org.dom4j.Element elemReader = reader.getRootElement();
						org.dom4j.Element elemTo = writer.addElement(elemReader
								.getName());
						if (elemReader != null && elemReader.getText() != null
								&& !"".equals(elemReader.getText())) {
							elemTo.setText(elemReader.getText());
						}
						for (org.dom4j.Attribute attri : (List<org.dom4j.Attribute>) elemReader
								.attributes()) {
							elemTo.addAttribute(attri.getName(),
									attri.getText());
						}
						removeSubNamespace(elemReader, elemTo);
					}

					public void removeSubNamespace(org.dom4j.Element elemFrom,
							org.dom4j.Element elemTo) {
						for (org.dom4j.Element subFrom : (List<org.dom4j.Element>) elemFrom
								.elements()) {
							org.dom4j.Element tmpElemTo = elemTo
									.addElement(subFrom.getName());
							if (subFrom != null && subFrom.getText() != null
									&& !"".equals(subFrom.getText())) {
								tmpElemTo.setText(subFrom.getText());
							}
							for (org.dom4j.Attribute attri : (List<org.dom4j.Attribute>) subFrom
									.attributes()) {
								tmpElemTo.addAttribute(attri.getName(),
										attri.getText());
							}
							removeSubNamespace(subFrom, tmpElemTo);
						}
					}
				}
				XML_NS_RMV_tExtractXMLField_1 XML_ns_rmv_tExtractXMLField_1 = new XML_NS_RMV_tExtractXMLField_1();
				org.jaxen.NamespaceContext namespaceContext_tExtractXMLField_1 = new org.jaxen.NamespaceContext() {
					public String translateNamespacePrefixToUri(String prefix) {
						return "";// ignore prefix in xpath when evaluate
					}
				};

				/**
				 * [tExtractXMLField_1 begin ] stop
				 */

				/**
				 * [tFileInputRaw_3 begin ] start
				 */

				ok_Hash.put("tFileInputRaw_3", false);
				start_Hash.put("tFileInputRaw_3", System.currentTimeMillis());

				currentComponent = "tFileInputRaw_3";

				int tos_count_tFileInputRaw_3 = 0;

				class BytesLimit65535_tFileInputRaw_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileInputRaw_3().limitLog4jByte();

				try {
					String content_tFileInputRaw_3 = org.apache.commons.io.FileUtils
							.readFileToString(new java.io.File(
									((String) globalMap.get("curF"))), "UTF-8");
					row6.content = content_tFileInputRaw_3;
					globalMap.put("tFileInputRaw_3_FILENAME_PATH",
							((String) globalMap.get("curF")));
				} catch (java.io.IOException e_tFileInputRaw_3) {

					System.err.println(e_tFileInputRaw_3);
				}

				/**
				 * [tFileInputRaw_3 begin ] stop
				 */

				/**
				 * [tFileInputRaw_3 main ] start
				 */

				currentComponent = "tFileInputRaw_3";

				tos_count_tFileInputRaw_3++;

				/**
				 * [tFileInputRaw_3 main ] stop
				 */

				/**
				 * [tExtractXMLField_1 main ] start
				 */

				currentComponent = "tExtractXMLField_1";

				String xmlStr_tExtractXMLField_1 = null;
				routines.system.Document xmlDocument_tExtractXMLField_1 = null;
				if (row6.content != null) {
					xmlStr_tExtractXMLField_1 = row6.content;
				}
				if (xmlStr_tExtractXMLField_1 != null) {// C_01
					row7 = null;
					NameSpaceTool_tExtractXMLField_1 nsTool_tExtractXMLField_1 = new NameSpaceTool_tExtractXMLField_1();
					org.dom4j.io.SAXReader reader_tExtractXMLField_1 = new org.dom4j.io.SAXReader();

					org.dom4j.Document doc_tmp_tExtractXMLField_1 = org.dom4j.DocumentHelper
							.createDocument();
					XML_ns_rmv_tExtractXMLField_1.removeNamespace(

					reader_tExtractXMLField_1.read(new java.io.StringReader(
							xmlStr_tExtractXMLField_1))

					, doc_tmp_tExtractXMLField_1);

					org.dom4j.Document doc_tExtractXMLField_1 = null;
					java.util.HashMap xmlNameSpaceMap_tExtractXMLField_1 = null;
					org.dom4j.XPath x_tExtractXMLField_1 = null;
					java.util.List<org.dom4j.tree.AbstractNode> nodeList_tExtractXMLField_1 = null;
					String loopQuery_tExtractXMLField_1 = "/OAI-PMH/ListRecords/record";

					boolean isStructError_tExtractXMLField_1 = true;

					try {

						doc_tExtractXMLField_1 = doc_tmp_tExtractXMLField_1;

						nsTool_tExtractXMLField_1
								.countNSMap(doc_tExtractXMLField_1
										.getRootElement());
						xmlNameSpaceMap_tExtractXMLField_1 = nsTool_tExtractXMLField_1.xmlNameSpaceMap;

						x_tExtractXMLField_1 = doc_tExtractXMLField_1
								.createXPath(nsTool_tExtractXMLField_1
										.addDefaultNSPrefix(
												loopQuery_tExtractXMLField_1,
												loopQuery_tExtractXMLField_1));

						x_tExtractXMLField_1
								.setNamespaceURIs(xmlNameSpaceMap_tExtractXMLField_1);

						x_tExtractXMLField_1
								.setNamespaceContext(namespaceContext_tExtractXMLField_1);

						nodeList_tExtractXMLField_1 = (java.util.List<org.dom4j.tree.AbstractNode>) x_tExtractXMLField_1
								.selectNodes(doc_tExtractXMLField_1);

						isStructError_tExtractXMLField_1 = false;

					} catch (java.lang.Exception ex_tExtractXMLField_1) {
						System.err.println(ex_tExtractXMLField_1.getMessage());
					}

					org.dom4j.Node node_tExtractXMLField_1 = null;
					String str_tExtractXMLField_1 = "";
					boolean resultIsNode_tExtractXMLField_1 = true;
					for (int i_tExtractXMLField_1 = 0; isStructError_tExtractXMLField_1
							|| (nodeList_tExtractXMLField_1 != null && i_tExtractXMLField_1 < nodeList_tExtractXMLField_1
									.size()); i_tExtractXMLField_1++) {

						if (!isStructError_tExtractXMLField_1) {
							row7 = null;
							row7 = new row7Struct();

							org.dom4j.tree.AbstractNode temp_tExtractXMLField_1 = nodeList_tExtractXMLField_1
									.get(i_tExtractXMLField_1);

							nb_line_tExtractXMLField_1++;
							try {
								xml_api_tExtractXMLField_1.putExtractValue_0(
										row7, row6, xmlStr_tExtractXMLField_1,
										temp_tExtractXMLField_1,
										nsTool_tExtractXMLField_1,
										loopQuery_tExtractXMLField_1,
										xmlNameSpaceMap_tExtractXMLField_1,
										node_tExtractXMLField_1,
										str_tExtractXMLField_1,
										xml_api_tExtractXMLField_1,
										namespaceContext_tExtractXMLField_1);
								xml_api_tExtractXMLField_1.putExtractValue_1(
										row7, row6, xmlStr_tExtractXMLField_1,
										temp_tExtractXMLField_1,
										nsTool_tExtractXMLField_1,
										loopQuery_tExtractXMLField_1,
										xmlNameSpaceMap_tExtractXMLField_1,
										node_tExtractXMLField_1,
										str_tExtractXMLField_1,
										xml_api_tExtractXMLField_1,
										namespaceContext_tExtractXMLField_1);
							} catch (java.lang.Exception ex_tExtractXMLField_1) {
								System.err.println(ex_tExtractXMLField_1
										.getMessage());
								row7 = null;
							}
						}

						isStructError_tExtractXMLField_1 = false;

						globalMap.put("tExtractXMLField_1_NB_LINE",
								nb_line_tExtractXMLField_1);

						tos_count_tExtractXMLField_1++;

						/**
						 * [tExtractXMLField_1 main ] stop
						 */
						// Start of branch "row7"
						if (row7 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;
								Var.toDay = TalendDate
										.parseDate(
												"yyyy-MM-dd HH:mm:ss",
												TalendDate
														.getDate("CCYY-MM-DD hh:mm:ss"));// ###############################
								// ###############################
								// # Output tables

								NDLDATA = null;

								// # Output table : 'NDLDATA'
								NDLDATA_tmp.TITLE = StringHandling
										.TRIM(row7.TITLE);
								NDLDATA_tmp.SERIESTITLE = StringHandling
										.TRIM(row7.SERIESTITLE);
								NDLDATA_tmp.VOLUMETITLE = StringHandling
										.TRIM(row7.VOLUMETITLE);
								NDLDATA_tmp.ALTERNATIVE = StringHandling
										.TRIM(row7.ALTERNATIVE);
								NDLDATA_tmp.VOLUME = StringHandling
										.TRIM(row7.VOLUME);
								NDLDATA_tmp.CREATOR = StringHandling
										.TRIM(row7.CREATOR);
								NDLDATA_tmp.DIGIPUBLISHER = StringHandling
										.TRIM(row7.DIGIPUBLISHER);
								NDLDATA_tmp.PUBLICYEAR = StringHandling
										.TRIM(row7.PUBLICYEAR);
								NDLDATA_tmp.NDLC = StringHandling
										.TRIM(row7.NDLC);
								NDLDATA_tmp.NDC = StringHandling.TRIM(row7.NDC);
								NDLDATA_tmp.NDC8 = StringHandling
										.TRIM(row7.NDC8);
								NDLDATA_tmp.NDC9 = StringHandling
										.TRIM(row7.NDC9);
								NDLDATA_tmp.GHQSCAP = StringHandling
										.TRIM(row7.GHQSCAP);
								NDLDATA_tmp.UDC = StringHandling.TRIM(row7.UDC);
								NDLDATA_tmp.DDC = StringHandling.TRIM(row7.DDC);
								NDLDATA_tmp.NDLSH = row7.NDLSH;
								NDLDATA_tmp.PAGERANGE = row7.PAGERANGE;
								NDLDATA_tmp.ABSTRACT1 = row7.ABSTRACT1;
								NDLDATA_tmp.ABSTRACT2 = row7.ABSTRACT2;
								NDLDATA_tmp.MATERIALTYPE = ((row7.METARIALTYPE == null) || (""
										.equals(row7.METARIALTYPE))) ? "その他"
										: row7.METARIALTYPE;
								NDLDATA_tmp.MATERIALID = row7.MATERIALID;
								NDLDATA_tmp.IMTFORMAT = row7.IMTFORMAT;
								NDLDATA_tmp.PUBLISHER = row7.PUBLISHER;
								NDLDATA_tmp.LANGUAGE = row7.LANGUAGE;
								NDLDATA_tmp.ISOLANGUAGE = row7.ISOLANGUAGE;
								NDLDATA_tmp.EDITION = row7.EDITION;
								NDLDATA_tmp.PUBNAME = row7.PUBNAME;
								NDLDATA_tmp.PUBPLACECD = row7.PUBPLACECD;
								NDLDATA_tmp.PUBPLACENAME = row7.PUBPLACENAME;
								NDLDATA_tmp.PUBVOLUME = row7.PUBVOLUME;
								NDLDATA_tmp.PUBDATE = row7.PUBDATE;
								NDLDATA_tmp.TABLECONTENTS = row7.TABLECONTENTS;
								NDLDATA_tmp.PARTTITLE = row7.PARTTITLE;
								NDLDATA_tmp.NUMBER = row7.NUMBER;
								NDLDATA_tmp.SPATIAL = row7.SPATIAL;
								NDLDATA_tmp.DESCRIPTION = row7.DESCRIPTION;
								NDLDATA_tmp.EXTENT = row7.EXTENT;
								NDLDATA_tmp.PRICE = row7.PRICE;
								NDLDATA_tmp.SERIESCREATOR = row7.SERIESCREATOR;
								NDLDATA_tmp.JISX0402 = row7.JISX0402;
								NDLDATA_tmp.NCNO = row7.NCNO;
								NDLDATA_tmp.UTMNO = row7.UTMNO;
								NDLDATA_tmp.JPNO = row7.JPNO;
								NDLDATA_tmp.ISBN = row7.ISBN;
								NDLDATA_tmp.ISSN = row7.ISSN;
								NDLDATA_tmp.ISSNL = row7.ISSNL;
								NDLDATA_tmp.INCORRECTISSN = row7.INCORRECTISSN;
								NDLDATA_tmp.INCORRECTISSNL = row7.INCORRECTISSNL;
								NDLDATA_tmp.ISBNSET = row7.ISBNSET;
								NDLDATA_tmp.BRNO = row7.BRNO;
								NDLDATA_tmp.DOI = row7.DOI;
								NDLDATA_tmp.NDLBIDID = row7.NDLBIDID;
								NDLDATA_tmp.STANDARDNO = row7.STANDARDNO;
								NDLDATA_tmp.TOHANMARCNO = row7.TOHANMARCNO;
								NDLDATA_tmp.USMARCNO = row7.USMARCNO;
								NDLDATA_tmp.NSMARCNO = row7.NSMARCNO;
								NDLDATA_tmp.UKMARCNO = row7.UKMARCNO;
								NDLDATA_tmp.RIS502 = row7.RIS502;
								NDLDATA_tmp.OCLCNO = row7.OCLCNO;
								NDLDATA_tmp.RLINNO = row7.RLINNO;
								NDLDATA_tmp.KAKENHINO = row7.KAKENHINO;
								NDLDATA_tmp.TRNO = row7.TRNO;
								NDLDATA_tmp.GPOBIBNO = row7.GPOBIBNO;
								NDLDATA_tmp.NIIBIBNO = row7.NIIBIBNO;
								NDLDATA_tmp.UNDS = row7.UNDS;
								NDLDATA_tmp.UNSN = row7.UNSN;
								NDLDATA_tmp.CHECKSUM = row7.CHECKSUM;
								NDLDATA_tmp.INSERTTIME = row7.INSERTTIME;
								NDLDATA_tmp.CODE = row7.CODE;
								NDLDATA_tmp.CODE2 = row7.CODE2;
								NDLDATA_tmp.CODE3 = row7.CODE3;
								NDLDATA_tmp.CRTDATE = Var.toDay;
								NDLDATA_tmp.UPDDATETIME = null;
								NDLDATA_tmp.TITLETRANS = row7.TITLETRANS;
								NDLDATA_tmp.ALTERNATIVETRANS = row7.ALTERNATIVETRANS;
								NDLDATA_tmp.VOLUMETRANS = row7.VOLUMETRANS;
								NDLDATA_tmp.VOLUMETITLETRANS = row7.VOLUMETITLETRANS;
								NDLDATA_tmp.SERIESTITLETRANS = row7.SERIESTITLETRANS;
								NDLDATA_tmp.PARTTITLETRANS = row7.PARTTITLETRANS;
								NDLDATA_tmp.CREATORTRANS = row7.CREATORTRANS;
								NDLDATA_tmp.DATEDIGITIZED = row7.DATEDIGITIZED;
								NDLDATA_tmp.USCAR = row7.USCAR;
								NDLDATA_tmp.MCJ = row7.MCJ;
								NDLDATA_tmp.NDLBIBID = row7.NDLBIBID;
								NDLDATA_tmp.NDLJP = row7.NDLJP;
								NDLDATA_tmp.TRCMARCNO = row7.TRCMARCNO;
								NDLDATA_tmp.OPLMARCNO = row7.OPLMARCNO;
								NDLDATA_tmp.KNMARCNO = row7.KNMARCNO;
								NDLDATA_tmp.CODEN = row7.CODEN;
								NDLDATA_tmp.ISRN = row7.ISRN;
								NDLDATA_tmp.ISMN = row7.ISMN;
								NDLDATA_tmp.PBNO = row7.PBNO;
								NDLDATA_tmp.PLNO = row7.PLNO;
								NDLDATA_tmp.GPOCN = row7.GPOCN;
								NDLDATA_tmp.SUPTDOC = row7.SUPTDOC;
								NDLDATA_tmp.SICI = row7.SICI;
								NDLDATA_tmp.ICNO = row7.ICNO;
								NDLDATA_tmp.TEMPORAL = row7.TEMPORAL;
								NDLDATA_tmp.PERIOD = row7.PERIOD;
								NDLDATA_tmp.ACCESSRIGHTS = row7.ACCESSRIGHTS;
								NDLDATA_tmp.RIGHTS = row7.RIGHTS;
								NDLDATA_tmp.RIGHTSHOLDER = row7.RIGHTSHOLDER;
								NDLDATA_tmp.URI = StringHandling.TRIM(row7.URI);
								NDLDATA_tmp.NDC10 = row7.NDC10;
								NDLDATA_tmp.PARTCREATOR = row7.PARTCREATOR;
								NDLDATA_tmp.LCC = row7.LCC;
								NDLDATA_tmp.ErrorISBN = row7.ErrorISBN;
								NDLDATA_tmp.ISSUE = row7.ISSUE;
								NDLDATA_tmp.W3CDTF = row7.W3CDTF;
								NDLDATA = NDLDATA_tmp;
								// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */
							// Start of branch "NDLDATA"
							if (NDLDATA != null) {

								/**
								 * [tJavaRow_1 main ] start
								 */

								currentComponent = "tJavaRow_1";

								com.ibm.icu.text.Transliterator trans = com.ibm.icu.text.Transliterator
										.getInstance("Halfwidth-Fullwidth");
								// Code generated according to input schema and
								// output schema
								row8.TITLE = NDLDATA.TITLE != null ? trans
										.transliterate(NDLDATA.TITLE) : null;
								row8.SERIESTITLE = NDLDATA.SERIESTITLE;
								row8.VOLUMETITLE = NDLDATA.VOLUMETITLE;
								row8.ALTERNATIVE = NDLDATA.ALTERNATIVE;
								row8.VOLUME = NDLDATA.VOLUME;
								row8.CREATOR = NDLDATA.CREATOR != null ? trans
										.transliterate(NDLDATA.CREATOR) : null;
								row8.DIGIPUBLISHER = NDLDATA.DIGIPUBLISHER;
								row8.PUBLICYEAR = NDLDATA.PUBLICYEAR;
								row8.NDLC = NDLDATA.NDLC;
								row8.NDC = NDLDATA.NDC;
								row8.NDC8 = NDLDATA.NDC8;
								row8.NDC9 = NDLDATA.NDC9;
								row8.GHQSCAP = NDLDATA.GHQSCAP;
								row8.UDC = NDLDATA.UDC;
								row8.DDC = NDLDATA.DDC;
								row8.NDLSH = NDLDATA.NDLSH;
								row8.PAGERANGE = NDLDATA.PAGERANGE;
								row8.ABSTRACT1 = NDLDATA.ABSTRACT1;
								row8.ABSTRACT2 = NDLDATA.ABSTRACT2;
								row8.MATERIALTYPE = NDLDATA.MATERIALTYPE;
								row8.MATERIALID = NDLDATA.MATERIALID;
								row8.IMTFORMAT = NDLDATA.IMTFORMAT;
								row8.PUBLISHER = NDLDATA.PUBLISHER != null ? trans
										.transliterate(NDLDATA.PUBLISHER)
										: null;

								// System.out.println(NDLDATA.PUBLISHER);
								row8.LANGUAGE = NDLDATA.LANGUAGE;
								row8.ISOLANGUAGE = NDLDATA.ISOLANGUAGE;
								row8.EDITION = NDLDATA.EDITION;
								row8.PUBNAME = NDLDATA.PUBNAME;
								row8.PUBPLACECD = NDLDATA.PUBPLACECD;
								row8.PUBPLACENAME = NDLDATA.PUBPLACENAME;
								row8.PUBVOLUME = NDLDATA.PUBVOLUME;
								row8.PUBDATE = NDLDATA.PUBDATE;
								row8.TABLECONTENTS = NDLDATA.TABLECONTENTS;
								row8.PARTTITLE = NDLDATA.PARTTITLE;
								row8.NUMBER = NDLDATA.NUMBER;
								row8.SPATIAL = NDLDATA.SPATIAL;
								row8.DESCRIPTION = NDLDATA.DESCRIPTION;
								row8.EXTENT = NDLDATA.EXTENT;
								row8.PRICE = NDLDATA.PRICE;
								row8.SERIESCREATOR = NDLDATA.SERIESCREATOR;
								row8.JISX0402 = NDLDATA.JISX0402;
								row8.NCNO = NDLDATA.NCNO;
								row8.UTMNO = NDLDATA.UTMNO;
								row8.JPNO = NDLDATA.JPNO;

								row8.ISBN = GetISBN13.getISBN13(NDLDATA.ISBN);

								row8.ISSN = NDLDATA.ISSN;
								row8.ISSNL = NDLDATA.ISSNL;
								row8.INCORRECTISSN = NDLDATA.INCORRECTISSN;
								row8.INCORRECTISSNL = NDLDATA.INCORRECTISSNL;
								row8.ISBNSET = NDLDATA.ISBNSET;
								row8.BRNO = NDLDATA.BRNO;
								row8.DOI = NDLDATA.DOI;
								row8.NDLBIDID = NDLDATA.NDLBIDID;
								row8.STANDARDNO = NDLDATA.STANDARDNO;
								row8.TOHANMARCNO = NDLDATA.TOHANMARCNO;
								row8.USMARCNO = NDLDATA.USMARCNO;
								row8.NSMARCNO = NDLDATA.NSMARCNO;
								row8.UKMARCNO = NDLDATA.UKMARCNO;
								row8.RIS502 = NDLDATA.RIS502;
								row8.OCLCNO = NDLDATA.OCLCNO;
								row8.RLINNO = NDLDATA.RLINNO;
								row8.KAKENHINO = NDLDATA.KAKENHINO;
								row8.TRNO = NDLDATA.TRNO;
								row8.GPOBIBNO = NDLDATA.GPOBIBNO;
								row8.NIIBIBNO = NDLDATA.NIIBIBNO;
								row8.UNDS = NDLDATA.UNDS;
								row8.UNSN = NDLDATA.UNSN;
								row8.CHECKSUM = NDLDATA.CHECKSUM;
								row8.INSERTTIME = NDLDATA.INSERTTIME;
								// row8.CODE = NDLDATA.CODE;
								// row8.CODE2 = NDLDATA.CODE2;
								// row8.CODE3 = NDLDATA.CODE3;
								row8.CRTDATE = NDLDATA.CRTDATE;
								row8.UPDDATETIME = NDLDATA.UPDDATETIME;
								row8.TITLETRANS = NDLDATA.TITLETRANS;
								row8.ALTERNATIVETRANS = NDLDATA.ALTERNATIVETRANS;
								row8.VOLUMETRANS = NDLDATA.VOLUMETRANS;
								row8.VOLUMETITLETRANS = NDLDATA.VOLUMETITLETRANS;
								row8.SERIESTITLETRANS = NDLDATA.SERIESTITLETRANS;
								row8.PARTTITLETRANS = NDLDATA.PARTTITLETRANS;
								row8.CREATORTRANS = NDLDATA.CREATORTRANS;
								row8.DATEDIGITIZED = NDLDATA.DATEDIGITIZED;
								row8.USCAR = NDLDATA.USCAR;
								row8.MCJ = NDLDATA.MCJ;
								row8.NDLBIBID = NDLDATA.NDLBIBID;
								row8.NDLJP = NDLDATA.NDLJP;
								row8.TRCMARCNO = NDLDATA.TRCMARCNO;
								row8.OPLMARCNO = NDLDATA.OPLMARCNO;
								row8.KNMARCNO = NDLDATA.KNMARCNO;
								row8.CODEN = NDLDATA.CODEN;
								row8.ISRN = NDLDATA.ISRN;
								row8.ISMN = NDLDATA.ISMN;
								row8.PBNO = NDLDATA.PBNO;
								row8.PLNO = NDLDATA.PLNO;
								row8.GPOCN = NDLDATA.GPOCN;
								row8.SUPTDOC = NDLDATA.SUPTDOC;
								row8.SICI = NDLDATA.SICI;
								row8.ICNO = NDLDATA.ICNO;
								row8.TEMPORAL = NDLDATA.TEMPORAL;
								row8.PERIOD = NDLDATA.PERIOD;
								row8.ACCESSRIGHTS = NDLDATA.ACCESSRIGHTS;
								row8.RIGHTS = NDLDATA.RIGHTS;
								row8.RIGHTSHOLDER = NDLDATA.RIGHTSHOLDER;
								row8.URI = NDLDATA.URI;

								row8.NDC10 = NDLDATA.NDC10;
								row8.PARTCREATOR = NDLDATA.PARTCREATOR;
								row8.LCC = NDLDATA.LCC;
								row8.ErrorISBN = NDLDATA.ErrorISBN;
								row8.ISSUE = NDLDATA.ISSUE;
								row8.W3CDTF = NDLDATA.W3CDTF;

								nb_line_tJavaRow_1++;

								tos_count_tJavaRow_1++;

								/**
								 * [tJavaRow_1 main ] stop
								 */

								/**
								 * [tMysqlOutput_1 main ] start
								 */

								currentComponent = "tMysqlOutput_1";

								query_tMysqlOutput_1 = new StringBuffer("");
								whetherReject_tMysqlOutput_1 = false;
								if (row8.TITLE == null) {
									pstmt_tMysqlOutput_1.setNull(1,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(1,
											row8.TITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[0])
										.append(row8.TITLE == null ? "null"
												: "'" + row8.TITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[1]);
								if (row8.SERIESTITLE == null) {
									pstmt_tMysqlOutput_1.setNull(2,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(2,
											row8.SERIESTITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SERIESTITLE == null ? "null"
												: "'" + row8.SERIESTITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[2]);
								if (row8.VOLUMETITLE == null) {
									pstmt_tMysqlOutput_1.setNull(3,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(3,
											row8.VOLUMETITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUMETITLE == null ? "null"
												: "'" + row8.VOLUMETITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[3]);
								if (row8.ALTERNATIVE == null) {
									pstmt_tMysqlOutput_1.setNull(4,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(4,
											row8.ALTERNATIVE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ALTERNATIVE == null ? "null"
												: "'" + row8.ALTERNATIVE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[4]);
								if (row8.VOLUME == null) {
									pstmt_tMysqlOutput_1.setNull(5,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(5,
											row8.VOLUME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUME == null ? "null"
												: "'" + row8.VOLUME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[5]);
								if (row8.CREATOR == null) {
									pstmt_tMysqlOutput_1.setNull(6,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(6,
											row8.CREATOR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CREATOR == null ? "null"
												: "'" + row8.CREATOR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[6]);
								if (row8.DIGIPUBLISHER == null) {
									pstmt_tMysqlOutput_1.setNull(7,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(7,
											row8.DIGIPUBLISHER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DIGIPUBLISHER == null ? "null"
												: "'" + row8.DIGIPUBLISHER
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[7]);
								if (row8.PUBLICYEAR == null) {
									pstmt_tMysqlOutput_1.setNull(8,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(8,
											row8.PUBLICYEAR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBLICYEAR == null ? "null"
												: "'" + row8.PUBLICYEAR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[8]);
								if (row8.NDLC == null) {
									pstmt_tMysqlOutput_1.setNull(9,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1
											.setString(9, row8.NDLC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLC == null ? "null"
												: "'" + row8.NDLC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[9]);
								if (row8.NDC == null) {
									pstmt_tMysqlOutput_1.setNull(10,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1
											.setString(10, row8.NDC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC == null ? "null" : "'"
												+ row8.NDC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[10]);
								if (row8.NDC8 == null) {
									pstmt_tMysqlOutput_1.setNull(11,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(11,
											row8.NDC8);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC8 == null ? "null"
												: "'" + row8.NDC8 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[11]);
								if (row8.NDC9 == null) {
									pstmt_tMysqlOutput_1.setNull(12,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(12,
											row8.NDC9);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC9 == null ? "null"
												: "'" + row8.NDC9 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[12]);
								if (row8.GHQSCAP == null) {
									pstmt_tMysqlOutput_1.setNull(13,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(13,
											row8.GHQSCAP);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.GHQSCAP == null ? "null"
												: "'" + row8.GHQSCAP + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[13]);
								if (row8.UDC == null) {
									pstmt_tMysqlOutput_1.setNull(14,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1
											.setString(14, row8.UDC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UDC == null ? "null" : "'"
												+ row8.UDC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[14]);
								if (row8.DDC == null) {
									pstmt_tMysqlOutput_1.setNull(15,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1
											.setString(15, row8.DDC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DDC == null ? "null" : "'"
												+ row8.DDC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[15]);
								if (row8.NDLSH == null) {
									pstmt_tMysqlOutput_1.setNull(16,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(16,
											row8.NDLSH);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLSH == null ? "null"
												: "'" + row8.NDLSH + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[16]);
								if (row8.PAGERANGE == null) {
									pstmt_tMysqlOutput_1.setNull(17,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(17,
											row8.PAGERANGE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PAGERANGE == null ? "null"
												: "'" + row8.PAGERANGE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[17]);
								if (row8.ABSTRACT1 == null) {
									pstmt_tMysqlOutput_1.setNull(18,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(18,
											row8.ABSTRACT1);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ABSTRACT1 == null ? "null"
												: "'" + row8.ABSTRACT1 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[18]);
								if (row8.ABSTRACT2 == null) {
									pstmt_tMysqlOutput_1.setNull(19,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(19,
											row8.ABSTRACT2);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ABSTRACT2 == null ? "null"
												: "'" + row8.ABSTRACT2 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[19]);
								if (row8.MATERIALTYPE == null) {
									pstmt_tMysqlOutput_1.setNull(20,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(20,
											row8.MATERIALTYPE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.MATERIALTYPE == null ? "null"
												: "'" + row8.MATERIALTYPE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[20]);
								if (row8.MATERIALID == null) {
									pstmt_tMysqlOutput_1.setNull(21,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_1.setInt(21,
											row8.MATERIALID);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.MATERIALID == null ? "null"
												: String.valueOf(row8.MATERIALID))
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[21]);
								if (row8.IMTFORMAT == null) {
									pstmt_tMysqlOutput_1.setNull(22,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(22,
											row8.IMTFORMAT);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.IMTFORMAT == null ? "null"
												: "'" + row8.IMTFORMAT + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[22]);
								if (row8.PUBLISHER == null) {
									pstmt_tMysqlOutput_1.setNull(23,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(23,
											row8.PUBLISHER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBLISHER == null ? "null"
												: "'" + row8.PUBLISHER + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[23]);
								if (row8.LANGUAGE == null) {
									pstmt_tMysqlOutput_1.setNull(24,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(24,
											row8.LANGUAGE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.LANGUAGE == null ? "null"
												: "'" + row8.LANGUAGE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[24]);
								if (row8.ISOLANGUAGE == null) {
									pstmt_tMysqlOutput_1.setNull(25,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(25,
											row8.ISOLANGUAGE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISOLANGUAGE == null ? "null"
												: "'" + row8.ISOLANGUAGE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[25]);
								if (row8.EDITION == null) {
									pstmt_tMysqlOutput_1.setNull(26,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(26,
											row8.EDITION);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.EDITION == null ? "null"
												: "'" + row8.EDITION + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[26]);
								if (row8.PUBNAME == null) {
									pstmt_tMysqlOutput_1.setNull(27,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(27,
											row8.PUBNAME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBNAME == null ? "null"
												: "'" + row8.PUBNAME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[27]);
								if (row8.PUBPLACECD == null) {
									pstmt_tMysqlOutput_1.setNull(28,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(28,
											row8.PUBPLACECD);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBPLACECD == null ? "null"
												: "'" + row8.PUBPLACECD + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[28]);
								if (row8.PUBPLACENAME == null) {
									pstmt_tMysqlOutput_1.setNull(29,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(29,
											row8.PUBPLACENAME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBPLACENAME == null ? "null"
												: "'" + row8.PUBPLACENAME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[29]);
								if (row8.PUBVOLUME == null) {
									pstmt_tMysqlOutput_1.setNull(30,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(30,
											row8.PUBVOLUME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBVOLUME == null ? "null"
												: "'" + row8.PUBVOLUME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[30]);
								if (row8.PUBDATE == null) {
									pstmt_tMysqlOutput_1.setNull(31,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(31,
											row8.PUBDATE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBDATE == null ? "null"
												: "'" + row8.PUBDATE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[31]);
								if (row8.TABLECONTENTS == null) {
									pstmt_tMysqlOutput_1.setNull(32,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(32,
											row8.TABLECONTENTS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TABLECONTENTS == null ? "null"
												: "'" + row8.TABLECONTENTS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[32]);
								if (row8.PARTTITLE == null) {
									pstmt_tMysqlOutput_1.setNull(33,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(33,
											row8.PARTTITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PARTTITLE == null ? "null"
												: "'" + row8.PARTTITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[33]);
								if (row8.NUMBER == null) {
									pstmt_tMysqlOutput_1.setNull(34,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(34,
											row8.NUMBER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NUMBER == null ? "null"
												: "'" + row8.NUMBER + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[34]);
								if (row8.SPATIAL == null) {
									pstmt_tMysqlOutput_1.setNull(35,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(35,
											row8.SPATIAL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SPATIAL == null ? "null"
												: "'" + row8.SPATIAL + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[35]);
								if (row8.DESCRIPTION == null) {
									pstmt_tMysqlOutput_1.setNull(36,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(36,
											row8.DESCRIPTION);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DESCRIPTION == null ? "null"
												: "'" + row8.DESCRIPTION + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[36]);
								if (row8.EXTENT == null) {
									pstmt_tMysqlOutput_1.setNull(37,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(37,
											row8.EXTENT);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.EXTENT == null ? "null"
												: "'" + row8.EXTENT + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[37]);
								if (row8.PRICE == null) {
									pstmt_tMysqlOutput_1.setNull(38,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(38,
											row8.PRICE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PRICE == null ? "null"
												: "'" + row8.PRICE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[38]);
								if (row8.SERIESCREATOR == null) {
									pstmt_tMysqlOutput_1.setNull(39,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(39,
											row8.SERIESCREATOR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SERIESCREATOR == null ? "null"
												: "'" + row8.SERIESCREATOR
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[39]);
								if (row8.JISX0402 == null) {
									pstmt_tMysqlOutput_1.setNull(40,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(40,
											row8.JISX0402);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.JISX0402 == null ? "null"
												: "'" + row8.JISX0402 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[40]);
								if (row8.NCNO == null) {
									pstmt_tMysqlOutput_1.setNull(41,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(41,
											row8.NCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NCNO == null ? "null"
												: "'" + row8.NCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[41]);
								if (row8.UTMNO == null) {
									pstmt_tMysqlOutput_1.setNull(42,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(42,
											row8.UTMNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UTMNO == null ? "null"
												: "'" + row8.UTMNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[42]);
								if (row8.JPNO == null) {
									pstmt_tMysqlOutput_1.setNull(43,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(43,
											row8.JPNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.JPNO == null ? "null"
												: "'" + row8.JPNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[43]);
								if (row8.ISBN == null) {
									pstmt_tMysqlOutput_1.setNull(44,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(44,
											row8.ISBN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISBN == null ? "null"
												: "'" + row8.ISBN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[44]);
								if (row8.ISSN == null) {
									pstmt_tMysqlOutput_1.setNull(45,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(45,
											row8.ISSN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISSN == null ? "null"
												: "'" + row8.ISSN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[45]);
								if (row8.ISSNL == null) {
									pstmt_tMysqlOutput_1.setNull(46,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(46,
											row8.ISSNL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISSNL == null ? "null"
												: "'" + row8.ISSNL + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[46]);
								if (row8.INCORRECTISSN == null) {
									pstmt_tMysqlOutput_1.setNull(47,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(47,
											row8.INCORRECTISSN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.INCORRECTISSN == null ? "null"
												: "'" + row8.INCORRECTISSN
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[47]);
								if (row8.INCORRECTISSNL == null) {
									pstmt_tMysqlOutput_1.setNull(48,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(48,
											row8.INCORRECTISSNL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.INCORRECTISSNL == null ? "null"
												: "'" + row8.INCORRECTISSNL
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[48]);
								if (row8.ISBNSET == null) {
									pstmt_tMysqlOutput_1.setNull(49,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(49,
											row8.ISBNSET);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISBNSET == null ? "null"
												: "'" + row8.ISBNSET + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[49]);
								if (row8.BRNO == null) {
									pstmt_tMysqlOutput_1.setNull(50,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(50,
											row8.BRNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.BRNO == null ? "null"
												: "'" + row8.BRNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[50]);
								if (row8.DOI == null) {
									pstmt_tMysqlOutput_1.setNull(51,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1
											.setString(51, row8.DOI);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DOI == null ? "null" : "'"
												+ row8.DOI + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[51]);
								if (row8.NDLBIDID == null) {
									pstmt_tMysqlOutput_1.setNull(52,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(52,
											row8.NDLBIDID);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLBIDID == null ? "null"
												: "'" + row8.NDLBIDID + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[52]);
								if (row8.STANDARDNO == null) {
									pstmt_tMysqlOutput_1.setNull(53,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(53,
											row8.STANDARDNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.STANDARDNO == null ? "null"
												: "'" + row8.STANDARDNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[53]);
								if (row8.TOHANMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(54,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(54,
											row8.TOHANMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TOHANMARCNO == null ? "null"
												: "'" + row8.TOHANMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[54]);
								if (row8.USMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(55,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(55,
											row8.USMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.USMARCNO == null ? "null"
												: "'" + row8.USMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[55]);
								if (row8.NSMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(56,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(56,
											row8.NSMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NSMARCNO == null ? "null"
												: "'" + row8.NSMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[56]);
								if (row8.UKMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(57,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(57,
											row8.UKMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UKMARCNO == null ? "null"
												: "'" + row8.UKMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[57]);
								if (row8.RIS502 == null) {
									pstmt_tMysqlOutput_1.setNull(58,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(58,
											row8.RIS502);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RIS502 == null ? "null"
												: "'" + row8.RIS502 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[58]);
								if (row8.OCLCNO == null) {
									pstmt_tMysqlOutput_1.setNull(59,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(59,
											row8.OCLCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.OCLCNO == null ? "null"
												: "'" + row8.OCLCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[59]);
								if (row8.RLINNO == null) {
									pstmt_tMysqlOutput_1.setNull(60,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(60,
											row8.RLINNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RLINNO == null ? "null"
												: "'" + row8.RLINNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[60]);
								if (row8.KAKENHINO == null) {
									pstmt_tMysqlOutput_1.setNull(61,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(61,
											row8.KAKENHINO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.KAKENHINO == null ? "null"
												: "'" + row8.KAKENHINO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[61]);
								if (row8.TRNO == null) {
									pstmt_tMysqlOutput_1.setNull(62,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(62,
											row8.TRNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TRNO == null ? "null"
												: "'" + row8.TRNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[62]);
								if (row8.GPOBIBNO == null) {
									pstmt_tMysqlOutput_1.setNull(63,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(63,
											row8.GPOBIBNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.GPOBIBNO == null ? "null"
												: "'" + row8.GPOBIBNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[63]);
								if (row8.NIIBIBNO == null) {
									pstmt_tMysqlOutput_1.setNull(64,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(64,
											row8.NIIBIBNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NIIBIBNO == null ? "null"
												: "'" + row8.NIIBIBNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[64]);
								if (row8.UNDS == null) {
									pstmt_tMysqlOutput_1.setNull(65,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(65,
											row8.UNDS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UNDS == null ? "null"
												: "'" + row8.UNDS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[65]);
								if (row8.UNSN == null) {
									pstmt_tMysqlOutput_1.setNull(66,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(66,
											row8.UNSN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UNSN == null ? "null"
												: "'" + row8.UNSN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[66]);
								if (row8.CHECKSUM == null) {
									pstmt_tMysqlOutput_1.setNull(67,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(67,
											row8.CHECKSUM);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CHECKSUM == null ? "null"
												: "'" + row8.CHECKSUM + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[67]);
								if (row8.INSERTTIME == null) {
									pstmt_tMysqlOutput_1.setNull(68,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(68,
											row8.INSERTTIME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.INSERTTIME == null ? "null"
												: "'" + row8.INSERTTIME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[68]);
								if (row8.CRTDATE != null) {
									date_tMysqlOutput_1 = row8.CRTDATE
											.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmt_tMysqlOutput_1.setString(69,
												"0000-00-00 00:00:00");
									} else {
										pstmt_tMysqlOutput_1.setTimestamp(69,
												new java.sql.Timestamp(
														date_tMysqlOutput_1));
									}
								} else {
									pstmt_tMysqlOutput_1.setNull(69,
											java.sql.Types.DATE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CRTDATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row8.CRTDATE)
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[69]);
								if (row8.UPDDATETIME != null) {
									date_tMysqlOutput_1 = row8.UPDDATETIME
											.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmt_tMysqlOutput_1.setString(70,
												"0000-00-00 00:00:00");
									} else {
										pstmt_tMysqlOutput_1.setTimestamp(70,
												new java.sql.Timestamp(
														date_tMysqlOutput_1));
									}
								} else {
									pstmt_tMysqlOutput_1.setNull(70,
											java.sql.Types.DATE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UPDDATETIME == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row8.UPDDATETIME)
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[70]);
								if (row8.TITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(71,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(71,
											row8.TITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TITLETRANS == null ? "null"
												: "'" + row8.TITLETRANS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[71]);
								if (row8.ALTERNATIVETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(72,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(72,
											row8.ALTERNATIVETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ALTERNATIVETRANS == null ? "null"
												: "'" + row8.ALTERNATIVETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[72]);
								if (row8.VOLUMETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(73,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(73,
											row8.VOLUMETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUMETRANS == null ? "null"
												: "'" + row8.VOLUMETRANS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[73]);
								if (row8.VOLUMETITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(74,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(74,
											row8.VOLUMETITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUMETITLETRANS == null ? "null"
												: "'" + row8.VOLUMETITLETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[74]);
								if (row8.SERIESTITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(75,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(75,
											row8.SERIESTITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SERIESTITLETRANS == null ? "null"
												: "'" + row8.SERIESTITLETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[75]);
								if (row8.PARTTITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(76,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(76,
											row8.PARTTITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PARTTITLETRANS == null ? "null"
												: "'" + row8.PARTTITLETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[76]);
								if (row8.CREATORTRANS == null) {
									pstmt_tMysqlOutput_1.setNull(77,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(77,
											row8.CREATORTRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CREATORTRANS == null ? "null"
												: "'" + row8.CREATORTRANS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[77]);
								if (row8.DATEDIGITIZED == null) {
									pstmt_tMysqlOutput_1.setNull(78,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(78,
											row8.DATEDIGITIZED);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DATEDIGITIZED == null ? "null"
												: "'" + row8.DATEDIGITIZED
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[78]);
								if (row8.USCAR == null) {
									pstmt_tMysqlOutput_1.setNull(79,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(79,
											row8.USCAR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.USCAR == null ? "null"
												: "'" + row8.USCAR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[79]);
								if (row8.MCJ == null) {
									pstmt_tMysqlOutput_1.setNull(80,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1
											.setString(80, row8.MCJ);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.MCJ == null ? "null" : "'"
												+ row8.MCJ + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[80]);
								if (row8.NDLBIBID == null) {
									pstmt_tMysqlOutput_1.setNull(81,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(81,
											row8.NDLBIBID);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLBIBID == null ? "null"
												: "'" + row8.NDLBIBID + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[81]);
								if (row8.NDLJP == null) {
									pstmt_tMysqlOutput_1.setNull(82,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(82,
											row8.NDLJP);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLJP == null ? "null"
												: "'" + row8.NDLJP + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[82]);
								if (row8.TRCMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(83,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(83,
											row8.TRCMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TRCMARCNO == null ? "null"
												: "'" + row8.TRCMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[83]);
								if (row8.OPLMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(84,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(84,
											row8.OPLMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.OPLMARCNO == null ? "null"
												: "'" + row8.OPLMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[84]);
								if (row8.KNMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(85,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(85,
											row8.KNMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.KNMARCNO == null ? "null"
												: "'" + row8.KNMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[85]);
								if (row8.CODEN == null) {
									pstmt_tMysqlOutput_1.setNull(86,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(86,
											row8.CODEN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CODEN == null ? "null"
												: "'" + row8.CODEN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[86]);
								if (row8.ISRN == null) {
									pstmt_tMysqlOutput_1.setNull(87,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(87,
											row8.ISRN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISRN == null ? "null"
												: "'" + row8.ISRN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[87]);
								if (row8.ISMN == null) {
									pstmt_tMysqlOutput_1.setNull(88,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(88,
											row8.ISMN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISMN == null ? "null"
												: "'" + row8.ISMN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[88]);
								if (row8.PBNO == null) {
									pstmt_tMysqlOutput_1.setNull(89,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(89,
											row8.PBNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PBNO == null ? "null"
												: "'" + row8.PBNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[89]);
								if (row8.PLNO == null) {
									pstmt_tMysqlOutput_1.setNull(90,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(90,
											row8.PLNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PLNO == null ? "null"
												: "'" + row8.PLNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[90]);
								if (row8.GPOCN == null) {
									pstmt_tMysqlOutput_1.setNull(91,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(91,
											row8.GPOCN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.GPOCN == null ? "null"
												: "'" + row8.GPOCN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[91]);
								if (row8.SUPTDOC == null) {
									pstmt_tMysqlOutput_1.setNull(92,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(92,
											row8.SUPTDOC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SUPTDOC == null ? "null"
												: "'" + row8.SUPTDOC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[92]);
								if (row8.SICI == null) {
									pstmt_tMysqlOutput_1.setNull(93,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(93,
											row8.SICI);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SICI == null ? "null"
												: "'" + row8.SICI + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[93]);
								if (row8.ICNO == null) {
									pstmt_tMysqlOutput_1.setNull(94,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(94,
											row8.ICNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ICNO == null ? "null"
												: "'" + row8.ICNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[94]);
								if (row8.TEMPORAL == null) {
									pstmt_tMysqlOutput_1.setNull(95,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(95,
											row8.TEMPORAL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TEMPORAL == null ? "null"
												: "'" + row8.TEMPORAL + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[95]);
								if (row8.PERIOD == null) {
									pstmt_tMysqlOutput_1.setNull(96,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(96,
											row8.PERIOD);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PERIOD == null ? "null"
												: "'" + row8.PERIOD + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[96]);
								if (row8.ACCESSRIGHTS == null) {
									pstmt_tMysqlOutput_1.setNull(97,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(97,
											row8.ACCESSRIGHTS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ACCESSRIGHTS == null ? "null"
												: "'" + row8.ACCESSRIGHTS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[97]);
								if (row8.RIGHTS == null) {
									pstmt_tMysqlOutput_1.setNull(98,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(98,
											row8.RIGHTS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RIGHTS == null ? "null"
												: "'" + row8.RIGHTS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[98]);
								if (row8.RIGHTSHOLDER == null) {
									pstmt_tMysqlOutput_1.setNull(99,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(99,
											row8.RIGHTSHOLDER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RIGHTSHOLDER == null ? "null"
												: "'" + row8.RIGHTSHOLDER + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[99]);
								if (row8.URI == null) {
									pstmt_tMysqlOutput_1.setNull(100,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(100,
											row8.URI);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.URI == null ? "null" : "'"
												+ row8.URI + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[100]);
								if (row8.NDC10 == null) {
									pstmt_tMysqlOutput_1.setNull(101,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(101,
											row8.NDC10);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC10 == null ? "null"
												: "'" + row8.NDC10 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[101]);
								if (row8.PARTCREATOR == null) {
									pstmt_tMysqlOutput_1.setNull(102,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(102,
											row8.PARTCREATOR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PARTCREATOR == null ? "null"
												: "'" + row8.PARTCREATOR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[102]);
								if (row8.LCC == null) {
									pstmt_tMysqlOutput_1.setNull(103,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(103,
											row8.LCC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.LCC == null ? "null" : "'"
												+ row8.LCC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[103]);
								if (row8.ErrorISBN == null) {
									pstmt_tMysqlOutput_1.setNull(104,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(104,
											row8.ErrorISBN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ErrorISBN == null ? "null"
												: "'" + row8.ErrorISBN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[104]);
								if (row8.ISSUE == null) {
									pstmt_tMysqlOutput_1.setNull(105,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(105,
											row8.ISSUE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISSUE == null ? "null"
												: "'" + row8.ISSUE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[105]);
								if (row8.W3CDTF == null) {
									pstmt_tMysqlOutput_1.setNull(106,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(106,
											row8.W3CDTF);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.W3CDTF == null ? "null"
												: "'" + row8.W3CDTF + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[106]);
								if (row8.TITLE == null) {
									pstmt_tMysqlOutput_1.setNull(107,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(107,
											row8.TITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TITLE == null ? "null"
												: "'" + row8.TITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[107]);
								if (row8.SERIESTITLE == null) {
									pstmt_tMysqlOutput_1.setNull(108,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(108,
											row8.SERIESTITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SERIESTITLE == null ? "null"
												: "'" + row8.SERIESTITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[108]);
								if (row8.VOLUMETITLE == null) {
									pstmt_tMysqlOutput_1.setNull(109,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(109,
											row8.VOLUMETITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUMETITLE == null ? "null"
												: "'" + row8.VOLUMETITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[109]);
								if (row8.ALTERNATIVE == null) {
									pstmt_tMysqlOutput_1.setNull(110,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(110,
											row8.ALTERNATIVE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ALTERNATIVE == null ? "null"
												: "'" + row8.ALTERNATIVE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[110]);
								if (row8.VOLUME == null) {
									pstmt_tMysqlOutput_1.setNull(111,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(111,
											row8.VOLUME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUME == null ? "null"
												: "'" + row8.VOLUME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[111]);
								if (row8.CREATOR == null) {
									pstmt_tMysqlOutput_1.setNull(112,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(112,
											row8.CREATOR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CREATOR == null ? "null"
												: "'" + row8.CREATOR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[112]);
								if (row8.DIGIPUBLISHER == null) {
									pstmt_tMysqlOutput_1.setNull(113,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(113,
											row8.DIGIPUBLISHER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DIGIPUBLISHER == null ? "null"
												: "'" + row8.DIGIPUBLISHER
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[113]);
								if (row8.PUBLICYEAR == null) {
									pstmt_tMysqlOutput_1.setNull(114,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(114,
											row8.PUBLICYEAR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBLICYEAR == null ? "null"
												: "'" + row8.PUBLICYEAR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[114]);
								if (row8.NDLC == null) {
									pstmt_tMysqlOutput_1.setNull(115,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(115,
											row8.NDLC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLC == null ? "null"
												: "'" + row8.NDLC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[115]);
								if (row8.NDC == null) {
									pstmt_tMysqlOutput_1.setNull(116,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(116,
											row8.NDC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC == null ? "null" : "'"
												+ row8.NDC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[116]);
								if (row8.NDC8 == null) {
									pstmt_tMysqlOutput_1.setNull(117,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(117,
											row8.NDC8);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC8 == null ? "null"
												: "'" + row8.NDC8 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[117]);
								if (row8.NDC9 == null) {
									pstmt_tMysqlOutput_1.setNull(118,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(118,
											row8.NDC9);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC9 == null ? "null"
												: "'" + row8.NDC9 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[118]);
								if (row8.GHQSCAP == null) {
									pstmt_tMysqlOutput_1.setNull(119,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(119,
											row8.GHQSCAP);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.GHQSCAP == null ? "null"
												: "'" + row8.GHQSCAP + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[119]);
								if (row8.UDC == null) {
									pstmt_tMysqlOutput_1.setNull(120,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(120,
											row8.UDC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UDC == null ? "null" : "'"
												+ row8.UDC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[120]);
								if (row8.DDC == null) {
									pstmt_tMysqlOutput_1.setNull(121,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(121,
											row8.DDC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DDC == null ? "null" : "'"
												+ row8.DDC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[121]);
								if (row8.NDLSH == null) {
									pstmt_tMysqlOutput_1.setNull(122,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(122,
											row8.NDLSH);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLSH == null ? "null"
												: "'" + row8.NDLSH + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[122]);
								if (row8.PAGERANGE == null) {
									pstmt_tMysqlOutput_1.setNull(123,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(123,
											row8.PAGERANGE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PAGERANGE == null ? "null"
												: "'" + row8.PAGERANGE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[123]);
								if (row8.ABSTRACT1 == null) {
									pstmt_tMysqlOutput_1.setNull(124,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(124,
											row8.ABSTRACT1);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ABSTRACT1 == null ? "null"
												: "'" + row8.ABSTRACT1 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[124]);
								if (row8.ABSTRACT2 == null) {
									pstmt_tMysqlOutput_1.setNull(125,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(125,
											row8.ABSTRACT2);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ABSTRACT2 == null ? "null"
												: "'" + row8.ABSTRACT2 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[125]);
								if (row8.MATERIALTYPE == null) {
									pstmt_tMysqlOutput_1.setNull(126,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(126,
											row8.MATERIALTYPE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.MATERIALTYPE == null ? "null"
												: "'" + row8.MATERIALTYPE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[126]);
								if (row8.MATERIALID == null) {
									pstmt_tMysqlOutput_1.setNull(127,
											java.sql.Types.INTEGER);
								} else {
									pstmt_tMysqlOutput_1.setInt(127,
											row8.MATERIALID);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.MATERIALID == null ? "null"
												: String.valueOf(row8.MATERIALID))
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[127]);
								if (row8.IMTFORMAT == null) {
									pstmt_tMysqlOutput_1.setNull(128,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(128,
											row8.IMTFORMAT);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.IMTFORMAT == null ? "null"
												: "'" + row8.IMTFORMAT + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[128]);
								if (row8.PUBLISHER == null) {
									pstmt_tMysqlOutput_1.setNull(129,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(129,
											row8.PUBLISHER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBLISHER == null ? "null"
												: "'" + row8.PUBLISHER + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[129]);
								if (row8.LANGUAGE == null) {
									pstmt_tMysqlOutput_1.setNull(130,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(130,
											row8.LANGUAGE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.LANGUAGE == null ? "null"
												: "'" + row8.LANGUAGE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[130]);
								if (row8.ISOLANGUAGE == null) {
									pstmt_tMysqlOutput_1.setNull(131,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(131,
											row8.ISOLANGUAGE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISOLANGUAGE == null ? "null"
												: "'" + row8.ISOLANGUAGE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[131]);
								if (row8.EDITION == null) {
									pstmt_tMysqlOutput_1.setNull(132,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(132,
											row8.EDITION);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.EDITION == null ? "null"
												: "'" + row8.EDITION + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[132]);
								if (row8.PUBNAME == null) {
									pstmt_tMysqlOutput_1.setNull(133,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(133,
											row8.PUBNAME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBNAME == null ? "null"
												: "'" + row8.PUBNAME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[133]);
								if (row8.PUBPLACECD == null) {
									pstmt_tMysqlOutput_1.setNull(134,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(134,
											row8.PUBPLACECD);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBPLACECD == null ? "null"
												: "'" + row8.PUBPLACECD + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[134]);
								if (row8.PUBPLACENAME == null) {
									pstmt_tMysqlOutput_1.setNull(135,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(135,
											row8.PUBPLACENAME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBPLACENAME == null ? "null"
												: "'" + row8.PUBPLACENAME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[135]);
								if (row8.PUBVOLUME == null) {
									pstmt_tMysqlOutput_1.setNull(136,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(136,
											row8.PUBVOLUME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBVOLUME == null ? "null"
												: "'" + row8.PUBVOLUME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[136]);
								if (row8.PUBDATE == null) {
									pstmt_tMysqlOutput_1.setNull(137,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(137,
											row8.PUBDATE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PUBDATE == null ? "null"
												: "'" + row8.PUBDATE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[137]);
								if (row8.TABLECONTENTS == null) {
									pstmt_tMysqlOutput_1.setNull(138,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(138,
											row8.TABLECONTENTS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TABLECONTENTS == null ? "null"
												: "'" + row8.TABLECONTENTS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[138]);
								if (row8.PARTTITLE == null) {
									pstmt_tMysqlOutput_1.setNull(139,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(139,
											row8.PARTTITLE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PARTTITLE == null ? "null"
												: "'" + row8.PARTTITLE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[139]);
								if (row8.NUMBER == null) {
									pstmt_tMysqlOutput_1.setNull(140,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(140,
											row8.NUMBER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NUMBER == null ? "null"
												: "'" + row8.NUMBER + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[140]);
								if (row8.SPATIAL == null) {
									pstmt_tMysqlOutput_1.setNull(141,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(141,
											row8.SPATIAL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SPATIAL == null ? "null"
												: "'" + row8.SPATIAL + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[141]);
								if (row8.DESCRIPTION == null) {
									pstmt_tMysqlOutput_1.setNull(142,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(142,
											row8.DESCRIPTION);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DESCRIPTION == null ? "null"
												: "'" + row8.DESCRIPTION + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[142]);
								if (row8.EXTENT == null) {
									pstmt_tMysqlOutput_1.setNull(143,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(143,
											row8.EXTENT);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.EXTENT == null ? "null"
												: "'" + row8.EXTENT + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[143]);
								if (row8.PRICE == null) {
									pstmt_tMysqlOutput_1.setNull(144,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(144,
											row8.PRICE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PRICE == null ? "null"
												: "'" + row8.PRICE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[144]);
								if (row8.SERIESCREATOR == null) {
									pstmt_tMysqlOutput_1.setNull(145,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(145,
											row8.SERIESCREATOR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SERIESCREATOR == null ? "null"
												: "'" + row8.SERIESCREATOR
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[145]);
								if (row8.JISX0402 == null) {
									pstmt_tMysqlOutput_1.setNull(146,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(146,
											row8.JISX0402);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.JISX0402 == null ? "null"
												: "'" + row8.JISX0402 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[146]);
								if (row8.NCNO == null) {
									pstmt_tMysqlOutput_1.setNull(147,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(147,
											row8.NCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NCNO == null ? "null"
												: "'" + row8.NCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[147]);
								if (row8.UTMNO == null) {
									pstmt_tMysqlOutput_1.setNull(148,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(148,
											row8.UTMNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UTMNO == null ? "null"
												: "'" + row8.UTMNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[148]);
								if (row8.JPNO == null) {
									pstmt_tMysqlOutput_1.setNull(149,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(149,
											row8.JPNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.JPNO == null ? "null"
												: "'" + row8.JPNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[149]);
								if (row8.ISBN == null) {
									pstmt_tMysqlOutput_1.setNull(150,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(150,
											row8.ISBN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISBN == null ? "null"
												: "'" + row8.ISBN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[150]);
								if (row8.ISSN == null) {
									pstmt_tMysqlOutput_1.setNull(151,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(151,
											row8.ISSN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISSN == null ? "null"
												: "'" + row8.ISSN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[151]);
								if (row8.ISSNL == null) {
									pstmt_tMysqlOutput_1.setNull(152,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(152,
											row8.ISSNL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISSNL == null ? "null"
												: "'" + row8.ISSNL + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[152]);
								if (row8.INCORRECTISSN == null) {
									pstmt_tMysqlOutput_1.setNull(153,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(153,
											row8.INCORRECTISSN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.INCORRECTISSN == null ? "null"
												: "'" + row8.INCORRECTISSN
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[153]);
								if (row8.INCORRECTISSNL == null) {
									pstmt_tMysqlOutput_1.setNull(154,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(154,
											row8.INCORRECTISSNL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.INCORRECTISSNL == null ? "null"
												: "'" + row8.INCORRECTISSNL
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[154]);
								if (row8.ISBNSET == null) {
									pstmt_tMysqlOutput_1.setNull(155,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(155,
											row8.ISBNSET);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISBNSET == null ? "null"
												: "'" + row8.ISBNSET + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[155]);
								if (row8.BRNO == null) {
									pstmt_tMysqlOutput_1.setNull(156,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(156,
											row8.BRNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.BRNO == null ? "null"
												: "'" + row8.BRNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[156]);
								if (row8.DOI == null) {
									pstmt_tMysqlOutput_1.setNull(157,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(157,
											row8.DOI);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DOI == null ? "null" : "'"
												+ row8.DOI + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[157]);
								if (row8.NDLBIDID == null) {
									pstmt_tMysqlOutput_1.setNull(158,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(158,
											row8.NDLBIDID);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLBIDID == null ? "null"
												: "'" + row8.NDLBIDID + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[158]);
								if (row8.STANDARDNO == null) {
									pstmt_tMysqlOutput_1.setNull(159,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(159,
											row8.STANDARDNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.STANDARDNO == null ? "null"
												: "'" + row8.STANDARDNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[159]);
								if (row8.TOHANMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(160,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(160,
											row8.TOHANMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TOHANMARCNO == null ? "null"
												: "'" + row8.TOHANMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[160]);
								if (row8.USMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(161,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(161,
											row8.USMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.USMARCNO == null ? "null"
												: "'" + row8.USMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[161]);
								if (row8.NSMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(162,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(162,
											row8.NSMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NSMARCNO == null ? "null"
												: "'" + row8.NSMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[162]);
								if (row8.UKMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(163,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(163,
											row8.UKMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UKMARCNO == null ? "null"
												: "'" + row8.UKMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[163]);
								if (row8.RIS502 == null) {
									pstmt_tMysqlOutput_1.setNull(164,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(164,
											row8.RIS502);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RIS502 == null ? "null"
												: "'" + row8.RIS502 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[164]);
								if (row8.OCLCNO == null) {
									pstmt_tMysqlOutput_1.setNull(165,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(165,
											row8.OCLCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.OCLCNO == null ? "null"
												: "'" + row8.OCLCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[165]);
								if (row8.RLINNO == null) {
									pstmt_tMysqlOutput_1.setNull(166,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(166,
											row8.RLINNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RLINNO == null ? "null"
												: "'" + row8.RLINNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[166]);
								if (row8.KAKENHINO == null) {
									pstmt_tMysqlOutput_1.setNull(167,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(167,
											row8.KAKENHINO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.KAKENHINO == null ? "null"
												: "'" + row8.KAKENHINO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[167]);
								if (row8.TRNO == null) {
									pstmt_tMysqlOutput_1.setNull(168,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(168,
											row8.TRNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TRNO == null ? "null"
												: "'" + row8.TRNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[168]);
								if (row8.GPOBIBNO == null) {
									pstmt_tMysqlOutput_1.setNull(169,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(169,
											row8.GPOBIBNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.GPOBIBNO == null ? "null"
												: "'" + row8.GPOBIBNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[169]);
								if (row8.NIIBIBNO == null) {
									pstmt_tMysqlOutput_1.setNull(170,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(170,
											row8.NIIBIBNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NIIBIBNO == null ? "null"
												: "'" + row8.NIIBIBNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[170]);
								if (row8.UNDS == null) {
									pstmt_tMysqlOutput_1.setNull(171,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(171,
											row8.UNDS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UNDS == null ? "null"
												: "'" + row8.UNDS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[171]);
								if (row8.UNSN == null) {
									pstmt_tMysqlOutput_1.setNull(172,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(172,
											row8.UNSN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UNSN == null ? "null"
												: "'" + row8.UNSN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[172]);
								if (row8.CHECKSUM == null) {
									pstmt_tMysqlOutput_1.setNull(173,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(173,
											row8.CHECKSUM);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CHECKSUM == null ? "null"
												: "'" + row8.CHECKSUM + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[173]);
								if (row8.INSERTTIME == null) {
									pstmt_tMysqlOutput_1.setNull(174,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(174,
											row8.INSERTTIME);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.INSERTTIME == null ? "null"
												: "'" + row8.INSERTTIME + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[174]);
								if (row8.CRTDATE != null) {
									date_tMysqlOutput_1 = row8.CRTDATE
											.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmt_tMysqlOutput_1.setString(175,
												"0000-00-00 00:00:00");
									} else {
										pstmt_tMysqlOutput_1.setTimestamp(175,
												new java.sql.Timestamp(
														date_tMysqlOutput_1));
									}
								} else {
									pstmt_tMysqlOutput_1.setNull(175,
											java.sql.Types.DATE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CRTDATE == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row8.CRTDATE)
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[175]);
								if (row8.UPDDATETIME != null) {
									date_tMysqlOutput_1 = row8.UPDDATETIME
											.getTime();
									if (date_tMysqlOutput_1 < year1_tMysqlOutput_1
											|| date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
										pstmt_tMysqlOutput_1.setString(176,
												"0000-00-00 00:00:00");
									} else {
										pstmt_tMysqlOutput_1.setTimestamp(176,
												new java.sql.Timestamp(
														date_tMysqlOutput_1));
									}
								} else {
									pstmt_tMysqlOutput_1.setNull(176,
											java.sql.Types.DATE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.UPDDATETIME == null ? "null"
												: "'"
														+ new java.text.SimpleDateFormat(
																"dd-MM-yyyy")
																.format(row8.UPDDATETIME)
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[176]);
								if (row8.TITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(177,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(177,
											row8.TITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TITLETRANS == null ? "null"
												: "'" + row8.TITLETRANS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[177]);
								if (row8.ALTERNATIVETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(178,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(178,
											row8.ALTERNATIVETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ALTERNATIVETRANS == null ? "null"
												: "'" + row8.ALTERNATIVETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[178]);
								if (row8.VOLUMETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(179,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(179,
											row8.VOLUMETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUMETRANS == null ? "null"
												: "'" + row8.VOLUMETRANS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[179]);
								if (row8.VOLUMETITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(180,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(180,
											row8.VOLUMETITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.VOLUMETITLETRANS == null ? "null"
												: "'" + row8.VOLUMETITLETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[180]);
								if (row8.SERIESTITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(181,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(181,
											row8.SERIESTITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SERIESTITLETRANS == null ? "null"
												: "'" + row8.SERIESTITLETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[181]);
								if (row8.PARTTITLETRANS == null) {
									pstmt_tMysqlOutput_1.setNull(182,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(182,
											row8.PARTTITLETRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PARTTITLETRANS == null ? "null"
												: "'" + row8.PARTTITLETRANS
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[182]);
								if (row8.CREATORTRANS == null) {
									pstmt_tMysqlOutput_1.setNull(183,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(183,
											row8.CREATORTRANS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CREATORTRANS == null ? "null"
												: "'" + row8.CREATORTRANS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[183]);
								if (row8.DATEDIGITIZED == null) {
									pstmt_tMysqlOutput_1.setNull(184,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(184,
											row8.DATEDIGITIZED);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.DATEDIGITIZED == null ? "null"
												: "'" + row8.DATEDIGITIZED
														+ "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[184]);
								if (row8.USCAR == null) {
									pstmt_tMysqlOutput_1.setNull(185,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(185,
											row8.USCAR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.USCAR == null ? "null"
												: "'" + row8.USCAR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[185]);
								if (row8.MCJ == null) {
									pstmt_tMysqlOutput_1.setNull(186,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(186,
											row8.MCJ);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.MCJ == null ? "null" : "'"
												+ row8.MCJ + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[186]);
								if (row8.NDLBIBID == null) {
									pstmt_tMysqlOutput_1.setNull(187,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(187,
											row8.NDLBIBID);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLBIBID == null ? "null"
												: "'" + row8.NDLBIBID + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[187]);
								if (row8.NDLJP == null) {
									pstmt_tMysqlOutput_1.setNull(188,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(188,
											row8.NDLJP);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDLJP == null ? "null"
												: "'" + row8.NDLJP + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[188]);
								if (row8.TRCMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(189,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(189,
											row8.TRCMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TRCMARCNO == null ? "null"
												: "'" + row8.TRCMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[189]);
								if (row8.OPLMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(190,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(190,
											row8.OPLMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.OPLMARCNO == null ? "null"
												: "'" + row8.OPLMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[190]);
								if (row8.KNMARCNO == null) {
									pstmt_tMysqlOutput_1.setNull(191,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(191,
											row8.KNMARCNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.KNMARCNO == null ? "null"
												: "'" + row8.KNMARCNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[191]);
								if (row8.CODEN == null) {
									pstmt_tMysqlOutput_1.setNull(192,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(192,
											row8.CODEN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.CODEN == null ? "null"
												: "'" + row8.CODEN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[192]);
								if (row8.ISRN == null) {
									pstmt_tMysqlOutput_1.setNull(193,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(193,
											row8.ISRN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISRN == null ? "null"
												: "'" + row8.ISRN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[193]);
								if (row8.ISMN == null) {
									pstmt_tMysqlOutput_1.setNull(194,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(194,
											row8.ISMN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISMN == null ? "null"
												: "'" + row8.ISMN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[194]);
								if (row8.PBNO == null) {
									pstmt_tMysqlOutput_1.setNull(195,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(195,
											row8.PBNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PBNO == null ? "null"
												: "'" + row8.PBNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[195]);
								if (row8.PLNO == null) {
									pstmt_tMysqlOutput_1.setNull(196,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(196,
											row8.PLNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PLNO == null ? "null"
												: "'" + row8.PLNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[196]);
								if (row8.GPOCN == null) {
									pstmt_tMysqlOutput_1.setNull(197,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(197,
											row8.GPOCN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.GPOCN == null ? "null"
												: "'" + row8.GPOCN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[197]);
								if (row8.SUPTDOC == null) {
									pstmt_tMysqlOutput_1.setNull(198,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(198,
											row8.SUPTDOC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SUPTDOC == null ? "null"
												: "'" + row8.SUPTDOC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[198]);
								if (row8.SICI == null) {
									pstmt_tMysqlOutput_1.setNull(199,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(199,
											row8.SICI);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.SICI == null ? "null"
												: "'" + row8.SICI + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[199]);
								if (row8.ICNO == null) {
									pstmt_tMysqlOutput_1.setNull(200,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(200,
											row8.ICNO);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ICNO == null ? "null"
												: "'" + row8.ICNO + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[200]);
								if (row8.TEMPORAL == null) {
									pstmt_tMysqlOutput_1.setNull(201,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(201,
											row8.TEMPORAL);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.TEMPORAL == null ? "null"
												: "'" + row8.TEMPORAL + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[201]);
								if (row8.PERIOD == null) {
									pstmt_tMysqlOutput_1.setNull(202,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(202,
											row8.PERIOD);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PERIOD == null ? "null"
												: "'" + row8.PERIOD + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[202]);
								if (row8.ACCESSRIGHTS == null) {
									pstmt_tMysqlOutput_1.setNull(203,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(203,
											row8.ACCESSRIGHTS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ACCESSRIGHTS == null ? "null"
												: "'" + row8.ACCESSRIGHTS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[203]);
								if (row8.RIGHTS == null) {
									pstmt_tMysqlOutput_1.setNull(204,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(204,
											row8.RIGHTS);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RIGHTS == null ? "null"
												: "'" + row8.RIGHTS + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[204]);
								if (row8.RIGHTSHOLDER == null) {
									pstmt_tMysqlOutput_1.setNull(205,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(205,
											row8.RIGHTSHOLDER);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.RIGHTSHOLDER == null ? "null"
												: "'" + row8.RIGHTSHOLDER + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[205]);
								if (row8.NDC10 == null) {
									pstmt_tMysqlOutput_1.setNull(206,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(206,
											row8.NDC10);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.NDC10 == null ? "null"
												: "'" + row8.NDC10 + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[206]);
								if (row8.PARTCREATOR == null) {
									pstmt_tMysqlOutput_1.setNull(207,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(207,
											row8.PARTCREATOR);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.PARTCREATOR == null ? "null"
												: "'" + row8.PARTCREATOR + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[207]);
								if (row8.LCC == null) {
									pstmt_tMysqlOutput_1.setNull(208,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(208,
											row8.LCC);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.LCC == null ? "null" : "'"
												+ row8.LCC + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[208]);
								if (row8.ErrorISBN == null) {
									pstmt_tMysqlOutput_1.setNull(209,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(209,
											row8.ErrorISBN);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ErrorISBN == null ? "null"
												: "'" + row8.ErrorISBN + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[209]);
								if (row8.ISSUE == null) {
									pstmt_tMysqlOutput_1.setNull(210,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(210,
											row8.ISSUE);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.ISSUE == null ? "null"
												: "'" + row8.ISSUE + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[210]);
								if (row8.W3CDTF == null) {
									pstmt_tMysqlOutput_1.setNull(211,
											java.sql.Types.VARCHAR);
								} else {
									pstmt_tMysqlOutput_1.setString(211,
											row8.W3CDTF);
								}

								query_tMysqlOutput_1 = query_tMysqlOutput_1
										.append(row8.W3CDTF == null ? "null"
												: "'" + row8.W3CDTF + "'")
										.append(insertIgnoreSQLSplits_tMysqlOutput_1[211]);
								globalMap.put("tMysqlOutput_1_QUERY",
										query_tMysqlOutput_1.toString().trim());
								int count_on_duplicate_key_tMysqlOutput_1 = 0;
								try {
									count_on_duplicate_key_tMysqlOutput_1 = pstmt_tMysqlOutput_1
											.executeUpdate();
								} catch (java.lang.Exception e) {
									whetherReject_tMysqlOutput_1 = true;
									System.err.print(e.getMessage());
								}
								if (count_on_duplicate_key_tMysqlOutput_1 == 1) {
									insertedCount_tMysqlOutput_1 += count_on_duplicate_key_tMysqlOutput_1;
								} else {
									insertedCount_tMysqlOutput_1 += 1;
									updatedCount_tMysqlOutput_1 += count_on_duplicate_key_tMysqlOutput_1 - 1;
								}
								if (!whetherReject_tMysqlOutput_1) {
								}

								tos_count_tMysqlOutput_1++;

								/**
								 * [tMysqlOutput_1 main ] stop
								 */

							} // End of branch "NDLDATA"

						} // End of branch "row7"

						// end for
					}

				} // C_01

				/**
				 * [tFileInputRaw_3 end ] start
				 */

				currentComponent = "tFileInputRaw_3";

				ok_Hash.put("tFileInputRaw_3", true);
				end_Hash.put("tFileInputRaw_3", System.currentTimeMillis());

				/**
				 * [tFileInputRaw_3 end ] stop
				 */

				/**
				 * [tExtractXMLField_1 end ] start
				 */

				currentComponent = "tExtractXMLField_1";

				globalMap.put("tExtractXMLField_1_NB_LINE",
						nb_line_tExtractXMLField_1);

				ok_Hash.put("tExtractXMLField_1", true);
				end_Hash.put("tExtractXMLField_1", System.currentTimeMillis());

				/**
				 * [tExtractXMLField_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tJavaRow_1 end ] start
				 */

				currentComponent = "tJavaRow_1";

				globalMap.put("tJavaRow_1_NB_LINE", nb_line_tJavaRow_1);

				ok_Hash.put("tJavaRow_1", true);
				end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				/**
				 * [tJavaRow_1 end ] stop
				 */

				/**
				 * [tMysqlOutput_1 end ] start
				 */

				currentComponent = "tMysqlOutput_1";

				if (pstmt_tMysqlOutput_1 != null) {

					pstmt_tMysqlOutput_1.close();

				}

				nb_line_deleted_tMysqlOutput_1 = nb_line_deleted_tMysqlOutput_1
						+ deletedCount_tMysqlOutput_1;
				nb_line_update_tMysqlOutput_1 = nb_line_update_tMysqlOutput_1
						+ updatedCount_tMysqlOutput_1;
				nb_line_inserted_tMysqlOutput_1 = nb_line_inserted_tMysqlOutput_1
						+ insertedCount_tMysqlOutput_1;
				nb_line_rejected_tMysqlOutput_1 = nb_line_rejected_tMysqlOutput_1
						+ rejectedCount_tMysqlOutput_1;

				globalMap.put("tMysqlOutput_1_NB_LINE", nb_line_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_1);
				globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_1);

				ok_Hash.put("tMysqlOutput_1", true);
				end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());

				tMysqlSP_1Process(globalMap);
				tFileDelete_2Process(globalMap);

				/**
				 * [tMysqlOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputRaw_3 finally ] start
				 */

				currentComponent = "tFileInputRaw_3";

				/**
				 * [tFileInputRaw_3 finally ] stop
				 */

				/**
				 * [tExtractXMLField_1 finally ] start
				 */

				currentComponent = "tExtractXMLField_1";

				/**
				 * [tExtractXMLField_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tJavaRow_1 finally ] start
				 */

				currentComponent = "tJavaRow_1";

				/**
				 * [tJavaRow_1 finally ] stop
				 */

				/**
				 * [tMysqlOutput_1 finally ] start
				 */

				currentComponent = "tMysqlOutput_1";

				/**
				 * [tMysqlOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputRaw_3_SUBPROCESS_STATE", 1);
	}

	public void tMysqlSP_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlSP_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlSP_1 begin ] start
				 */

				ok_Hash.put("tMysqlSP_1", false);
				start_Hash.put("tMysqlSP_1", System.currentTimeMillis());

				currentComponent = "tMysqlSP_1";

				int tos_count_tMysqlSP_1 = 0;

				class BytesLimit65535_tMysqlSP_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMysqlSP_1().limitLog4jByte();

				java.sql.Connection connection_tMysqlSP_1 = null;
				connection_tMysqlSP_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				java.sql.CallableStatement statement_tMysqlSP_1 = connection_tMysqlSP_1
						.prepareCall("{call " + "CopyData" + "()}");

				java.sql.Date tmpDate_tMysqlSP_1;
				String tmpString_tMysqlSP_1;

				/**
				 * [tMysqlSP_1 begin ] stop
				 */

				/**
				 * [tMysqlSP_1 main ] start
				 */

				currentComponent = "tMysqlSP_1";

				statement_tMysqlSP_1.execute();

				tos_count_tMysqlSP_1++;

				/**
				 * [tMysqlSP_1 main ] stop
				 */

				/**
				 * [tMysqlSP_1 end ] start
				 */

				currentComponent = "tMysqlSP_1";

				statement_tMysqlSP_1.close();

				ok_Hash.put("tMysqlSP_1", true);
				end_Hash.put("tMysqlSP_1", System.currentTimeMillis());

				/**
				 * [tMysqlSP_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlSP_1 finally ] start
				 */

				currentComponent = "tMysqlSP_1";

				/**
				 * [tMysqlSP_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlSP_1_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_2Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_2 begin ] start
				 */

				ok_Hash.put("tFileDelete_2", false);
				start_Hash.put("tFileDelete_2", System.currentTimeMillis());

				currentComponent = "tFileDelete_2";

				int tos_count_tFileDelete_2 = 0;

				class BytesLimit65535_tFileDelete_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileDelete_2().limitLog4jByte();

				/**
				 * [tFileDelete_2 begin ] stop
				 */

				/**
				 * [tFileDelete_2 main ] start
				 */

				currentComponent = "tFileDelete_2";

				class DeleteFoldertFileDelete_2 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_2 = new java.io.File(
						((String) globalMap.get("curRaw")));
				if (file_tFileDelete_2.exists() && file_tFileDelete_2.isFile()) {
					if (file_tFileDelete_2.delete()) {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_2_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_2_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_2_DELETE_PATH",
						((String) globalMap.get("curRaw")));

				tos_count_tFileDelete_2++;

				/**
				 * [tFileDelete_2 main ] stop
				 */

				/**
				 * [tFileDelete_2 end ] start
				 */

				currentComponent = "tFileDelete_2";

				ok_Hash.put("tFileDelete_2", true);
				end_Hash.put("tFileDelete_2", System.currentTimeMillis());

				tFileDelete_3Process(globalMap);

				/**
				 * [tFileDelete_2 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_2 finally ] start
				 */

				currentComponent = "tFileDelete_2";

				/**
				 * [tFileDelete_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_2_SUBPROCESS_STATE", 1);
	}

	public void tFileDelete_3Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tFileDelete_3 begin ] start
				 */

				ok_Hash.put("tFileDelete_3", false);
				start_Hash.put("tFileDelete_3", System.currentTimeMillis());

				currentComponent = "tFileDelete_3";

				int tos_count_tFileDelete_3 = 0;

				class BytesLimit65535_tFileDelete_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFileDelete_3().limitLog4jByte();

				/**
				 * [tFileDelete_3 begin ] stop
				 */

				/**
				 * [tFileDelete_3 main ] start
				 */

				currentComponent = "tFileDelete_3";

				class DeleteFoldertFileDelete_3 {
					/**
					 * delete all the sub-files in 'file'
					 * 
					 * @param file
					 */
					public boolean delete(java.io.File file) {
						java.io.File[] files = file.listFiles();
						for (int i = 0; i < files.length; i++) {
							if (files[i].isFile()) {
								files[i].delete();
							} else if (files[i].isDirectory()) {
								if (!files[i].delete()) {
									delete(files[i]);
								}
							}
						}
						deleteDirectory(file);
						return file.delete();
					}

					/**
					 * delete all the sub-folders in 'file'
					 * 
					 * @param file
					 */
					private void deleteDirectory(java.io.File file) {
						java.io.File[] filed = file.listFiles();
						for (int i = 0; i < filed.length; i++) {
							if (filed[i].isDirectory()) {
								deleteDirectory(filed[i]);
							}
							filed[i].delete();
						}
					}

				}
				java.io.File file_tFileDelete_3 = new java.io.File(
						((String) globalMap.get("curF")));
				if (file_tFileDelete_3.exists() && file_tFileDelete_3.isFile()) {
					if (file_tFileDelete_3.delete()) {
						globalMap.put("tFileDelete_3_CURRENT_STATUS",
								"File deleted.");
					} else {
						globalMap.put("tFileDelete_3_CURRENT_STATUS",
								"No file deleted.");
					}
				} else {
					globalMap.put("tFileDelete_3_CURRENT_STATUS",
							"File does not exist or is invalid.");
				}
				globalMap.put("tFileDelete_3_DELETE_PATH",
						((String) globalMap.get("curF")));

				tos_count_tFileDelete_3++;

				/**
				 * [tFileDelete_3 main ] stop
				 */

				/**
				 * [tFileDelete_3 end ] start
				 */

				currentComponent = "tFileDelete_3";

				ok_Hash.put("tFileDelete_3", true);
				end_Hash.put("tFileDelete_3", System.currentTimeMillis());

				/**
				 * [tFileDelete_3 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFileDelete_3 finally ] start
				 */

				currentComponent = "tFileDelete_3";

				/**
				 * [tFileDelete_3 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileDelete_3_SUBPROCESS_STATE", 1);
	}

	public static class out2Struct implements
			routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String msg;

		public String getMsg() {
			return this.msg;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String event;

		public String getEvent() {
			return this.event;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.msg = readString(dis);

					this.code = readInteger(dis);

					this.moment = readDate(dis);

					this.event = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.msg, dos);

				// Integer

				writeInteger(this.code, dos);

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.event, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("msg=" + msg);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",moment=" + String.valueOf(moment));
			sb.append(",event=" + event);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements
			routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_PROJECTNDL_CRAWLER_DATA = new byte[0];
		static byte[] commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[0];

		public String msg;

		public String getMsg() {
			return this.msg;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String event;

		public String getEvent() {
			return this.event;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_PROJECTNDL_CRAWLER_DATA.length) {
					if (length < 1024
							&& commonByteArray_PROJECTNDL_CRAWLER_DATA.length == 0) {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[1024];
					} else {
						commonByteArray_PROJECTNDL_CRAWLER_DATA = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_PROJECTNDL_CRAWLER_DATA, 0,
						length);
				strReturn = new String(commonByteArray_PROJECTNDL_CRAWLER_DATA,
						0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_PROJECTNDL_CRAWLER_DATA) {

				try {

					int length = 0;

					this.msg = readString(dis);

					this.code = readInteger(dis);

					this.moment = readDate(dis);

					this.event = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.msg, dos);

				// Integer

				writeInteger(this.code, dos);

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.event, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("msg=" + msg);
			sb.append(",code=" + String.valueOf(code));
			sb.append(",moment=" + String.valueOf(moment));
			sb.append(",event=" + event);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFixedFlowInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row13Struct row13 = new row13Struct();
				out2Struct out2 = new out2Struct();

				/**
				 * [tMysqlOutput_2 begin ] start
				 */

				ok_Hash.put("tMysqlOutput_2", false);
				start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				currentComponent = "tMysqlOutput_2";

				int tos_count_tMysqlOutput_2 = 0;

				class BytesLimit65535_tMysqlOutput_2 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMysqlOutput_2().limitLog4jByte();

				int nb_line_tMysqlOutput_2 = 0;
				int nb_line_update_tMysqlOutput_2 = 0;
				int nb_line_inserted_tMysqlOutput_2 = 0;
				int nb_line_deleted_tMysqlOutput_2 = 0;
				int nb_line_rejected_tMysqlOutput_2 = 0;

				int deletedCount_tMysqlOutput_2 = 0;
				int updatedCount_tMysqlOutput_2 = 0;
				int insertedCount_tMysqlOutput_2 = 0;

				int rejectedCount_tMysqlOutput_2 = 0;

				String tableName_tMysqlOutput_2 = "LOG";
				boolean whetherReject_tMysqlOutput_2 = false;

				java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar
						.getInstance();
				calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime()
						.getTime();
				calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2
						.getTime().getTime();
				long date_tMysqlOutput_2;

				java.sql.Connection conn_tMysqlOutput_2 = null;
				conn_tMysqlOutput_2 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				int count_tMysqlOutput_2 = 0;

				String insert_tMysqlOutput_2 = "INSERT INTO `"
						+ "LOG"
						+ "` (`MESSAGE`,`CATEGORY`,`CRTDATE`,`LOGEVENT`) VALUES (?,?,?,?)";
				int batchSize_tMysqlOutput_2 = 100;
				int batchSizeCounter_tMysqlOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2
						.prepareStatement(insert_tMysqlOutput_2);

				/**
				 * [tMysqlOutput_2 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				int tos_count_tMap_3 = 0;

				class BytesLimit65535_tMap_3 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMap_3().limitLog4jByte();

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
				// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tFixedFlowInput_1 begin ] start
				 */

				ok_Hash.put("tFixedFlowInput_1", false);
				start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				currentComponent = "tFixedFlowInput_1";

				int tos_count_tFixedFlowInput_1 = 0;

				class BytesLimit65535_tFixedFlowInput_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tFixedFlowInput_1().limitLog4jByte();

				for (int i_tFixedFlowInput_1 = 0; i_tFixedFlowInput_1 < 1; i_tFixedFlowInput_1++) {

					row13.msg = "「" + context.realUrl
							+ "」を取得しました、レスポンスコード：200, OK";

					row13.code = 1;

					row13.moment = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",
							TalendDate.getDate("CCYY-MM-DD hh:mm:ss"));

					row13.event = "APIレスポンス";

					/**
					 * [tFixedFlowInput_1 begin ] stop
					 */

					/**
					 * [tFixedFlowInput_1 main ] start
					 */

					currentComponent = "tFixedFlowInput_1";

					tos_count_tFixedFlowInput_1++;

					/**
					 * [tFixedFlowInput_1 main ] stop
					 */

					/**
					 * [tMap_3 main ] start
					 */

					currentComponent = "tMap_3";

					boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_3 = false;
					boolean mainRowRejected_tMap_3 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
						// ###############################
						// # Output tables

						out2 = null;

						// # Output table : 'out2'
						out2_tmp.msg = row13.msg;
						out2_tmp.code = row13.code;
						out2_tmp.moment = row13.moment;
						out2_tmp.event = row13.event;
						out2 = out2_tmp;
						// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_3 = false;

					tos_count_tMap_3++;

					/**
					 * [tMap_3 main ] stop
					 */
					// Start of branch "out2"
					if (out2 != null) {

						/**
						 * [tMysqlOutput_2 main ] start
						 */

						currentComponent = "tMysqlOutput_2";

						whetherReject_tMysqlOutput_2 = false;
						if (out2.msg == null) {
							pstmt_tMysqlOutput_2.setNull(1,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_2.setString(1, out2.msg);
						}

						if (out2.code == null) {
							pstmt_tMysqlOutput_2.setNull(2,
									java.sql.Types.INTEGER);
						} else {
							pstmt_tMysqlOutput_2.setInt(2, out2.code);
						}

						if (out2.moment != null) {
							date_tMysqlOutput_2 = out2.moment.getTime();
							if (date_tMysqlOutput_2 < year1_tMysqlOutput_2
									|| date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
								pstmt_tMysqlOutput_2.setString(3,
										"0000-00-00 00:00:00");
							} else {
								pstmt_tMysqlOutput_2.setTimestamp(3,
										new java.sql.Timestamp(
												date_tMysqlOutput_2));
							}
						} else {
							pstmt_tMysqlOutput_2
									.setNull(3, java.sql.Types.DATE);
						}

						if (out2.event == null) {
							pstmt_tMysqlOutput_2.setNull(4,
									java.sql.Types.VARCHAR);
						} else {
							pstmt_tMysqlOutput_2.setString(4, out2.event);
						}

						pstmt_tMysqlOutput_2.addBatch();
						nb_line_tMysqlOutput_2++;

						batchSizeCounter_tMysqlOutput_2++;
						if (batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
							try {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
										.executeBatch()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: 1);
								}
								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								int countSum_tMysqlOutput_2 = 0;
								for (int countEach_tMysqlOutput_2 : e
										.getUpdateCounts()) {
									countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
											: countEach_tMysqlOutput_2);
								}
								insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tMysqlOutput_2 = 0;
						}

						tos_count_tMysqlOutput_2++;

						/**
						 * [tMysqlOutput_2 main ] stop
						 */

					} // End of branch "out2"

					/**
					 * [tFixedFlowInput_1 end ] start
					 */

					currentComponent = "tFixedFlowInput_1";

				}
				globalMap.put("tFixedFlowInput_1_NB_LINE", 1);

				ok_Hash.put("tFixedFlowInput_1", true);
				end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());

				/**
				 * [tFixedFlowInput_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tMysqlOutput_2 end ] start
				 */

				currentComponent = "tMysqlOutput_2";

				try {
					if (batchSizeCounter_tMysqlOutput_2 != 0) {
						int countSum_tMysqlOutput_2 = 0;

						for (int countEach_tMysqlOutput_2 : pstmt_tMysqlOutput_2
								.executeBatch()) {
							countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
									: 1);
						}

						insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tMysqlOutput_2 = 0;
					for (int countEach_tMysqlOutput_2 : e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0
								: countEach_tMysqlOutput_2);
					}

					insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;

					globalMap.put(currentComponent + "_ERROR_MESSAGE",
							e.getMessage());
					System.err.println(e.getMessage());

				}
				batchSizeCounter_tMysqlOutput_2 = 0;

				if (pstmt_tMysqlOutput_2 != null) {

					pstmt_tMysqlOutput_2.close();

				}

				nb_line_deleted_tMysqlOutput_2 = nb_line_deleted_tMysqlOutput_2
						+ deletedCount_tMysqlOutput_2;
				nb_line_update_tMysqlOutput_2 = nb_line_update_tMysqlOutput_2
						+ updatedCount_tMysqlOutput_2;
				nb_line_inserted_tMysqlOutput_2 = nb_line_inserted_tMysqlOutput_2
						+ insertedCount_tMysqlOutput_2;
				nb_line_rejected_tMysqlOutput_2 = nb_line_rejected_tMysqlOutput_2
						+ rejectedCount_tMysqlOutput_2;

				globalMap.put("tMysqlOutput_2_NB_LINE", nb_line_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",
						nb_line_update_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",
						nb_line_inserted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",
						nb_line_deleted_tMysqlOutput_2);
				globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED",
						nb_line_rejected_tMysqlOutput_2);

				ok_Hash.put("tMysqlOutput_2", true);
				end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());

				/**
				 * [tMysqlOutput_2 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tFixedFlowInput_1 finally ] start
				 */

				currentComponent = "tFixedFlowInput_1";

				/**
				 * [tFixedFlowInput_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tMysqlOutput_2 finally ] start
				 */

				currentComponent = "tMysqlOutput_2";

				/**
				 * [tMysqlOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_4Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_4 begin ] start
				 */

				ok_Hash.put("tJava_4", false);
				start_Hash.put("tJava_4", System.currentTimeMillis());

				currentComponent = "tJava_4";

				int tos_count_tJava_4 = 0;

				class BytesLimit65535_tJava_4 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_4().limitLog4jByte();

				Date untilPlusOne = TalendDate
						.addDate(context.until, 1, "yyyy");

				// System.out.println(untilPlusOne);
				Integer step = 0;

				if ((context.until).compareTo(context.to) == 0) {
					step = 1;
				} else {
					if ((untilPlusOne).compareTo(context.to) > 0) {
						step = 2;
					} else {
						step = 3;
					}
				}

				/**
				 * [tJava_4 begin ] stop
				 */

				/**
				 * [tJava_4 main ] start
				 */

				currentComponent = "tJava_4";

				tos_count_tJava_4++;

				/**
				 * [tJava_4 main ] stop
				 */

				/**
				 * [tJava_4 end ] start
				 */

				currentComponent = "tJava_4";

				ok_Hash.put("tJava_4", true);
				end_Hash.put("tJava_4", System.currentTimeMillis());

				if (// (context.until).compareTo(context.to) == 0
				step == 1) {

					tJava_7Process(globalMap);
				}

				if (// ((context.until).compareTo(context.to) != 0) &&
					// ((untilPlusOne).compareTo(context.to) > 0)
				step == 2) {

					tJava_5Process(globalMap);
				}

				if (// ((context.until).compareTo(context.to) != 0) &&
					// ((untilPlusOne).compareTo(context.to) <= 0)
				step == 3) {

					tJava_6Process(globalMap);
				}

				/**
				 * [tJava_4 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_4 finally ] start
				 */

				currentComponent = "tJava_4";

				/**
				 * [tJava_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}

	public void tJava_7Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_7 begin ] start
				 */

				ok_Hash.put("tJava_7", false);
				start_Hash.put("tJava_7", System.currentTimeMillis());

				currentComponent = "tJava_7";

				int tos_count_tJava_7 = 0;

				class BytesLimit65535_tJava_7 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_7().limitLog4jByte();

				/**
				 * [tJava_7 begin ] stop
				 */

				/**
				 * [tJava_7 main ] start
				 */

				currentComponent = "tJava_7";

				tos_count_tJava_7++;

				/**
				 * [tJava_7 main ] stop
				 */

				/**
				 * [tJava_7 end ] start
				 */

				currentComponent = "tJava_7";

				ok_Hash.put("tJava_7", true);
				end_Hash.put("tJava_7", System.currentTimeMillis());

				if ((Integer) globalMap.get("currPos") == (Integer) globalMap
						.get("lastPos")) {

					tSendMail_1Process(globalMap);
				}

				if ((Integer) globalMap.get("currPos") != (Integer) globalMap
						.get("lastPos")) {

					tJava_12Process(globalMap);
				}

				/**
				 * [tJava_7 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_7 finally ] start
				 */

				currentComponent = "tJava_7";

				/**
				 * [tJava_7 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}

	public void tSendMail_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tSendMail_1 begin ] start
				 */

				ok_Hash.put("tSendMail_1", false);
				start_Hash.put("tSendMail_1", System.currentTimeMillis());

				currentComponent = "tSendMail_1";

				int tos_count_tSendMail_1 = 0;

				class BytesLimit65535_tSendMail_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tSendMail_1().limitLog4jByte();

				/**
				 * [tSendMail_1 begin ] stop
				 */

				/**
				 * [tSendMail_1 main ] start
				 */

				currentComponent = "tSendMail_1";

				String smtpHost_tSendMail_1 = "smtp.gmail.com";
				String smtpPort_tSendMail_1 = "465";
				String from_tSendMail_1 = (context.mailFrom);
				String to_tSendMail_1 = (context.mailTo).replace(";", ",");
				String cc_tSendMail_1 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String bcc_tSendMail_1 = (("") == null || "".equals("")) ? null
						: ("").replace(";", ",");
				String subject_tSendMail_1 = ("NDLサーバからの成功通知" + TalendDate
						.getDate("CCYY-MM-DD hh:mm:ss"));

				java.util.List<java.util.Map<String, String>> headers_tSendMail_1 = new java.util.ArrayList<java.util.Map<String, String>>();
				java.util.List<String> attachments_tSendMail_1 = new java.util.ArrayList<String>();
				java.util.List<String> contentTransferEncoding_tSendMail_1 = new java.util.ArrayList<String>();

				String message_tSendMail_1 = ((context.userName + "様、\r\n"
						+ TalendDate.formatDate("YYYY-MM-dd", context.from)
						+ "から"
						+ TalendDate.formatDate("YYYY-MM-dd", context.to) + "にデータを正常に取得しました。\r\nシステムにログインして確認してください。\r\n\r\nよろしくお願いします。\r\n注意：このメールは配信専用なので返信しないでください。") == null || ""
						.equals(context.userName
								+ "様、\r\n"
								+ TalendDate.formatDate("YYYY-MM-dd",
										context.from)
								+ "から"
								+ TalendDate.formatDate("YYYY-MM-dd",
										context.to)
								+ "にデータを正常に取得しました。\r\nシステムにログインして確認してください。\r\n\r\nよろしくお願いします。\r\n注意：このメールは配信専用なので返信しないでください。")) ? "\"\""
						: (context.userName
								+ "様、\r\n"
								+ TalendDate.formatDate("YYYY-MM-dd",
										context.from)
								+ "から"
								+ TalendDate.formatDate("YYYY-MM-dd",
										context.to) + "にデータを正常に取得しました。\r\nシステムにログインして確認してください。\r\n\r\nよろしくお願いします。\r\n注意：このメールは配信専用なので返信しないでください。");
				java.util.Properties props_tSendMail_1 = System.getProperties();
				props_tSendMail_1.put("mail.smtp.host", smtpHost_tSendMail_1);
				props_tSendMail_1.put("mail.smtp.port", smtpPort_tSendMail_1);
				props_tSendMail_1.put("mail.mime.encodefilename", "true");
				props_tSendMail_1.put("mail.smtp.starttls.enable", "true");
				java.security.Security
						.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
				props_tSendMail_1.put("mail.smtp.socketFactory.class",
						"javax.net.ssl.SSLSocketFactory");
				props_tSendMail_1.put("mail.smtp.socketFactory.fallback",
						"false");
				props_tSendMail_1.put("mail.smtp.socketFactory.port",
						smtpPort_tSendMail_1);
				try {

					props_tSendMail_1.put("mail.smtp.auth", "true");
					javax.mail.Session session_tSendMail_1 = javax.mail.Session
							.getInstance(props_tSendMail_1,
									new javax.mail.Authenticator() {
										protected javax.mail.PasswordAuthentication getPasswordAuthentication() {

											final String decryptedPassword_tSendMail_1 = context.mailPassword;

											return new javax.mail.PasswordAuthentication(
													context.mailFrom,
													decryptedPassword_tSendMail_1);
										}
									});

					javax.mail.Message msg_tSendMail_1 = new javax.mail.internet.MimeMessage(
							session_tSendMail_1);
					msg_tSendMail_1
							.setFrom(new javax.mail.internet.InternetAddress(
									from_tSendMail_1, null));
					msg_tSendMail_1.setRecipients(
							javax.mail.Message.RecipientType.TO,
							javax.mail.internet.InternetAddress.parse(
									to_tSendMail_1, false));
					if (cc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(
								javax.mail.Message.RecipientType.CC,
								javax.mail.internet.InternetAddress.parse(
										cc_tSendMail_1, false));
					if (bcc_tSendMail_1 != null)
						msg_tSendMail_1.setRecipients(
								javax.mail.Message.RecipientType.BCC,
								javax.mail.internet.InternetAddress.parse(
										bcc_tSendMail_1, false));
					msg_tSendMail_1.setSubject(subject_tSendMail_1);

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < headers_tSendMail_1
							.size(); i_tSendMail_1++) {
						java.util.Map<String, String> header_tSendMail_1 = headers_tSendMail_1
								.get(i_tSendMail_1);
						msg_tSendMail_1.setHeader(
								header_tSendMail_1.get("KEY"),
								header_tSendMail_1.get("VALUE"));
					}
					msg_tSendMail_1.setSentDate(new Date());
					msg_tSendMail_1.setHeader("X-Priority", "1"); // High->1
																	// Normal->3
																	// Low->5
					javax.mail.Multipart mp_tSendMail_1 = new javax.mail.internet.MimeMultipart();
					javax.mail.internet.MimeBodyPart mbpText_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
					mbpText_tSendMail_1.setText(message_tSendMail_1, "UTF-8",
							"plain");
					mp_tSendMail_1.addBodyPart(mbpText_tSendMail_1);

					javax.mail.internet.MimeBodyPart mbpFile_tSendMail_1 = null;

					for (int i_tSendMail_1 = 0; i_tSendMail_1 < attachments_tSendMail_1
							.size(); i_tSendMail_1++) {
						String filename_tSendMail_1 = attachments_tSendMail_1
								.get(i_tSendMail_1);
						javax.activation.FileDataSource fds_tSendMail_1 = null;
						java.io.File file_tSendMail_1 = new java.io.File(
								filename_tSendMail_1);

						if (!file_tSendMail_1.exists()) {
							continue;
						}

						if (file_tSendMail_1.isDirectory()) {
							java.io.File[] subFiles_tSendMail_1 = file_tSendMail_1
									.listFiles();
							for (java.io.File subFile_tSendMail_1 : subFiles_tSendMail_1) {
								if (subFile_tSendMail_1.isFile()) {
									fds_tSendMail_1 = new javax.activation.FileDataSource(
											subFile_tSendMail_1
													.getAbsolutePath());
									mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
									mbpFile_tSendMail_1
											.setDataHandler(new javax.activation.DataHandler(
													fds_tSendMail_1));
									mbpFile_tSendMail_1
											.setFileName(javax.mail.internet.MimeUtility
													.encodeText(fds_tSendMail_1
															.getName()));
									if (contentTransferEncoding_tSendMail_1
											.get(i_tSendMail_1)
											.equalsIgnoreCase("base64")) {
										mbpFile_tSendMail_1.setHeader(
												"Content-Transfer-Encoding",
												"base64");
									}
									mp_tSendMail_1
											.addBodyPart(mbpFile_tSendMail_1);
								}
							}
						} else {
							mbpFile_tSendMail_1 = new javax.mail.internet.MimeBodyPart();
							fds_tSendMail_1 = new javax.activation.FileDataSource(
									filename_tSendMail_1);
							mbpFile_tSendMail_1
									.setDataHandler(new javax.activation.DataHandler(
											fds_tSendMail_1));
							mbpFile_tSendMail_1
									.setFileName(javax.mail.internet.MimeUtility
											.encodeText(fds_tSendMail_1
													.getName()));
							if (contentTransferEncoding_tSendMail_1.get(
									i_tSendMail_1).equalsIgnoreCase("base64")) {
								mbpFile_tSendMail_1.setHeader(
										"Content-Transfer-Encoding", "base64");
							}
							mp_tSendMail_1.addBodyPart(mbpFile_tSendMail_1);
						}
					}
					// -- set the content --
					msg_tSendMail_1.setContent(mp_tSendMail_1);
					// add handlers for main MIME types
					javax.activation.MailcapCommandMap mc_tSendMail_1 = (javax.activation.MailcapCommandMap) javax.activation.CommandMap
							.getDefaultCommandMap();
					mc_tSendMail_1
							.addMailcap("text/html;; x-java-content-handler=com.sun.mail.handlers.text_html");
					mc_tSendMail_1
							.addMailcap("text/xml;; x-java-content-handler=com.sun.mail.handlers.text_xml");
					mc_tSendMail_1
							.addMailcap("text/plain;; x-java-content-handler=com.sun.mail.handlers.text_plain");
					mc_tSendMail_1
							.addMailcap("multipart/*;; x-java-content-handler=com.sun.mail.handlers.multipart_mixed");
					mc_tSendMail_1
							.addMailcap("message/rfc822;; x-java-content-handler=com.sun.mail.handlers.message_rfc822");
					javax.activation.CommandMap
							.setDefaultCommandMap(mc_tSendMail_1);
					// -- Send the message --
					javax.mail.Transport.send(msg_tSendMail_1);
				} catch (java.lang.Exception e) {

					System.err.println(e.toString());

				} finally {
					props_tSendMail_1.remove("mail.smtp.host");
					props_tSendMail_1.remove("mail.smtp.port");

					props_tSendMail_1.remove("mail.mime.encodefilename");

					props_tSendMail_1.remove("mail.smtp.starttls.enable");

					props_tSendMail_1.remove("mail.smtp.socketFactory.class");
					props_tSendMail_1
							.remove("mail.smtp.socketFactory.fallback");
					props_tSendMail_1.remove("mail.smtp.socketFactory.port");

					props_tSendMail_1.remove("mail.smtp.auth");
				}

				tos_count_tSendMail_1++;

				/**
				 * [tSendMail_1 main ] stop
				 */

				/**
				 * [tSendMail_1 end ] start
				 */

				currentComponent = "tSendMail_1";

				ok_Hash.put("tSendMail_1", true);
				end_Hash.put("tSendMail_1", System.currentTimeMillis());

				if (true) {

					tDie_1Process(globalMap);
				}

				/**
				 * [tSendMail_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tSendMail_1 finally ] start
				 */

				currentComponent = "tSendMail_1";

				/**
				 * [tSendMail_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tSendMail_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				class BytesLimit65535_tDie_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tDie_1().limitLog4jByte();

				/**
				 * [tDie_1 begin ] stop
				 */

				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err.println(context.MSG_JOB_DONE);

				globalMap.put("tDie_1_DIE_MESSAGE", context.MSG_JOB_DONE);
				globalMap.put("tDie_1_DIE_MESSAGES", context.MSG_JOB_DONE);
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(3);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */

				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public void tJava_12Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_12 begin ] start
				 */

				ok_Hash.put("tJava_12", false);
				start_Hash.put("tJava_12", System.currentTimeMillis());

				currentComponent = "tJava_12";

				int tos_count_tJava_12 = 0;

				class BytesLimit65535_tJava_12 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_12().limitLog4jByte();

				globalMap
						.put("currPos", (Integer) globalMap.get("currPos") + 1);

				context.from = context.masterFrom;
				context.to = context.masterTo;
				context.until = context.untilMaster;

				// System.out.println(context.from + " - " + context.to + " - "
				// + context.until);

				/**
				 * [tJava_12 begin ] stop
				 */

				/**
				 * [tJava_12 main ] start
				 */

				currentComponent = "tJava_12";

				tos_count_tJava_12++;

				/**
				 * [tJava_12 main ] stop
				 */

				/**
				 * [tJava_12 end ] start
				 */

				currentComponent = "tJava_12";

				ok_Hash.put("tJava_12", true);
				end_Hash.put("tJava_12", System.currentTimeMillis());

				/**
				 * [tJava_12 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_12 finally ] start
				 */

				currentComponent = "tJava_12";

				/**
				 * [tJava_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}

	public void tJava_5Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_5 begin ] start
				 */

				ok_Hash.put("tJava_5", false);
				start_Hash.put("tJava_5", System.currentTimeMillis());

				currentComponent = "tJava_5";

				int tos_count_tJava_5 = 0;

				class BytesLimit65535_tJava_5 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_5().limitLog4jByte();

				context.from = context.until;
				context.until = context.to;

				/**
				 * [tJava_5 begin ] stop
				 */

				/**
				 * [tJava_5 main ] start
				 */

				currentComponent = "tJava_5";

				tos_count_tJava_5++;

				/**
				 * [tJava_5 main ] stop
				 */

				/**
				 * [tJava_5 end ] start
				 */

				currentComponent = "tJava_5";

				ok_Hash.put("tJava_5", true);
				end_Hash.put("tJava_5", System.currentTimeMillis());

				/**
				 * [tJava_5 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_5 finally ] start
				 */

				currentComponent = "tJava_5";

				/**
				 * [tJava_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}

	public void tJava_6Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tJava_6 begin ] start
				 */

				ok_Hash.put("tJava_6", false);
				start_Hash.put("tJava_6", System.currentTimeMillis());

				currentComponent = "tJava_6";

				int tos_count_tJava_6 = 0;

				class BytesLimit65535_tJava_6 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tJava_6().limitLog4jByte();

				context.from = context.until;
				context.until = TalendDate.addDate(context.until, 1, "yyyy");

				/**
				 * [tJava_6 begin ] stop
				 */

				/**
				 * [tJava_6 main ] start
				 */

				currentComponent = "tJava_6";

				tos_count_tJava_6++;

				/**
				 * [tJava_6 main ] stop
				 */

				/**
				 * [tJava_6 end ] start
				 */

				currentComponent = "tJava_6";

				ok_Hash.put("tJava_6", true);
				end_Hash.put("tJava_6", System.currentTimeMillis());

				/**
				 * [tJava_6 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tJava_6 finally ] start
				 */

				currentComponent = "tJava_6";

				/**
				 * [tJava_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}

	public void tMysqlClose_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMysqlClose_1 begin ] start
				 */

				ok_Hash.put("tMysqlClose_1", false);
				start_Hash.put("tMysqlClose_1", System.currentTimeMillis());

				currentComponent = "tMysqlClose_1";

				int tos_count_tMysqlClose_1 = 0;

				class BytesLimit65535_tMysqlClose_1 {
					public void limitLog4jByte() throws Exception {

					}
				}

				new BytesLimit65535_tMysqlClose_1().limitLog4jByte();

				/**
				 * [tMysqlClose_1 begin ] stop
				 */

				/**
				 * [tMysqlClose_1 main ] start
				 */

				currentComponent = "tMysqlClose_1";

				java.sql.Connection conn_tMysqlClose_1 = (java.sql.Connection) globalMap
						.get("conn_tMysqlConnection_1");

				if (conn_tMysqlClose_1 != null
						&& !conn_tMysqlClose_1.isClosed()) {

					conn_tMysqlClose_1.close();

				}

				tos_count_tMysqlClose_1++;

				/**
				 * [tMysqlClose_1 main ] stop
				 */

				/**
				 * [tMysqlClose_1 end ] start
				 */

				currentComponent = "tMysqlClose_1";

				ok_Hash.put("tMysqlClose_1", true);
				end_Hash.put("tMysqlClose_1", System.currentTimeMillis());

				/**
				 * [tMysqlClose_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlClose_1 finally ] start
				 */

				currentComponent = "tMysqlClose_1";

				/**
				 * [tMysqlClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlClose_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final CRAWLER_DATA CRAWLER_DATAClass = new CRAWLER_DATA();

		int exitCode = CRAWLER_DATAClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = CRAWLER_DATA.class.getClassLoader()
					.getResourceAsStream(
							"projectndl/crawler_data_0_1/contexts/"
									+ contextStr + ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.apiLink = (String) context.getProperty("apiLink");
			try {
				String context_from_value = context.getProperty("from");
				if (context_from_value == null) {
					context_from_value = "";
				}
				int context_from_pos = context_from_value.indexOf(";");
				String context_from_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_from_pos > -1) {
					context_from_pattern = context_from_value.substring(0,
							context_from_pos);
					context_from_value = context_from_value
							.substring(context_from_pos + 1);
				}

				context.from = (java.util.Date) (new java.text.SimpleDateFormat(
						context_from_pattern).parse(context_from_value));

			} catch (ParseException e) {
				context.from = null;
			}
			try {
				context.lineCount = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("lineCount"));
			} catch (NumberFormatException e) {
				context.lineCount = null;
			}
			context.metadataPrefix = (String) context
					.getProperty("metadataPrefix");
			context.realUrl = (String) context.getProperty("realUrl");
			context.resumptionToken = (String) context
					.getProperty("resumptionToken");
			context.set = (String) context.getProperty("set");
			try {
				String context_to_value = context.getProperty("to");
				if (context_to_value == null) {
					context_to_value = "";
				}
				int context_to_pos = context_to_value.indexOf(";");
				String context_to_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_to_pos > -1) {
					context_to_pattern = context_to_value.substring(0,
							context_to_pos);
					context_to_value = context_to_value
							.substring(context_to_pos + 1);
				}

				context.to = (java.util.Date) (new java.text.SimpleDateFormat(
						context_to_pattern).parse(context_to_value));

			} catch (ParseException e) {
				context.to = null;
			}
			try {
				context.tryCount = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("tryCount"));
			} catch (NumberFormatException e) {
				context.tryCount = null;
			}
			try {
				String context_until_value = context.getProperty("until");
				if (context_until_value == null) {
					context_until_value = "";
				}
				int context_until_pos = context_until_value.indexOf(";");
				String context_until_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_until_pos > -1) {
					context_until_pattern = context_until_value.substring(0,
							context_until_pos);
					context_until_value = context_until_value
							.substring(context_until_pos + 1);
				}

				context.until = (java.util.Date) (new java.text.SimpleDateFormat(
						context_until_pattern).parse(context_until_value));

			} catch (ParseException e) {
				context.until = null;
			}
			try {
				context.loopTime = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("loopTime"));
			} catch (NumberFormatException e) {
				context.loopTime = null;
			}
			context.mailTo = (String) context.getProperty("mailTo");
			String pwd_mailPassword_value = context.getProperty("mailPassword");
			context.mailPassword = null;
			if (pwd_mailPassword_value != null) {
				if (context_param.containsKey("mailPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.mailPassword = pwd_mailPassword_value;
				} else if (!pwd_mailPassword_value.isEmpty()) {
					try {
						context.mailPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_mailPassword_value);
						context.put("mailPassword", context.mailPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.mailFrom = (String) context.getProperty("mailFrom");
			context.dbHost = (String) context.getProperty("dbHost");
			try {
				context.dbPort = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("dbPort"));
			} catch (NumberFormatException e) {
				context.dbPort = null;
			}
			context.dbSchema = (String) context.getProperty("dbSchema");
			context.dbUser = (String) context.getProperty("dbUser");
			String pwd_dbPassword_value = context.getProperty("dbPassword");
			context.dbPassword = null;
			if (pwd_dbPassword_value != null) {
				if (context_param.containsKey("dbPassword")) {// no need to
																// decrypt if it
																// come from
																// program
																// argument or
																// parent job
																// runtime
					context.dbPassword = pwd_dbPassword_value;
				} else if (!pwd_dbPassword_value.isEmpty()) {
					try {
						context.dbPassword = routines.system.PasswordEncryptUtil
								.decryptPassword(pwd_dbPassword_value);
						context.put("dbPassword", context.dbPassword);
					} catch (java.lang.RuntimeException e) {
						// do nothing
					}
				}
			}
			context.MSG_JOB_DONE = (String) context.getProperty("MSG_JOB_DONE");
			context.MSG_JOB_ERR = (String) context.getProperty("MSG_JOB_ERR");
			context.dbQueryParam = (String) context.getProperty("dbQueryParam");
			context.userName = (String) context.getProperty("userName");
			context.MSG_LOG_SUCCESS = (String) context
					.getProperty("MSG_LOG_SUCCESS");
			context.MSG_LOG_ERROR = (String) context
					.getProperty("MSG_LOG_ERROR");
			context.tmpFile = (String) context.getProperty("tmpFile");
			context.xslFile = (String) context.getProperty("xslFile");
			try {
				String context_masterFrom_value = context
						.getProperty("masterFrom");
				if (context_masterFrom_value == null) {
					context_masterFrom_value = "";
				}
				int context_masterFrom_pos = context_masterFrom_value
						.indexOf(";");
				String context_masterFrom_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_masterFrom_pos > -1) {
					context_masterFrom_pattern = context_masterFrom_value
							.substring(0, context_masterFrom_pos);
					context_masterFrom_value = context_masterFrom_value
							.substring(context_masterFrom_pos + 1);
				}

				context.masterFrom = (java.util.Date) (new java.text.SimpleDateFormat(
						context_masterFrom_pattern)
						.parse(context_masterFrom_value));

			} catch (ParseException e) {
				context.masterFrom = null;
			}
			try {
				String context_masterTo_value = context.getProperty("masterTo");
				if (context_masterTo_value == null) {
					context_masterTo_value = "";
				}
				int context_masterTo_pos = context_masterTo_value.indexOf(";");
				String context_masterTo_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_masterTo_pos > -1) {
					context_masterTo_pattern = context_masterTo_value
							.substring(0, context_masterTo_pos);
					context_masterTo_value = context_masterTo_value
							.substring(context_masterTo_pos + 1);
				}

				context.masterTo = (java.util.Date) (new java.text.SimpleDateFormat(
						context_masterTo_pattern).parse(context_masterTo_value));

			} catch (ParseException e) {
				context.masterTo = null;
			}
			try {
				String context_untilMaster_value = context
						.getProperty("untilMaster");
				if (context_untilMaster_value == null) {
					context_untilMaster_value = "";
				}
				int context_untilMaster_pos = context_untilMaster_value
						.indexOf(";");
				String context_untilMaster_pattern = "yyyy-MM-dd HH:mm:ss";
				if (context_untilMaster_pos > -1) {
					context_untilMaster_pattern = context_untilMaster_value
							.substring(0, context_untilMaster_pos);
					context_untilMaster_value = context_untilMaster_value
							.substring(context_untilMaster_pos + 1);
				}

				context.untilMaster = (java.util.Date) (new java.text.SimpleDateFormat(
						context_untilMaster_pattern)
						.parse(context_untilMaster_value));

			} catch (ParseException e) {
				context.untilMaster = null;
			}
			context.settingID = (String) context.getProperty("settingID");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("apiLink")) {
				context.apiLink = (String) parentContextMap.get("apiLink");
			}
			if (parentContextMap.containsKey("from")) {
				context.from = (java.util.Date) parentContextMap.get("from");
			}
			if (parentContextMap.containsKey("lineCount")) {
				context.lineCount = (Integer) parentContextMap.get("lineCount");
			}
			if (parentContextMap.containsKey("metadataPrefix")) {
				context.metadataPrefix = (String) parentContextMap
						.get("metadataPrefix");
			}
			if (parentContextMap.containsKey("realUrl")) {
				context.realUrl = (String) parentContextMap.get("realUrl");
			}
			if (parentContextMap.containsKey("resumptionToken")) {
				context.resumptionToken = (String) parentContextMap
						.get("resumptionToken");
			}
			if (parentContextMap.containsKey("set")) {
				context.set = (String) parentContextMap.get("set");
			}
			if (parentContextMap.containsKey("to")) {
				context.to = (java.util.Date) parentContextMap.get("to");
			}
			if (parentContextMap.containsKey("tryCount")) {
				context.tryCount = (Integer) parentContextMap.get("tryCount");
			}
			if (parentContextMap.containsKey("until")) {
				context.until = (java.util.Date) parentContextMap.get("until");
			}
			if (parentContextMap.containsKey("loopTime")) {
				context.loopTime = (Integer) parentContextMap.get("loopTime");
			}
			if (parentContextMap.containsKey("mailTo")) {
				context.mailTo = (String) parentContextMap.get("mailTo");
			}
			if (parentContextMap.containsKey("mailPassword")) {
				context.mailPassword = (java.lang.String) parentContextMap
						.get("mailPassword");
			}
			if (parentContextMap.containsKey("mailFrom")) {
				context.mailFrom = (String) parentContextMap.get("mailFrom");
			}
			if (parentContextMap.containsKey("dbHost")) {
				context.dbHost = (String) parentContextMap.get("dbHost");
			}
			if (parentContextMap.containsKey("dbPort")) {
				context.dbPort = (Integer) parentContextMap.get("dbPort");
			}
			if (parentContextMap.containsKey("dbSchema")) {
				context.dbSchema = (String) parentContextMap.get("dbSchema");
			}
			if (parentContextMap.containsKey("dbUser")) {
				context.dbUser = (String) parentContextMap.get("dbUser");
			}
			if (parentContextMap.containsKey("dbPassword")) {
				context.dbPassword = (java.lang.String) parentContextMap
						.get("dbPassword");
			}
			if (parentContextMap.containsKey("MSG_JOB_DONE")) {
				context.MSG_JOB_DONE = (String) parentContextMap
						.get("MSG_JOB_DONE");
			}
			if (parentContextMap.containsKey("MSG_JOB_ERR")) {
				context.MSG_JOB_ERR = (String) parentContextMap
						.get("MSG_JOB_ERR");
			}
			if (parentContextMap.containsKey("dbQueryParam")) {
				context.dbQueryParam = (String) parentContextMap
						.get("dbQueryParam");
			}
			if (parentContextMap.containsKey("userName")) {
				context.userName = (String) parentContextMap.get("userName");
			}
			if (parentContextMap.containsKey("MSG_LOG_SUCCESS")) {
				context.MSG_LOG_SUCCESS = (String) parentContextMap
						.get("MSG_LOG_SUCCESS");
			}
			if (parentContextMap.containsKey("MSG_LOG_ERROR")) {
				context.MSG_LOG_ERROR = (String) parentContextMap
						.get("MSG_LOG_ERROR");
			}
			if (parentContextMap.containsKey("tmpFile")) {
				context.tmpFile = (String) parentContextMap.get("tmpFile");
			}
			if (parentContextMap.containsKey("xslFile")) {
				context.xslFile = (String) parentContextMap.get("xslFile");
			}
			if (parentContextMap.containsKey("masterFrom")) {
				context.masterFrom = (java.util.Date) parentContextMap
						.get("masterFrom");
			}
			if (parentContextMap.containsKey("masterTo")) {
				context.masterTo = (java.util.Date) parentContextMap
						.get("masterTo");
			}
			if (parentContextMap.containsKey("untilMaster")) {
				context.untilMaster = (java.util.Date) parentContextMap
						.get("untilMaster");
			}
			if (parentContextMap.containsKey("settingID")) {
				context.settingID = (String) parentContextMap.get("settingID");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		parametersToEncrypt.add("mailPassword");
		parametersToEncrypt.add("dbPassword");
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "",
				resumeUtil.convertToJsonText(context, parametersToEncrypt));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlConnection_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlConnection_1) {
			globalMap.put("tMysqlConnection_1_SUBPROCESS_STATE", -1);

			e_tMysqlConnection_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : CRAWLER_DATA");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tMysqlConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tMysqlConnection_1",
				globalMap.get("conn_tMysqlConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 597648 characters generated by Talend Open Studio for ESB on the February 26,
 * 2024 10:48:04 AM ICT
 ************************************************************************************************/
